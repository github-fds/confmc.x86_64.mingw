// Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2017.4 (lin64) Build 2086221 Fri Dec 15 20:54:30 MST 2017
// Date        : Mon Jun 11 09:03:01 2018
// Host        : AndoUbuntu running 64-bit Ubuntu 16.04.4 LTS
// Command     : write_verilog -force -mode funcsim bfm_ahb.vm
// Design      : bfm_ahb
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7z045ffg900-2
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* DEPTH_FIFO_CU2F = "512" *) (* DEPTH_FIFO_DF2U = "512" *) (* DEPTH_FIFO_DU2F = "512" *) 
(* FPGA_FAMILY = "ZYNQ7000" *) (* NUM_WATERMARK = "4" *) (* PCLK_FREQ = "80000000" *) 
(* PCLK_INV = "1'b1" *) (* TRANSACTOR_ID = "4'b0000" *) (* WIDTH_DT = "32" *) 
(* NotValidForBitStream *)
module bfm_ahb
   (SYS_CLK_STABLE,
    SYS_CLK,
    SYS_RST_N,
    SL_RST_N,
    SL_CS_N,
    SL_PCLK,
    SL_AD,
    SL_FLAGA,
    SL_FLAGB,
    SL_FLAGC,
    SL_FLAGD,
    SL_RD_N,
    SL_WR_N,
    SL_OE_N,
    SL_PKTEND_N,
    SL_DT_I,
    SL_DT_O,
    SL_DT_T,
    SL_MODE,
    HRESETn,
    HCLK,
    HBUSREQ,
    HGRANT,
    HADDR,
    HPROT,
    HTRANS,
    HLOCK,
    HWRITE,
    HSIZE,
    HBURST,
    HWDATA,
    HRDATA,
    HRESP,
    HREADY,
    IRQ,
    FIQ,
    GPOUT,
    GPIN);
  input SYS_CLK_STABLE;
  input SYS_CLK;
  output SYS_RST_N;
  input SL_RST_N;
  output SL_CS_N;
  output SL_PCLK;
  output [1:0]SL_AD;
  input SL_FLAGA;
  input SL_FLAGB;
  input SL_FLAGC;
  input SL_FLAGD;
  output SL_RD_N;
  output SL_WR_N;
  output SL_OE_N;
  output SL_PKTEND_N;
  input [31:0]SL_DT_I;
  output [31:0]SL_DT_O;
  output SL_DT_T;
  input [1:0]SL_MODE;
  input HRESETn;
  input HCLK;
  output HBUSREQ;
  input HGRANT;
  output [31:0]HADDR;
  output [3:0]HPROT;
  output [1:0]HTRANS;
  output HLOCK;
  output HWRITE;
  output [2:0]HSIZE;
  output [2:0]HBURST;
  output [31:0]HWDATA;
  input [31:0]HRDATA;
  input [1:0]HRESP;
  input HREADY;
  input IRQ;
  input FIQ;
  output [15:0]GPOUT;
  input [15:0]GPIN;

  wire FIQ;
  wire [15:0]GPIN;
  wire [15:0]GPOUT;
  wire [31:0]HADDR;
  wire [2:0]HBURST;
  wire HBUSREQ;
  wire HCLK;
  wire HGRANT;
  wire HLOCK;
  wire [3:0]HPROT;
  wire [31:0]HRDATA;
  wire HREADY;
  wire HRESETn;
  wire [1:0]HRESP;
  wire [2:0]HSIZE;
  wire [1:0]HTRANS;
  wire [31:0]HWDATA;
  wire HWRITE;
  wire IRQ;
  wire [1:0]SL_AD;
  wire SL_CS_N;
  wire [31:0]SL_DT_I;
  wire [31:0]SL_DT_O;
  wire SL_DT_T;
  wire SL_FLAGA;
  wire SL_FLAGB;
  wire SL_FLAGC;
  wire SL_FLAGD;
  wire [1:0]SL_MODE;
  wire SL_OE_N;
  wire SL_PCLK;
  wire SL_PKTEND_N;
  wire SL_RD_N;
  wire SL_RST_N;
  wire SL_WR_N;
  wire SYS_CLK;
  wire SYS_CLK_STABLE;
  wire SYS_RST_N;
  wire [31:0]cmd_rd_data;
  wire [15:0]cmd_rd_items;
  wire cmd_rd_ready;
  wire cmd_rd_valid;
  wire [33:0]f2u_wr_data;
  wire f2u_wr_ready;
  wire [15:0]f2u_wr_rooms;
  wire f2u_wr_valid;
  wire [3:0]transactor_sel;
  wire [31:0]u2f_rd_data;
  wire [15:0]u2f_rd_items;
  wire u2f_rd_ready;
  wire u2f_rd_valid;
  wire NLW_u_gpif2mst_cmd_rd_empty_UNCONNECTED;
  wire NLW_u_gpif2mst_f2u_wr_full_UNCONNECTED;
  wire NLW_u_gpif2mst_u2f_rd_empty_UNCONNECTED;

  (* ADD_CMD = "2'b00" *) 
  (* ADD_F2U = "2'b10" *) 
  (* ADD_U2F = "2'b00" *) 
  (* CMD_CU2F = "4'b0010" *) 
  (* CMD_DF2U = "4'b0101" *) 
  (* CMD_DU2F = "4'b0100" *) 
  (* CMD_REQ = "4'b1000" *) 
  (* DEPTH_FIFO_CU2F = "512" *) 
  (* DEPTH_FIFO_DF2U = "512" *) 
  (* DEPTH_FIFO_DU2F = "512" *) 
  (* FIFO_CU2F = "2'b00" *) 
  (* FIFO_DF2U = "2'b10" *) 
  (* FIFO_DU2F = "2'b01" *) 
  (* FPGA_FAMILY = "ZYNQ7000" *) 
  (* MODE_CMD = "2'b00" *) 
  (* MODE_SF2U = "2'b10" *) 
  (* MODE_SLOOP = "2'b11" *) 
  (* MODE_SU2F = "2'b01" *) 
  (* NUM_WATERMARK = "4" *) 
  (* PCLK_FREQ = "80000000" *) 
  (* PCLK_INV = "1'b1" *) 
  (* PCLK_MHZ = "80" *) 
  (* STA_CMD0 = "5'b00001" *) 
  (* STA_CMD1 = "5'b00010" *) 
  (* STA_CMD2 = "5'b00011" *) 
  (* STA_F2U = "5'b01110" *) 
  (* STA_F2U0 = "5'b01101" *) 
  (* STA_F2U_END = "5'b10100" *) 
  (* STA_F2U_GUARD = "5'b01100" *) 
  (* STA_F2U_WAIT = "5'b10010" *) 
  (* STA_F2U_WAIT_EMPTY = "5'b10001" *) 
  (* STA_F2U_WAIT_FULL = "5'b10000" *) 
  (* STA_F2U_WAIT_FULL_N = "5'b01111" *) 
  (* STA_F2U_ZLP = "5'b10011" *) 
  (* STA_PAR = "5'b00100" *) 
  (* STA_READY = "5'b00000" *) 
  (* STA_REQ = "5'b10101" *) 
  (* STA_U2F = "5'b00110" *) 
  (* STA_U2F_END0 = "5'b01001" *) 
  (* STA_U2F_END1 = "5'b01010" *) 
  (* STA_U2F_END2 = "5'b01011" *) 
  (* STA_U2F_GUARD = "5'b00101" *) 
  (* STA_U2F_PRE_EMPTY_N = "5'b00111" *) 
  (* STA_U2F_WAIT_EMPTY_N = "5'b01000" *) 
  (* WIDTH_DT = "32" *) 
  gpif2mst u_gpif2mst
       (.SL_AD(SL_AD),
        .SL_CS_N(SL_CS_N),
        .SL_DT_I(SL_DT_I),
        .SL_DT_O(SL_DT_O),
        .SL_DT_T(SL_DT_T),
        .SL_FLAGA(SL_FLAGA),
        .SL_FLAGB(SL_FLAGB),
        .SL_FLAGC(SL_FLAGC),
        .SL_FLAGD(SL_FLAGD),
        .SL_MODE(SL_MODE),
        .SL_OE_N(SL_OE_N),
        .SL_PCLK(SL_PCLK),
        .SL_PKTEND_N(SL_PKTEND_N),
        .SL_RD_N(SL_RD_N),
        .SL_RST_N(SL_RST_N),
        .SL_WR_N(SL_WR_N),
        .SYS_CLK(SYS_CLK),
        .SYS_CLK_STABLE(SYS_CLK_STABLE),
        .SYS_RST_N(SYS_RST_N),
        .cmd_rd_clk(HCLK),
        .cmd_rd_data(cmd_rd_data),
        .cmd_rd_empty(NLW_u_gpif2mst_cmd_rd_empty_UNCONNECTED),
        .cmd_rd_items(cmd_rd_items),
        .cmd_rd_ready(cmd_rd_ready),
        .cmd_rd_valid(cmd_rd_valid),
        .f2u_wr_clk(HCLK),
        .f2u_wr_data(f2u_wr_data),
        .f2u_wr_full(NLW_u_gpif2mst_f2u_wr_full_UNCONNECTED),
        .f2u_wr_ready(f2u_wr_ready),
        .f2u_wr_rooms(f2u_wr_rooms),
        .f2u_wr_valid(f2u_wr_valid),
        .transactor_sel(transactor_sel),
        .u2f_rd_clk(HCLK),
        .u2f_rd_data(u2f_rd_data),
        .u2f_rd_empty(NLW_u_gpif2mst_u2f_rd_empty_UNCONNECTED),
        .u2f_rd_items(u2f_rd_items),
        .u2f_rd_ready(u2f_rd_ready),
        .u2f_rd_valid(u2f_rd_valid));
  (* SC_CMD = "1" *) 
  (* SC_IDLE = "0" *) 
  (* SC_RD_WAIT = "3" *) 
  (* SC_WR_WAIT = "2" *) 
  (* SR_ARB = "1" *) 
  (* SR_IDLE = "0" *) 
  (* SR_RD0 = "2" *) 
  (* SR_RD1 = "3" *) 
  (* SR_RD2 = "4" *) 
  (* SR_RD3 = "5" *) 
  (* SR_RD4 = "6" *) 
  (* SR_RD5 = "7" *) 
  (* SR_RD6 = "8" *) 
  (* SW_ARB = "1" *) 
  (* SW_IDLE = "0" *) 
  (* SW_WR0 = "2" *) 
  (* SW_WR1 = "3" *) 
  (* SW_WR2 = "4" *) 
  (* TRANSACTOR_ID = "4'b0000" *) 
  trx_ahb u_trx_ahb
       (.FIQ(FIQ),
        .GPIN(GPIN),
        .GPOUT(GPOUT),
        .HADDR(HADDR),
        .HBURST(HBURST),
        .HBUSREQ(HBUSREQ),
        .HCLK(HCLK),
        .HGRANT(HGRANT),
        .HLOCK(HLOCK),
        .HPROT(HPROT),
        .HRDATA(HRDATA),
        .HREADY(HREADY),
        .HRESETn(HRESETn),
        .HRESP(HRESP),
        .HSIZE(HSIZE),
        .HTRANS(HTRANS),
        .HWDATA(HWDATA),
        .HWRITE(HWRITE),
        .IRQ(IRQ),
        .cmd_data(cmd_rd_data),
        .cmd_items(cmd_rd_items),
        .cmd_ready(cmd_rd_ready),
        .cmd_valid(cmd_rd_valid),
        .f2u_data(f2u_wr_data),
        .f2u_ready(f2u_wr_ready),
        .f2u_rooms(f2u_wr_rooms),
        .f2u_valid(f2u_wr_valid),
        .transactor_sel(transactor_sel),
        .u2f_data(u2f_rd_data),
        .u2f_items(u2f_rd_items),
        .u2f_ready(u2f_rd_ready),
        .u2f_valid(u2f_rd_valid));
endmodule

(* ADD_CMD = "2'b00" *) (* ADD_F2U = "2'b10" *) (* ADD_U2F = "2'b00" *) 
(* CMD_CU2F = "4'b0010" *) (* CMD_DF2U = "4'b0101" *) (* CMD_DU2F = "4'b0100" *) 
(* CMD_REQ = "4'b1000" *) (* DEPTH_FIFO_CU2F = "512" *) (* DEPTH_FIFO_DF2U = "512" *) 
(* DEPTH_FIFO_DU2F = "512" *) (* FIFO_CU2F = "2'b00" *) (* FIFO_DF2U = "2'b10" *) 
(* FIFO_DU2F = "2'b01" *) (* FPGA_FAMILY = "ZYNQ7000" *) (* MODE_CMD = "2'b00" *) 
(* MODE_SF2U = "2'b10" *) (* MODE_SLOOP = "2'b11" *) (* MODE_SU2F = "2'b01" *) 
(* NUM_WATERMARK = "4" *) (* PCLK_FREQ = "80000000" *) (* PCLK_INV = "1'b1" *) 
(* PCLK_MHZ = "80" *) (* STA_CMD0 = "5'b00001" *) (* STA_CMD1 = "5'b00010" *) 
(* STA_CMD2 = "5'b00011" *) (* STA_F2U = "5'b01110" *) (* STA_F2U0 = "5'b01101" *) 
(* STA_F2U_END = "5'b10100" *) (* STA_F2U_GUARD = "5'b01100" *) (* STA_F2U_WAIT = "5'b10010" *) 
(* STA_F2U_WAIT_EMPTY = "5'b10001" *) (* STA_F2U_WAIT_FULL = "5'b10000" *) (* STA_F2U_WAIT_FULL_N = "5'b01111" *) 
(* STA_F2U_ZLP = "5'b10011" *) (* STA_PAR = "5'b00100" *) (* STA_READY = "5'b00000" *) 
(* STA_REQ = "5'b10101" *) (* STA_U2F = "5'b00110" *) (* STA_U2F_END0 = "5'b01001" *) 
(* STA_U2F_END1 = "5'b01010" *) (* STA_U2F_END2 = "5'b01011" *) (* STA_U2F_GUARD = "5'b00101" *) 
(* STA_U2F_PRE_EMPTY_N = "5'b00111" *) (* STA_U2F_WAIT_EMPTY_N = "5'b01000" *) (* WIDTH_DT = "32" *) 
module gpif2mst
   (SYS_CLK_STABLE,
    SYS_CLK,
    SYS_RST_N,
    SL_RST_N,
    SL_CS_N,
    SL_PCLK,
    SL_AD,
    SL_FLAGA,
    SL_FLAGB,
    SL_FLAGC,
    SL_FLAGD,
    SL_RD_N,
    SL_WR_N,
    SL_OE_N,
    SL_PKTEND_N,
    SL_DT_I,
    SL_DT_O,
    SL_DT_T,
    SL_MODE,
    transactor_sel,
    cmd_rd_clk,
    cmd_rd_ready,
    cmd_rd_valid,
    cmd_rd_data,
    cmd_rd_empty,
    cmd_rd_items,
    u2f_rd_clk,
    u2f_rd_ready,
    u2f_rd_valid,
    u2f_rd_data,
    u2f_rd_empty,
    u2f_rd_items,
    f2u_wr_clk,
    f2u_wr_ready,
    f2u_wr_valid,
    f2u_wr_data,
    f2u_wr_full,
    f2u_wr_rooms);
  (* xc_pulldown = "1" *) input SYS_CLK_STABLE;
  input SYS_CLK;
  (* mark_debug = "true" *) (* xc_pullup = "1" *) output SYS_RST_N;
  (* mark_debug = "true" *) input SL_RST_N;
  (* mark_debug = "true" *) output SL_CS_N;
  output SL_PCLK;
  (* IOB = "TRUE" *) (* mark_debug = "true" *) output [1:0]SL_AD;
  (* mark_debug = "true" *) (* xc_pullup = "1" *) input SL_FLAGA;
  (* mark_debug = "true" *) (* xc_pullup = "1" *) input SL_FLAGB;
  (* mark_debug = "true" *) (* xc_pullup = "1" *) input SL_FLAGC;
  (* mark_debug = "true" *) (* xc_pullup = "1" *) input SL_FLAGD;
  (* IOB = "TRUE" *) (* mark_debug = "true" *) (* xc_pullup = "1" *) output SL_RD_N;
  (* IOB = "TRUE" *) (* mark_debug = "true" *) (* xc_pullup = "1" *) output SL_WR_N;
  (* IOB = "true" *) (* mark_debug = "true" *) (* xc_pullup = "1" *) output SL_OE_N;
  (* IOB = "TRUE" *) (* mark_debug = "true" *) (* xc_pullup = "1" *) output SL_PKTEND_N;
  (* IOB = "true" *) (* mark_debug = "true" *) input [31:0]SL_DT_I;
  (* IOB = "TRUE" *) (* mark_debug = "true" *) output [31:0]SL_DT_O;
  (* IOB = "TRUE" *) (* mark_debug = "true" *) output SL_DT_T;
  (* mark_debug = "true" *) (* xc_pulldown = "1" *) input [1:0]SL_MODE;
  (* keep = "true" *) (* mark_debug = "true" *) output [3:0]transactor_sel;
  input cmd_rd_clk;
  (* mark_debug = "true" *) input cmd_rd_ready;
  (* mark_debug = "true" *) output cmd_rd_valid;
  (* mark_debug = "true" *) output [31:0]cmd_rd_data;
  (* mark_debug = "true" *) output cmd_rd_empty;
  (* mark_debug = "true" *) output [15:0]cmd_rd_items;
  input u2f_rd_clk;
  (* mark_debug = "true" *) input u2f_rd_ready;
  (* mark_debug = "true" *) output u2f_rd_valid;
  (* mark_debug = "true" *) output [31:0]u2f_rd_data;
  (* mark_debug = "true" *) output u2f_rd_empty;
  (* mark_debug = "true" *) output [15:0]u2f_rd_items;
  input f2u_wr_clk;
  (* mark_debug = "true" *) output f2u_wr_ready;
  (* mark_debug = "true" *) input f2u_wr_valid;
  (* mark_debug = "true" *) input [33:0]f2u_wr_data;
  (* mark_debug = "true" *) output f2u_wr_full;
  (* mark_debug = "true" *) output [15:0]f2u_wr_rooms;

  wire \<const0> ;
  (* MARK_DEBUG *) wire [1:0]SL_AD;
  wire \SL_AD[0]_i_1_n_0 ;
  wire \SL_AD[1]_i_1_n_0 ;
  wire \SL_AD[1]_i_2_n_0 ;
  wire \SL_AD[1]_i_3_n_0 ;
  wire \SL_AD[1]_i_4_n_0 ;
  wire \SL_AD[1]_i_5_n_0 ;
  (* IOB = "true" *) (* MARK_DEBUG *) wire [31:0]SL_DT_I;
  (* MARK_DEBUG *) wire [31:0]SL_DT_O;
  wire \SL_DT_O[0]_i_1_n_0 ;
  wire \SL_DT_O[0]_i_2_n_0 ;
  wire \SL_DT_O[0]_i_3_n_0 ;
  wire \SL_DT_O[0]_i_4_n_0 ;
  wire \SL_DT_O[0]_i_5_n_0 ;
  wire \SL_DT_O[10]_i_1_n_0 ;
  wire \SL_DT_O[10]_i_2_n_0 ;
  wire \SL_DT_O[10]_i_3_n_0 ;
  wire \SL_DT_O[10]_i_4_n_0 ;
  wire \SL_DT_O[11]_i_1_n_0 ;
  wire \SL_DT_O[12]_i_2_n_0 ;
  wire \SL_DT_O[12]_i_3_n_0 ;
  wire \SL_DT_O[13]_i_2_n_0 ;
  wire \SL_DT_O[13]_i_3_n_0 ;
  wire \SL_DT_O[14]_i_2_n_0 ;
  wire \SL_DT_O[14]_i_3_n_0 ;
  wire \SL_DT_O[15]_i_1_n_0 ;
  wire \SL_DT_O[16]_i_1_n_0 ;
  wire \SL_DT_O[17]_i_1_n_0 ;
  wire \SL_DT_O[18]_i_1_n_0 ;
  wire \SL_DT_O[19]_i_1_n_0 ;
  wire \SL_DT_O[19]_i_2_n_0 ;
  wire \SL_DT_O[19]_i_3_n_0 ;
  wire \SL_DT_O[1]_i_1_n_0 ;
  wire \SL_DT_O[20]_i_1_n_0 ;
  wire \SL_DT_O[20]_i_2_n_0 ;
  wire \SL_DT_O[20]_i_3_n_0 ;
  wire \SL_DT_O[21]_i_1_n_0 ;
  wire \SL_DT_O[22]_i_1_n_0 ;
  wire \SL_DT_O[22]_i_2_n_0 ;
  wire \SL_DT_O[22]_i_3_n_0 ;
  wire \SL_DT_O[23]_i_1_n_0 ;
  wire \SL_DT_O[24]_i_1_n_0 ;
  wire \SL_DT_O[24]_i_2_n_0 ;
  wire \SL_DT_O[24]_i_3_n_0 ;
  wire \SL_DT_O[24]_i_4_n_0 ;
  wire \SL_DT_O[25]_i_1_n_0 ;
  wire \SL_DT_O[25]_i_2_n_0 ;
  wire \SL_DT_O[25]_i_3_n_0 ;
  wire \SL_DT_O[25]_i_4_n_0 ;
  wire \SL_DT_O[25]_i_5_n_0 ;
  wire \SL_DT_O[26]_i_10_n_0 ;
  wire \SL_DT_O[26]_i_1_n_0 ;
  wire \SL_DT_O[26]_i_2_n_0 ;
  wire \SL_DT_O[26]_i_3_n_0 ;
  wire \SL_DT_O[26]_i_4_n_0 ;
  wire \SL_DT_O[26]_i_5_n_0 ;
  wire \SL_DT_O[26]_i_6_n_0 ;
  wire \SL_DT_O[26]_i_7_n_0 ;
  wire \SL_DT_O[26]_i_8_n_0 ;
  wire \SL_DT_O[26]_i_9_n_0 ;
  wire \SL_DT_O[27]_i_1_n_0 ;
  wire \SL_DT_O[27]_i_2_n_0 ;
  wire \SL_DT_O[27]_i_3_n_0 ;
  wire \SL_DT_O[27]_i_4_n_0 ;
  wire \SL_DT_O[28]_i_1_n_0 ;
  wire \SL_DT_O[28]_i_2_n_0 ;
  wire \SL_DT_O[28]_i_3_n_0 ;
  wire \SL_DT_O[28]_i_4_n_0 ;
  wire \SL_DT_O[29]_i_10_n_0 ;
  wire \SL_DT_O[29]_i_11_n_0 ;
  wire \SL_DT_O[29]_i_1_n_0 ;
  wire \SL_DT_O[29]_i_2_n_0 ;
  wire \SL_DT_O[29]_i_3_n_0 ;
  wire \SL_DT_O[29]_i_4_n_0 ;
  wire \SL_DT_O[29]_i_5_n_0 ;
  wire \SL_DT_O[29]_i_6_n_0 ;
  wire \SL_DT_O[29]_i_7_n_0 ;
  wire \SL_DT_O[29]_i_8_n_0 ;
  wire \SL_DT_O[29]_i_9_n_0 ;
  wire \SL_DT_O[2]_i_1_n_0 ;
  wire \SL_DT_O[30]_i_2_n_0 ;
  wire \SL_DT_O[30]_i_3_n_0 ;
  wire \SL_DT_O[31]_i_1_n_0 ;
  wire \SL_DT_O[31]_i_2_n_0 ;
  wire \SL_DT_O[31]_i_3_n_0 ;
  wire \SL_DT_O[31]_i_4_n_0 ;
  wire \SL_DT_O[31]_i_5_n_0 ;
  wire \SL_DT_O[3]_i_1_n_0 ;
  wire \SL_DT_O[3]_i_2_n_0 ;
  wire \SL_DT_O[3]_i_3_n_0 ;
  wire \SL_DT_O[3]_i_4_n_0 ;
  wire \SL_DT_O[4]_i_1_n_0 ;
  wire \SL_DT_O[5]_i_1_n_0 ;
  wire \SL_DT_O[5]_i_2_n_0 ;
  wire \SL_DT_O[5]_i_3_n_0 ;
  wire \SL_DT_O[5]_i_4_n_0 ;
  wire \SL_DT_O[6]_i_1_n_0 ;
  wire \SL_DT_O[7]_i_2_n_0 ;
  wire \SL_DT_O[7]_i_3_n_0 ;
  wire \SL_DT_O[8]_i_1_n_0 ;
  wire \SL_DT_O[8]_i_2_n_0 ;
  wire \SL_DT_O[8]_i_3_n_0 ;
  wire \SL_DT_O[8]_i_4_n_0 ;
  wire \SL_DT_O[9]_i_1_n_0 ;
  wire \SL_DT_O[9]_i_2_n_0 ;
  wire \SL_DT_O[9]_i_3_n_0 ;
  wire \SL_DT_O_reg[12]_i_1_n_0 ;
  wire \SL_DT_O_reg[13]_i_1_n_0 ;
  wire \SL_DT_O_reg[14]_i_1_n_0 ;
  wire \SL_DT_O_reg[30]_i_1_n_0 ;
  wire \SL_DT_O_reg[7]_i_1_n_0 ;
  (* MARK_DEBUG *) wire SL_DT_T;
  wire SL_DT_T_i_1_n_0;
  wire SL_DT_T_i_2_n_0;
  wire SL_DT_T_i_3_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire SL_EMPTY_N;
  (* MARK_DEBUG *) (* xc_pullup = "1" *) wire SL_FLAGA;
  (* MARK_DEBUG *) (* xc_pullup = "1" *) wire SL_FLAGB;
  (* MARK_DEBUG *) (* xc_pullup = "1" *) wire SL_FLAGC;
  (* MARK_DEBUG *) (* xc_pullup = "1" *) wire SL_FLAGD;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire SL_FULL_N;
  (* MARK_DEBUG *) (* xc_pulldown = "1" *) wire [1:0]SL_MODE;
  (* MARK_DEBUG *) (* xc_pullup = "1" *) wire SL_OE_N;
  wire SL_OE_N_i_1_n_0;
  wire SL_OE_N_i_2_n_0;
  wire SL_OE_N_i_3_n_0;
  wire SL_OE_N_i_4_n_0;
  wire SL_OE_N_i_5_n_0;
  wire SL_OE_N_i_6_n_0;
  wire SL_PCLK;
  (* MARK_DEBUG *) wire SL_PCLK_STABLE;
  (* MARK_DEBUG *) (* xc_pullup = "1" *) wire SL_PKTEND_N;
  wire SL_PKTEND_N_i_10_n_0;
  wire SL_PKTEND_N_i_1_n_0;
  wire SL_PKTEND_N_i_2_n_0;
  wire SL_PKTEND_N_i_3_n_0;
  wire SL_PKTEND_N_i_4_n_0;
  wire SL_PKTEND_N_i_5_n_0;
  wire SL_PKTEND_N_i_6_n_0;
  wire SL_PKTEND_N_i_7_n_0;
  wire SL_PKTEND_N_i_8_n_0;
  wire SL_PKTEND_N_i_9_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire SL_PRE_EMPTY_N;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire SL_PRE_FULL_N;
  (* MARK_DEBUG *) (* xc_pullup = "1" *) wire SL_RD_N;
  wire SL_RD_N00;
  wire SL_RD_N0_reg_n_0;
  wire SL_RD_N1;
  wire SL_RD_N_i_1_n_0;
  wire SL_RD_N_i_2_n_0;
  wire SL_RD_N_i_3_n_0;
  wire SL_RD_N_i_4_n_0;
  wire SL_RD_N_i_5_n_0;
  (* MARK_DEBUG *) wire SL_RST_N;
  (* MARK_DEBUG *) (* xc_pullup = "1" *) wire SL_WR_N;
  wire SL_WR_N_i_1_n_0;
  wire SL_WR_N_i_2_n_0;
  wire SL_WR_N_i_3_n_0;
  wire SL_WR_N_i_4_n_0;
  wire SL_WR_N_i_5_n_0;
  wire SL_WR_N_i_6_n_0;
  wire SL_WR_N_i_7_n_0;
  wire SL_WR_N_i_8_n_0;
  wire SYS_CLK_STABLE;
  (* MARK_DEBUG *) (* xc_pullup = "1" *) wire SYS_RST_N;
  wire cmd_rd_clk;
  (* MARK_DEBUG *) wire [31:0]cmd_rd_data;
  (* MARK_DEBUG *) wire cmd_rd_empty;
  (* MARK_DEBUG *) wire [15:0]cmd_rd_items;
  (* MARK_DEBUG *) wire cmd_rd_ready;
  (* MARK_DEBUG *) wire cmd_rd_valid;
  (* MARK_DEBUG *) wire cmd_wr_clk;
  (* MARK_DEBUG *) wire [31:0]cmd_wr_data;
  wire \cmd_wr_data[31]_i_1_n_0 ;
  (* MARK_DEBUG *) wire cmd_wr_full;
  (* MARK_DEBUG *) wire cmd_wr_fullN;
  (* MARK_DEBUG *) wire cmd_wr_ready;
  (* MARK_DEBUG *) wire [15:0]cmd_wr_rooms;
  (* MARK_DEBUG *) wire cmd_wr_valid;
  wire cmd_wr_valid_i_1_n_0;
  wire cmd_wr_valid_i_2_n_0;
  (* MARK_DEBUG *) wire [15:0]cnt;
  wire \cnt[0]_i_1_n_0 ;
  wire \cnt[0]_i_2_n_0 ;
  wire \cnt[0]_i_3_n_0 ;
  wire \cnt[0]_i_4_n_0 ;
  wire \cnt[0]_i_5_n_0 ;
  wire \cnt[0]_i_6_n_0 ;
  wire \cnt[0]_i_7_n_0 ;
  wire \cnt[0]_i_8_n_0 ;
  wire \cnt[10]_i_1_n_0 ;
  wire \cnt[10]_i_2_n_0 ;
  wire \cnt[10]_i_3_n_0 ;
  wire \cnt[10]_i_4_n_0 ;
  wire \cnt[10]_i_5_n_0 ;
  wire \cnt[10]_i_6_n_0 ;
  wire \cnt[11]_i_1_n_0 ;
  wire \cnt[11]_i_2_n_0 ;
  wire \cnt[11]_i_3_n_0 ;
  wire \cnt[11]_i_4_n_0 ;
  wire \cnt[11]_i_5_n_0 ;
  wire \cnt[11]_i_6_n_0 ;
  wire \cnt[12]_i_1_n_0 ;
  wire \cnt[12]_i_2_n_0 ;
  wire \cnt[12]_i_3_n_0 ;
  wire \cnt[12]_i_5_n_0 ;
  wire \cnt[12]_i_6_n_0 ;
  wire \cnt[12]_i_7_n_0 ;
  wire \cnt[13]_i_1_n_0 ;
  wire \cnt[13]_i_2_n_0 ;
  wire \cnt[13]_i_3_n_0 ;
  wire \cnt[13]_i_4_n_0 ;
  wire \cnt[13]_i_5_n_0 ;
  wire \cnt[13]_i_6_n_0 ;
  wire \cnt[14]_i_10_n_0 ;
  wire \cnt[14]_i_11_n_0 ;
  wire \cnt[14]_i_12_n_0 ;
  wire \cnt[14]_i_1_n_0 ;
  wire \cnt[14]_i_2_n_0 ;
  wire \cnt[14]_i_3_n_0 ;
  wire \cnt[14]_i_5_n_0 ;
  wire \cnt[14]_i_6_n_0 ;
  wire \cnt[14]_i_7_n_0 ;
  wire \cnt[14]_i_8_n_0 ;
  wire \cnt[14]_i_9_n_0 ;
  wire \cnt[15]_i_10_n_0 ;
  wire \cnt[15]_i_11_n_0 ;
  wire \cnt[15]_i_12_n_0 ;
  wire \cnt[15]_i_13_n_0 ;
  wire \cnt[15]_i_14_n_0 ;
  wire \cnt[15]_i_15_n_0 ;
  wire \cnt[15]_i_16_n_0 ;
  wire \cnt[15]_i_1_n_0 ;
  wire \cnt[15]_i_2_n_0 ;
  wire \cnt[15]_i_3_n_0 ;
  wire \cnt[15]_i_4_n_0 ;
  wire \cnt[15]_i_5_n_0 ;
  wire \cnt[15]_i_6_n_0 ;
  wire \cnt[15]_i_7_n_0 ;
  wire \cnt[15]_i_8_n_0 ;
  wire \cnt[15]_i_9_n_0 ;
  wire \cnt[1]_i_1_n_0 ;
  wire \cnt[1]_i_2_n_0 ;
  wire \cnt[1]_i_3_n_0 ;
  wire \cnt[1]_i_4_n_0 ;
  wire \cnt[1]_i_5_n_0 ;
  wire \cnt[1]_i_6_n_0 ;
  wire \cnt[2]_i_1_n_0 ;
  wire \cnt[2]_i_2_n_0 ;
  wire \cnt[2]_i_3_n_0 ;
  wire \cnt[2]_i_4_n_0 ;
  wire \cnt[2]_i_5_n_0 ;
  wire \cnt[2]_i_6_n_0 ;
  wire \cnt[3]_i_1_n_0 ;
  wire \cnt[3]_i_2_n_0 ;
  wire \cnt[3]_i_3_n_0 ;
  wire \cnt[3]_i_4_n_0 ;
  wire \cnt[3]_i_5_n_0 ;
  wire \cnt[3]_i_6_n_0 ;
  wire \cnt[4]_i_1_n_0 ;
  wire \cnt[4]_i_2_n_0 ;
  wire \cnt[4]_i_3_n_0 ;
  wire \cnt[4]_i_5_n_0 ;
  wire \cnt[4]_i_6_n_0 ;
  wire \cnt[4]_i_7_n_0 ;
  wire \cnt[5]_i_1_n_0 ;
  wire \cnt[5]_i_2_n_0 ;
  wire \cnt[5]_i_3_n_0 ;
  wire \cnt[5]_i_4_n_0 ;
  wire \cnt[5]_i_5_n_0 ;
  wire \cnt[5]_i_6_n_0 ;
  wire \cnt[6]_i_1_n_0 ;
  wire \cnt[6]_i_2_n_0 ;
  wire \cnt[6]_i_3_n_0 ;
  wire \cnt[6]_i_4_n_0 ;
  wire \cnt[6]_i_5_n_0 ;
  wire \cnt[6]_i_6_n_0 ;
  wire \cnt[7]_i_1_n_0 ;
  wire \cnt[7]_i_2_n_0 ;
  wire \cnt[7]_i_3_n_0 ;
  wire \cnt[7]_i_4_n_0 ;
  wire \cnt[7]_i_5_n_0 ;
  wire \cnt[7]_i_6_n_0 ;
  wire \cnt[8]_i_1_n_0 ;
  wire \cnt[8]_i_2_n_0 ;
  wire \cnt[8]_i_3_n_0 ;
  wire \cnt[8]_i_5_n_0 ;
  wire \cnt[8]_i_6_n_0 ;
  wire \cnt[8]_i_7_n_0 ;
  wire \cnt[9]_i_1_n_0 ;
  wire \cnt[9]_i_2_n_0 ;
  wire \cnt[9]_i_3_n_0 ;
  wire \cnt[9]_i_4_n_0 ;
  wire \cnt[9]_i_5_n_0 ;
  wire \cnt[9]_i_6_n_0 ;
  wire \cnt_reg[12]_i_4_n_0 ;
  wire \cnt_reg[12]_i_4_n_1 ;
  wire \cnt_reg[12]_i_4_n_2 ;
  wire \cnt_reg[12]_i_4_n_3 ;
  wire \cnt_reg[12]_i_4_n_4 ;
  wire \cnt_reg[12]_i_4_n_5 ;
  wire \cnt_reg[12]_i_4_n_6 ;
  wire \cnt_reg[12]_i_4_n_7 ;
  wire \cnt_reg[14]_i_4_n_2 ;
  wire \cnt_reg[14]_i_4_n_3 ;
  wire \cnt_reg[14]_i_4_n_5 ;
  wire \cnt_reg[14]_i_4_n_6 ;
  wire \cnt_reg[14]_i_4_n_7 ;
  wire \cnt_reg[4]_i_4_n_0 ;
  wire \cnt_reg[4]_i_4_n_1 ;
  wire \cnt_reg[4]_i_4_n_2 ;
  wire \cnt_reg[4]_i_4_n_3 ;
  wire \cnt_reg[4]_i_4_n_4 ;
  wire \cnt_reg[4]_i_4_n_5 ;
  wire \cnt_reg[4]_i_4_n_6 ;
  wire \cnt_reg[4]_i_4_n_7 ;
  wire \cnt_reg[8]_i_4_n_0 ;
  wire \cnt_reg[8]_i_4_n_1 ;
  wire \cnt_reg[8]_i_4_n_2 ;
  wire \cnt_reg[8]_i_4_n_3 ;
  wire \cnt_reg[8]_i_4_n_4 ;
  wire \cnt_reg[8]_i_4_n_5 ;
  wire \cnt_reg[8]_i_4_n_6 ;
  wire \cnt_reg[8]_i_4_n_7 ;
  (* RTL_KEEP = "true" *) wire [31:0]control_flit;
  wire \control_flit[0]_i_1_n_0 ;
  wire \control_flit[10]_i_1_n_0 ;
  wire \control_flit[11]_i_1_n_0 ;
  wire \control_flit[12]_i_1_n_0 ;
  wire \control_flit[12]_i_2_n_0 ;
  wire \control_flit[13]_i_1_n_0 ;
  wire \control_flit[14]_i_1_n_0 ;
  wire \control_flit[15]_i_1_n_0 ;
  wire \control_flit[16]_i_1_n_0 ;
  wire \control_flit[17]_i_1_n_0 ;
  wire \control_flit[18]_i_1_n_0 ;
  wire \control_flit[19]_i_1_n_0 ;
  wire \control_flit[1]_i_1_n_0 ;
  wire \control_flit[20]_i_1_n_0 ;
  wire \control_flit[21]_i_1_n_0 ;
  wire \control_flit[22]_i_1_n_0 ;
  wire \control_flit[23]_i_1_n_0 ;
  wire \control_flit[24]_i_1_n_0 ;
  wire \control_flit[25]_i_1_n_0 ;
  wire \control_flit[26]_i_1_n_0 ;
  wire \control_flit[27]_i_1_n_0 ;
  wire \control_flit[28]_i_1_n_0 ;
  wire \control_flit[29]_i_1_n_0 ;
  wire \control_flit[2]_i_1_n_0 ;
  wire \control_flit[30]_i_1_n_0 ;
  wire \control_flit[31]_i_1_n_0 ;
  wire \control_flit[31]_i_2_n_0 ;
  wire \control_flit[31]_i_3_n_0 ;
  wire \control_flit[3]_i_1_n_0 ;
  wire \control_flit[4]_i_1_n_0 ;
  wire \control_flit[5]_i_1_n_0 ;
  wire \control_flit[6]_i_1_n_0 ;
  wire \control_flit[7]_i_1_n_0 ;
  wire \control_flit[8]_i_1_n_0 ;
  wire \control_flit[9]_i_1_n_0 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [3:0]ctl_cmd;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [15:0]dat_leng;
  (* MARK_DEBUG *) wire f2u_rd_clk;
  (* MARK_DEBUG *) wire [33:0]f2u_rd_data;
  (* MARK_DEBUG *) wire f2u_rd_empty;
  (* MARK_DEBUG *) wire f2u_rd_emptyN;
  (* MARK_DEBUG *) wire [15:0]f2u_rd_items;
  (* MARK_DEBUG *) wire f2u_rd_ready;
  wire f2u_rd_ready_inferred_i_2_n_0;
  (* MARK_DEBUG *) wire f2u_rd_valid;
  wire f2u_wr_clk;
  (* MARK_DEBUG *) wire [33:0]f2u_wr_data;
  (* MARK_DEBUG *) wire f2u_wr_full;
  (* MARK_DEBUG *) wire f2u_wr_ready;
  (* MARK_DEBUG *) wire [15:0]f2u_wr_rooms;
  (* MARK_DEBUG *) wire f2u_wr_valid;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [1:0]fifo_sel;
  wire \fifo_sel[0]_i_1_n_0 ;
  wire \fifo_sel[0]_i_3_n_0 ;
  wire \fifo_sel[0]_i_4_n_0 ;
  wire \fifo_sel[1]_i_1_n_0 ;
  wire \fifo_sel[1]_i_3_n_0 ;
  wire \fifo_sel[1]_i_4_n_0 ;
  wire \fifo_sel_reg[0]_i_2_n_0 ;
  wire \fifo_sel_reg[1]_i_2_n_0 ;
  wire g0_b0__0_n_0;
  wire g0_b0_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [1:0]mask;
  wire \mask[0]_i_1_n_0 ;
  wire \mask[1]_i_1_n_0 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [15:0]pushed;
  wire \pushed[0]_i_1_n_0 ;
  wire \pushed[10]_i_1_n_0 ;
  wire \pushed[11]_i_1_n_0 ;
  wire \pushed[12]_i_1_n_0 ;
  wire \pushed[13]_i_1_n_0 ;
  wire \pushed[14]_i_1_n_0 ;
  wire \pushed[15]_i_1_n_0 ;
  wire \pushed[1]_i_1_n_0 ;
  wire \pushed[2]_i_1_n_0 ;
  wire \pushed[3]_i_1_n_0 ;
  wire \pushed[3]_i_3_n_0 ;
  wire \pushed[4]_i_1_n_0 ;
  wire \pushed[5]_i_1_n_0 ;
  wire \pushed[6]_i_1_n_0 ;
  wire \pushed[7]_i_1_n_0 ;
  wire \pushed[8]_i_1_n_0 ;
  wire \pushed[9]_i_1_n_0 ;
  wire \pushed_reg[11]_i_2_n_0 ;
  wire \pushed_reg[11]_i_2_n_1 ;
  wire \pushed_reg[11]_i_2_n_2 ;
  wire \pushed_reg[11]_i_2_n_3 ;
  wire \pushed_reg[11]_i_2_n_4 ;
  wire \pushed_reg[11]_i_2_n_5 ;
  wire \pushed_reg[11]_i_2_n_6 ;
  wire \pushed_reg[11]_i_2_n_7 ;
  wire \pushed_reg[15]_i_2_n_1 ;
  wire \pushed_reg[15]_i_2_n_2 ;
  wire \pushed_reg[15]_i_2_n_3 ;
  wire \pushed_reg[15]_i_2_n_4 ;
  wire \pushed_reg[15]_i_2_n_5 ;
  wire \pushed_reg[15]_i_2_n_6 ;
  wire \pushed_reg[15]_i_2_n_7 ;
  wire \pushed_reg[3]_i_2_n_0 ;
  wire \pushed_reg[3]_i_2_n_1 ;
  wire \pushed_reg[3]_i_2_n_2 ;
  wire \pushed_reg[3]_i_2_n_3 ;
  wire \pushed_reg[3]_i_2_n_4 ;
  wire \pushed_reg[3]_i_2_n_5 ;
  wire \pushed_reg[3]_i_2_n_6 ;
  wire \pushed_reg[3]_i_2_n_7 ;
  wire \pushed_reg[7]_i_2_n_0 ;
  wire \pushed_reg[7]_i_2_n_1 ;
  wire \pushed_reg[7]_i_2_n_2 ;
  wire \pushed_reg[7]_i_2_n_3 ;
  wire \pushed_reg[7]_i_2_n_4 ;
  wire \pushed_reg[7]_i_2_n_5 ;
  wire \pushed_reg[7]_i_2_n_6 ;
  wire \pushed_reg[7]_i_2_n_7 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire reg_clk;
  wire reg_clk_i_1_n_0;
  (* MARK_DEBUG *) wire [15:0]remain;
  wire remain_inferred_i_10_n_0;
  wire remain_inferred_i_11_n_0;
  wire remain_inferred_i_12_n_0;
  wire remain_inferred_i_13_n_0;
  wire remain_inferred_i_14_n_0;
  wire remain_inferred_i_15_n_0;
  wire remain_inferred_i_16_n_0;
  wire remain_inferred_i_17_n_0;
  wire remain_inferred_i_18_n_0;
  wire remain_inferred_i_19_n_0;
  wire remain_inferred_i_1_n_1;
  wire remain_inferred_i_1_n_2;
  wire remain_inferred_i_1_n_3;
  wire remain_inferred_i_20_n_0;
  wire remain_inferred_i_2_n_0;
  wire remain_inferred_i_2_n_1;
  wire remain_inferred_i_2_n_2;
  wire remain_inferred_i_2_n_3;
  wire remain_inferred_i_3_n_0;
  wire remain_inferred_i_3_n_1;
  wire remain_inferred_i_3_n_2;
  wire remain_inferred_i_3_n_3;
  wire remain_inferred_i_4_n_0;
  wire remain_inferred_i_4_n_1;
  wire remain_inferred_i_4_n_2;
  wire remain_inferred_i_4_n_3;
  wire remain_inferred_i_5_n_0;
  wire remain_inferred_i_6_n_0;
  wire remain_inferred_i_7_n_0;
  wire remain_inferred_i_8_n_0;
  wire remain_inferred_i_9_n_0;
  (* MARK_DEBUG *) wire [3:0]req_cmd;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [1:0]sl_ad_reg;
  wire \sl_ad_reg[0]_i_1_n_0 ;
  wire \sl_ad_reg[1]_i_1_n_0 ;
  wire \sl_ad_reg[1]_i_2_n_0 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [1:0]sl_mode_reg;
  wire \sl_mode_reg[1]_i_1_n_0 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire sl_oe_n_reg;
  wire sl_oe_n_reg_i_1_n_0;
  wire sl_oe_n_reg_i_2_n_0;
  wire sl_oe_n_reg_i_3_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire sl_pktend_n_reg;
  wire sl_pktend_n_reg_i_1_n_0;
  wire sl_pktend_n_reg_i_2_n_0;
  wire sl_pktend_n_reg_i_3_n_0;
  wire sl_pktend_n_reg_i_4_n_0;
  wire sl_pktend_n_reg_i_5_n_0;
  wire sl_pktend_n_reg_i_6_n_0;
  wire sl_pktend_n_reg_i_7_n_0;
  wire sl_pktend_n_reg_i_8_n_0;
  wire sl_pktend_n_reg_i_9_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire sl_rd_n_reg;
  wire sl_rd_n_reg_i_1_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire sl_wr_n_reg;
  wire sl_wr_n_reg_i_1_n_0;
  wire sl_wr_n_reg_i_2_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [4:0]state;
  wire \state[0]_i_10_n_0 ;
  wire \state[0]_i_11_n_0 ;
  wire \state[0]_i_12_n_0 ;
  wire \state[0]_i_13_n_0 ;
  wire \state[0]_i_1_n_0 ;
  wire \state[0]_i_2_n_0 ;
  wire \state[0]_i_3_n_0 ;
  wire \state[0]_i_4_n_0 ;
  wire \state[0]_i_5_n_0 ;
  wire \state[0]_i_6_n_0 ;
  wire \state[0]_i_7_n_0 ;
  wire \state[0]_i_8_n_0 ;
  wire \state[0]_i_9_n_0 ;
  wire \state[1]_i_10_n_0 ;
  wire \state[1]_i_11_n_0 ;
  wire \state[1]_i_12_n_0 ;
  wire \state[1]_i_13_n_0 ;
  wire \state[1]_i_14_n_0 ;
  wire \state[1]_i_1_n_0 ;
  wire \state[1]_i_2_n_0 ;
  wire \state[1]_i_3_n_0 ;
  wire \state[1]_i_4_n_0 ;
  wire \state[1]_i_5_n_0 ;
  wire \state[1]_i_6_n_0 ;
  wire \state[1]_i_7_n_0 ;
  wire \state[1]_i_8_n_0 ;
  wire \state[1]_i_9_n_0 ;
  wire \state[2]_i_10_n_0 ;
  wire \state[2]_i_11_n_0 ;
  wire \state[2]_i_12_n_0 ;
  wire \state[2]_i_13_n_0 ;
  wire \state[2]_i_14_n_0 ;
  wire \state[2]_i_15_n_0 ;
  wire \state[2]_i_16_n_0 ;
  wire \state[2]_i_1_n_0 ;
  wire \state[2]_i_2_n_0 ;
  wire \state[2]_i_3_n_0 ;
  wire \state[2]_i_4_n_0 ;
  wire \state[2]_i_5_n_0 ;
  wire \state[2]_i_6_n_0 ;
  wire \state[2]_i_7_n_0 ;
  wire \state[2]_i_8_n_0 ;
  wire \state[2]_i_9_n_0 ;
  wire \state[3]_i_10_n_0 ;
  wire \state[3]_i_11_n_0 ;
  wire \state[3]_i_12_n_0 ;
  wire \state[3]_i_13_n_0 ;
  wire \state[3]_i_14_n_0 ;
  wire \state[3]_i_15_n_0 ;
  wire \state[3]_i_16_n_0 ;
  wire \state[3]_i_17_n_0 ;
  wire \state[3]_i_18_n_0 ;
  wire \state[3]_i_19_n_0 ;
  wire \state[3]_i_1_n_0 ;
  wire \state[3]_i_20_n_0 ;
  wire \state[3]_i_21_n_0 ;
  wire \state[3]_i_22_n_0 ;
  wire \state[3]_i_2_n_0 ;
  wire \state[3]_i_3_n_0 ;
  wire \state[3]_i_4_n_0 ;
  wire \state[3]_i_5_n_0 ;
  wire \state[3]_i_6_n_0 ;
  wire \state[3]_i_7_n_0 ;
  wire \state[3]_i_8_n_0 ;
  wire \state[3]_i_9_n_0 ;
  wire \state[4]_i_10_n_0 ;
  wire \state[4]_i_11_n_0 ;
  wire \state[4]_i_12_n_0 ;
  wire \state[4]_i_13_n_0 ;
  wire \state[4]_i_14_n_0 ;
  wire \state[4]_i_15_n_0 ;
  wire \state[4]_i_16_n_0 ;
  wire \state[4]_i_17_n_0 ;
  wire \state[4]_i_18_n_0 ;
  wire \state[4]_i_19_n_0 ;
  wire \state[4]_i_1_n_0 ;
  wire \state[4]_i_20_n_0 ;
  wire \state[4]_i_21_n_0 ;
  wire \state[4]_i_22_n_0 ;
  wire \state[4]_i_2_n_0 ;
  wire \state[4]_i_3_n_0 ;
  wire \state[4]_i_4_n_0 ;
  wire \state[4]_i_5_n_0 ;
  wire \state[4]_i_6_n_0 ;
  wire \state[4]_i_7_n_0 ;
  wire \state[4]_i_8_n_0 ;
  wire \state[4]_i_9_n_0 ;
  (* MARK_DEBUG *) wire [2:0]timeout;
  wire \timeout[0]_i_1_n_0 ;
  wire \timeout[0]_i_2_n_0 ;
  wire \timeout[1]_i_1_n_0 ;
  wire \timeout[1]_i_2_n_0 ;
  wire \timeout[2]_i_1_n_0 ;
  wire \timeout[2]_i_2_n_0 ;
  wire \timeout[2]_i_3_n_0 ;
  wire \timeout[2]_i_4_n_0 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [3:0]transactor_sel;
  wire u2f_rd_clk;
  (* MARK_DEBUG *) wire [31:0]u2f_rd_data;
  (* MARK_DEBUG *) wire u2f_rd_empty;
  (* MARK_DEBUG *) wire [15:0]u2f_rd_items;
  (* MARK_DEBUG *) wire u2f_rd_ready;
  (* MARK_DEBUG *) wire u2f_rd_valid;
  (* MARK_DEBUG *) wire u2f_wr_clk;
  (* MARK_DEBUG *) wire [31:0]u2f_wr_data;
  wire \u2f_wr_data[31]_i_1_n_0 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire u2f_wr_full;
  (* MARK_DEBUG *) wire u2f_wr_fullN;
  (* MARK_DEBUG *) wire u2f_wr_ready;
  (* MARK_DEBUG *) wire [15:0]u2f_wr_rooms;
  (* MARK_DEBUG *) wire u2f_wr_valid;
  wire u2f_wr_valid_i_1_n_0;
  wire u_cu2f_i_1_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [15:0]written;
  wire \written[0]_i_1_n_0 ;
  wire \written[10]_i_1_n_0 ;
  wire \written[11]_i_1_n_0 ;
  wire \written[12]_i_1_n_0 ;
  wire \written[13]_i_1_n_0 ;
  wire \written[14]_i_1_n_0 ;
  wire \written[15]_i_1_n_0 ;
  wire \written[15]_i_3_n_0 ;
  wire \written[1]_i_1_n_0 ;
  wire \written[2]_i_1_n_0 ;
  wire \written[3]_i_1_n_0 ;
  wire \written[3]_i_3_n_0 ;
  wire \written[4]_i_1_n_0 ;
  wire \written[5]_i_1_n_0 ;
  wire \written[6]_i_1_n_0 ;
  wire \written[7]_i_1_n_0 ;
  wire \written[8]_i_1_n_0 ;
  wire \written[9]_i_1_n_0 ;
  wire \written_reg[11]_i_2_n_0 ;
  wire \written_reg[11]_i_2_n_1 ;
  wire \written_reg[11]_i_2_n_2 ;
  wire \written_reg[11]_i_2_n_3 ;
  wire \written_reg[11]_i_2_n_4 ;
  wire \written_reg[11]_i_2_n_5 ;
  wire \written_reg[11]_i_2_n_6 ;
  wire \written_reg[11]_i_2_n_7 ;
  wire \written_reg[15]_i_2_n_1 ;
  wire \written_reg[15]_i_2_n_2 ;
  wire \written_reg[15]_i_2_n_3 ;
  wire \written_reg[15]_i_2_n_4 ;
  wire \written_reg[15]_i_2_n_5 ;
  wire \written_reg[15]_i_2_n_6 ;
  wire \written_reg[15]_i_2_n_7 ;
  wire \written_reg[3]_i_2_n_0 ;
  wire \written_reg[3]_i_2_n_1 ;
  wire \written_reg[3]_i_2_n_2 ;
  wire \written_reg[3]_i_2_n_3 ;
  wire \written_reg[3]_i_2_n_4 ;
  wire \written_reg[3]_i_2_n_5 ;
  wire \written_reg[3]_i_2_n_6 ;
  wire \written_reg[3]_i_2_n_7 ;
  wire \written_reg[7]_i_2_n_0 ;
  wire \written_reg[7]_i_2_n_1 ;
  wire \written_reg[7]_i_2_n_2 ;
  wire \written_reg[7]_i_2_n_3 ;
  wire \written_reg[7]_i_2_n_4 ;
  wire \written_reg[7]_i_2_n_5 ;
  wire \written_reg[7]_i_2_n_6 ;
  wire \written_reg[7]_i_2_n_7 ;
  wire \NLW_BLK_ZYNQ.u_sl_pclk_R_UNCONNECTED ;
  wire \NLW_BLK_ZYNQ.u_sl_pclk_S_UNCONNECTED ;
  wire [3:2]\NLW_cnt_reg[14]_i_4_CO_UNCONNECTED ;
  wire [3:3]\NLW_cnt_reg[14]_i_4_O_UNCONNECTED ;
  wire [3:3]\NLW_pushed_reg[15]_i_2_CO_UNCONNECTED ;
  wire [3:3]NLW_remain_inferred_i_1_CO_UNCONNECTED;
  wire NLW_u_cu2f_emptyN_UNCONNECTED;
  wire NLW_u_df2u_fullN_UNCONNECTED;
  wire NLW_u_du2f_emptyN_UNCONNECTED;
  wire [3:3]\NLW_written_reg[15]_i_2_CO_UNCONNECTED ;

  assign SL_CS_N = \<const0> ;
  assign f2u_rd_clk = SYS_CLK;
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* __SRVAL = "TRUE" *) 
  ODDR #(
    .DDR_CLK_EDGE("OPPOSITE_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    \BLK_ZYNQ.u_sl_pclk 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D1(1'b0),
        .D2(1'b1),
        .Q(SL_PCLK),
        .R(\NLW_BLK_ZYNQ.u_sl_pclk_R_UNCONNECTED ),
        .S(\NLW_BLK_ZYNQ.u_sl_pclk_S_UNCONNECTED ));
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h00002A228AAA8880)) 
    \SL_AD[0]_i_1 
       (.I0(SL_AD[0]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[4]),
        .O(\SL_AD[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8F888F8F8F888888)) 
    \SL_AD[1]_i_1 
       (.I0(\SL_AD[1]_i_2_n_0 ),
        .I1(SL_AD[1]),
        .I2(state[4]),
        .I3(\SL_AD[1]_i_3_n_0 ),
        .I4(\SL_AD[1]_i_4_n_0 ),
        .I5(\SL_AD[1]_i_5_n_0 ),
        .O(\SL_AD[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00750000)) 
    \SL_AD[1]_i_2 
       (.I0(state[2]),
        .I1(state[1]),
        .I2(state[0]),
        .I3(state[3]),
        .I4(state[4]),
        .O(\SL_AD[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFE0002)) 
    \SL_AD[1]_i_3 
       (.I0(\state[3]_i_14_n_0 ),
        .I1(state[0]),
        .I2(state[3]),
        .I3(state[1]),
        .I4(SL_AD[1]),
        .O(\SL_AD[1]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hCEEE)) 
    \SL_AD[1]_i_4 
       (.I0(state[3]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .O(\SL_AD[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000007000)) 
    \SL_AD[1]_i_5 
       (.I0(mask[0]),
        .I1(sl_mode_reg[0]),
        .I2(mask[1]),
        .I3(sl_mode_reg[1]),
        .I4(state[0]),
        .I5(state[1]),
        .O(\SL_AD[1]_i_5_n_0 ));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_AD_reg[0] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_AD[0]_i_1_n_0 ),
        .Q(SL_AD[0]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_AD_reg[1] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_AD[1]_i_1_n_0 ),
        .Q(SL_AD[1]));
  LUT6 #(
    .INIT(64'hEEEAEEEEEEEAAAAA)) 
    \SL_DT_O[0]_i_1 
       (.I0(\SL_DT_O[0]_i_2_n_0 ),
        .I1(state[0]),
        .I2(\SL_DT_O[0]_i_3_n_0 ),
        .I3(\SL_DT_O[0]_i_4_n_0 ),
        .I4(state[2]),
        .I5(\SL_DT_O[0]_i_5_n_0 ),
        .O(\SL_DT_O[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAEAAA2A)) 
    \SL_DT_O[0]_i_2 
       (.I0(SL_DT_O[0]),
        .I1(SL_PRE_FULL_N),
        .I2(SL_FULL_N),
        .I3(f2u_rd_empty),
        .I4(f2u_rd_data[0]),
        .I5(state[0]),
        .O(\SL_DT_O[0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \SL_DT_O[0]_i_3 
       (.I0(cnt[0]),
        .I1(cnt[1]),
        .I2(\SL_DT_O[29]_i_6_n_0 ),
        .O(\SL_DT_O[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0000BA8A)) 
    \SL_DT_O[0]_i_4 
       (.I0(SL_DT_O[0]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[0]),
        .I4(state[4]),
        .O(\SL_DT_O[0]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \SL_DT_O[0]_i_5 
       (.I0(SL_DT_O[0]),
        .I1(f2u_rd_empty),
        .I2(f2u_rd_data[0]),
        .O(\SL_DT_O[0]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \SL_DT_O[10]_i_1 
       (.I0(\SL_DT_O[29]_i_2_n_0 ),
        .I1(cnt[0]),
        .I2(\SL_DT_O[10]_i_2_n_0 ),
        .I3(\SL_DT_O[10]_i_3_n_0 ),
        .O(\SL_DT_O[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111011111115111)) 
    \SL_DT_O[10]_i_2 
       (.I0(state[0]),
        .I1(SL_DT_O[10]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(f2u_rd_empty),
        .I5(f2u_rd_data[10]),
        .O(\SL_DT_O[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[10]_i_3 
       (.I0(\SL_DT_O[10]_i_4_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[10]),
        .I4(state[0]),
        .I5(SL_DT_O[10]),
        .O(\SL_DT_O[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[10]_i_4 
       (.I0(SL_DT_O[10]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[10]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[11]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[11]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[11]),
        .O(\SL_DT_O[11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFF4000)) 
    \SL_DT_O[12]_i_2 
       (.I0(f2u_rd_empty),
        .I1(f2u_rd_data[12]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(SL_DT_O[12]),
        .O(\SL_DT_O[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h88C8AAFF8808AA08)) 
    \SL_DT_O[12]_i_3 
       (.I0(SL_DT_O[12]),
        .I1(state[3]),
        .I2(SL_FULL_N),
        .I3(f2u_rd_empty),
        .I4(state[2]),
        .I5(f2u_rd_data[12]),
        .O(\SL_DT_O[12]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hEFFF4000)) 
    \SL_DT_O[13]_i_2 
       (.I0(f2u_rd_empty),
        .I1(f2u_rd_data[13]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(SL_DT_O[13]),
        .O(\SL_DT_O[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h88C8AAFF8808AA08)) 
    \SL_DT_O[13]_i_3 
       (.I0(SL_DT_O[13]),
        .I1(state[3]),
        .I2(SL_FULL_N),
        .I3(f2u_rd_empty),
        .I4(state[2]),
        .I5(f2u_rd_data[13]),
        .O(\SL_DT_O[13]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hEFFF4000)) 
    \SL_DT_O[14]_i_2 
       (.I0(f2u_rd_empty),
        .I1(f2u_rd_data[14]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(SL_DT_O[14]),
        .O(\SL_DT_O[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h88C8AAFF8808AA08)) 
    \SL_DT_O[14]_i_3 
       (.I0(SL_DT_O[14]),
        .I1(state[3]),
        .I2(SL_FULL_N),
        .I3(f2u_rd_empty),
        .I4(state[2]),
        .I5(f2u_rd_data[14]),
        .O(\SL_DT_O[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[15]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[15]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[15]),
        .O(\SL_DT_O[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[16]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[16]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[16]),
        .O(\SL_DT_O[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[17]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[17]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[17]),
        .O(\SL_DT_O[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[18]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[18]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[18]),
        .O(\SL_DT_O[18]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFF444F4)) 
    \SL_DT_O[19]_i_1 
       (.I0(\SL_DT_O[29]_i_2_n_0 ),
        .I1(cnt[0]),
        .I2(\SL_DT_O[19]_i_2_n_0 ),
        .I3(state[0]),
        .I4(\SL_DT_O[19]_i_3_n_0 ),
        .O(\SL_DT_O[19]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFF2000)) 
    \SL_DT_O[19]_i_2 
       (.I0(f2u_rd_data[19]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(SL_PRE_FULL_N),
        .I4(SL_DT_O[19]),
        .O(\SL_DT_O[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h7777007577020000)) 
    \SL_DT_O[19]_i_3 
       (.I0(state[2]),
        .I1(state[4]),
        .I2(SL_FULL_N),
        .I3(f2u_rd_empty),
        .I4(SL_DT_O[19]),
        .I5(f2u_rd_data[19]),
        .O(\SL_DT_O[19]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[1]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[1]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[1]),
        .O(\SL_DT_O[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hDDDDDDD5D5D5DDD5)) 
    \SL_DT_O[20]_i_1 
       (.I0(\SL_DT_O[29]_i_2_n_0 ),
        .I1(\SL_DT_O[20]_i_2_n_0 ),
        .I2(state[0]),
        .I3(SL_DT_O[20]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(f2u_rd_data[20]),
        .O(\SL_DT_O[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[20]_i_2 
       (.I0(\SL_DT_O[20]_i_3_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[20]),
        .I4(state[0]),
        .I5(SL_DT_O[20]),
        .O(\SL_DT_O[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[20]_i_3 
       (.I0(SL_DT_O[20]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[20]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[20]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[21]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[21]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[21]),
        .O(\SL_DT_O[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \SL_DT_O[22]_i_1 
       (.I0(\SL_DT_O[22]_i_2_n_0 ),
        .I1(state[0]),
        .I2(f2u_rd_data[22]),
        .I3(\SL_DT_O[24]_i_3_n_0 ),
        .I4(SL_PRE_FULL_N),
        .I5(SL_DT_O[22]),
        .O(\SL_DT_O[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7F707F7F7F707070)) 
    \SL_DT_O[22]_i_2 
       (.I0(\SL_DT_O[26]_i_7_n_0 ),
        .I1(\SL_DT_O[22]_i_3_n_0 ),
        .I2(state[2]),
        .I3(SL_DT_O[22]),
        .I4(f2u_rd_empty),
        .I5(f2u_rd_data[22]),
        .O(\SL_DT_O[22]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hBABBBFBB)) 
    \SL_DT_O[22]_i_3 
       (.I0(state[4]),
        .I1(SL_DT_O[22]),
        .I2(f2u_rd_empty),
        .I3(SL_FULL_N),
        .I4(f2u_rd_data[22]),
        .O(\SL_DT_O[22]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[23]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[23]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[23]),
        .O(\SL_DT_O[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB8BBBBBBB8888888)) 
    \SL_DT_O[24]_i_1 
       (.I0(\SL_DT_O[24]_i_2_n_0 ),
        .I1(state[0]),
        .I2(f2u_rd_data[24]),
        .I3(\SL_DT_O[24]_i_3_n_0 ),
        .I4(SL_PRE_FULL_N),
        .I5(SL_DT_O[24]),
        .O(\SL_DT_O[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0BFBFBFB0B0B0)) 
    \SL_DT_O[24]_i_2 
       (.I0(\SL_DT_O[24]_i_4_n_0 ),
        .I1(\SL_DT_O[26]_i_7_n_0 ),
        .I2(state[2]),
        .I3(SL_DT_O[24]),
        .I4(f2u_rd_empty),
        .I5(f2u_rd_data[24]),
        .O(\SL_DT_O[24]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \SL_DT_O[24]_i_3 
       (.I0(SL_FULL_N),
        .I1(f2u_rd_empty),
        .O(\SL_DT_O[24]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h0000BA8A)) 
    \SL_DT_O[24]_i_4 
       (.I0(SL_DT_O[24]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[24]),
        .I4(state[4]),
        .O(\SL_DT_O[24]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFEAAA0000)) 
    \SL_DT_O[25]_i_1 
       (.I0(cnt[0]),
        .I1(timeout[0]),
        .I2(timeout[2]),
        .I3(timeout[1]),
        .I4(\SL_DT_O[25]_i_2_n_0 ),
        .I5(\SL_DT_O[25]_i_3_n_0 ),
        .O(\SL_DT_O[25]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h14000000)) 
    \SL_DT_O[25]_i_2 
       (.I0(\SL_DT_O[29]_i_6_n_0 ),
        .I1(cnt[0]),
        .I2(cnt[1]),
        .I3(state[2]),
        .I4(state[0]),
        .O(\SL_DT_O[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA8AAA8000)) 
    \SL_DT_O[25]_i_3 
       (.I0(\SL_DT_O[25]_i_4_n_0 ),
        .I1(f2u_rd_data[25]),
        .I2(\SL_DT_O[24]_i_3_n_0 ),
        .I3(SL_PRE_FULL_N),
        .I4(SL_DT_O[25]),
        .I5(state[0]),
        .O(\SL_DT_O[25]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[25]_i_4 
       (.I0(\SL_DT_O[25]_i_5_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[25]),
        .I4(state[0]),
        .I5(SL_DT_O[25]),
        .O(\SL_DT_O[25]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[25]_i_5 
       (.I0(SL_DT_O[25]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[25]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[25]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hBFB0FFFFBFB00000)) 
    \SL_DT_O[26]_i_1 
       (.I0(\SL_DT_O[26]_i_2_n_0 ),
        .I1(\SL_DT_O[26]_i_3_n_0 ),
        .I2(state[2]),
        .I3(\SL_DT_O[26]_i_4_n_0 ),
        .I4(state[0]),
        .I5(\SL_DT_O[26]_i_5_n_0 ),
        .O(\SL_DT_O[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \SL_DT_O[26]_i_10 
       (.I0(cnt[3]),
        .I1(cnt[2]),
        .I2(cnt[4]),
        .I3(cnt[5]),
        .I4(cnt[6]),
        .I5(cnt[7]),
        .O(\SL_DT_O[26]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \SL_DT_O[26]_i_2 
       (.I0(\SL_DT_O[26]_i_6_n_0 ),
        .I1(written[11]),
        .I2(written[8]),
        .I3(written[15]),
        .I4(written[13]),
        .I5(\SL_DT_O[26]_i_7_n_0 ),
        .O(\SL_DT_O[26]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hBABBBFBB)) 
    \SL_DT_O[26]_i_3 
       (.I0(state[4]),
        .I1(SL_DT_O[26]),
        .I2(f2u_rd_empty),
        .I3(SL_FULL_N),
        .I4(f2u_rd_data[26]),
        .O(\SL_DT_O[26]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \SL_DT_O[26]_i_4 
       (.I0(SL_DT_O[26]),
        .I1(f2u_rd_empty),
        .I2(f2u_rd_data[26]),
        .O(\SL_DT_O[26]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hEFFF2000)) 
    \SL_DT_O[26]_i_5 
       (.I0(f2u_rd_data[26]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(SL_PRE_FULL_N),
        .I4(SL_DT_O[26]),
        .O(\SL_DT_O[26]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF7FFF)) 
    \SL_DT_O[26]_i_6 
       (.I0(written[4]),
        .I1(written[7]),
        .I2(written[1]),
        .I3(written[2]),
        .I4(\SL_DT_O[26]_i_8_n_0 ),
        .I5(\SL_DT_O[26]_i_9_n_0 ),
        .O(\SL_DT_O[26]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF7FF)) 
    \SL_DT_O[26]_i_7 
       (.I0(\SL_DT_O[29]_i_10_n_0 ),
        .I1(\state[4]_i_18_n_0 ),
        .I2(\SL_DT_O[26]_i_10_n_0 ),
        .I3(cnt[1]),
        .I4(cnt[0]),
        .O(\SL_DT_O[26]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \SL_DT_O[26]_i_8 
       (.I0(written[3]),
        .I1(written[0]),
        .I2(written[6]),
        .I3(written[5]),
        .O(\SL_DT_O[26]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \SL_DT_O[26]_i_9 
       (.I0(written[10]),
        .I1(written[9]),
        .I2(written[14]),
        .I3(written[12]),
        .O(\SL_DT_O[26]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \SL_DT_O[27]_i_1 
       (.I0(cnt[0]),
        .I1(\SL_DT_O[29]_i_2_n_0 ),
        .I2(reg_clk),
        .I3(\SL_DT_O[27]_i_2_n_0 ),
        .I4(\SL_DT_O[27]_i_3_n_0 ),
        .O(\SL_DT_O[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111011111115111)) 
    \SL_DT_O[27]_i_2 
       (.I0(state[0]),
        .I1(SL_DT_O[27]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(f2u_rd_empty),
        .I5(f2u_rd_data[27]),
        .O(\SL_DT_O[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[27]_i_3 
       (.I0(\SL_DT_O[27]_i_4_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[27]),
        .I4(state[0]),
        .I5(SL_DT_O[27]),
        .O(\SL_DT_O[27]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[27]_i_4 
       (.I0(SL_DT_O[27]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[27]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[27]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h10FF1010)) 
    \SL_DT_O[28]_i_1 
       (.I0(cnt[0]),
        .I1(\SL_DT_O[29]_i_2_n_0 ),
        .I2(u2f_wr_full),
        .I3(\SL_DT_O[28]_i_2_n_0 ),
        .I4(\SL_DT_O[28]_i_3_n_0 ),
        .O(\SL_DT_O[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111011111115111)) 
    \SL_DT_O[28]_i_2 
       (.I0(state[0]),
        .I1(SL_DT_O[28]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(f2u_rd_empty),
        .I5(f2u_rd_data[28]),
        .O(\SL_DT_O[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[28]_i_3 
       (.I0(\SL_DT_O[28]_i_4_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[28]),
        .I4(state[0]),
        .I5(SL_DT_O[28]),
        .O(\SL_DT_O[28]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[28]_i_4 
       (.I0(SL_DT_O[28]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[28]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[28]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h54FF5454)) 
    \SL_DT_O[29]_i_1 
       (.I0(\SL_DT_O[29]_i_2_n_0 ),
        .I1(cnt[0]),
        .I2(\SL_DT_O[29]_i_3_n_0 ),
        .I3(\SL_DT_O[29]_i_4_n_0 ),
        .I4(\SL_DT_O[29]_i_5_n_0 ),
        .O(\SL_DT_O[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \SL_DT_O[29]_i_10 
       (.I0(state[4]),
        .I1(SL_FULL_N),
        .I2(req_cmd[0]),
        .I3(req_cmd[3]),
        .I4(req_cmd[1]),
        .I5(req_cmd[2]),
        .O(\SL_DT_O[29]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \SL_DT_O[29]_i_11 
       (.I0(pushed[12]),
        .I1(pushed[2]),
        .I2(pushed[15]),
        .I3(pushed[8]),
        .O(\SL_DT_O[29]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'hDFFF)) 
    \SL_DT_O[29]_i_2 
       (.I0(cnt[1]),
        .I1(\SL_DT_O[29]_i_6_n_0 ),
        .I2(state[0]),
        .I3(state[2]),
        .O(\SL_DT_O[29]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \SL_DT_O[29]_i_3 
       (.I0(\SL_DT_O[29]_i_7_n_0 ),
        .I1(pushed[13]),
        .I2(pushed[7]),
        .I3(pushed[9]),
        .I4(pushed[4]),
        .I5(\SL_DT_O[29]_i_8_n_0 ),
        .O(\SL_DT_O[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1111011111115111)) 
    \SL_DT_O[29]_i_4 
       (.I0(state[0]),
        .I1(SL_DT_O[29]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(f2u_rd_empty),
        .I5(f2u_rd_data[29]),
        .O(\SL_DT_O[29]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[29]_i_5 
       (.I0(\SL_DT_O[29]_i_9_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[29]),
        .I4(state[0]),
        .I5(SL_DT_O[29]),
        .O(\SL_DT_O[29]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \SL_DT_O[29]_i_6 
       (.I0(cnt[3]),
        .I1(cnt[2]),
        .I2(\state[4]_i_19_n_0 ),
        .I3(\state[4]_i_18_n_0 ),
        .I4(\SL_DT_O[29]_i_10_n_0 ),
        .O(\SL_DT_O[29]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \SL_DT_O[29]_i_7 
       (.I0(pushed[14]),
        .I1(pushed[11]),
        .I2(pushed[10]),
        .I3(pushed[3]),
        .O(\SL_DT_O[29]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    \SL_DT_O[29]_i_8 
       (.I0(pushed[5]),
        .I1(pushed[6]),
        .I2(pushed[0]),
        .I3(pushed[1]),
        .I4(\SL_DT_O[29]_i_11_n_0 ),
        .O(\SL_DT_O[29]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[29]_i_9 
       (.I0(SL_DT_O[29]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[29]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[29]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[2]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[2]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[2]),
        .O(\SL_DT_O[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFF4000)) 
    \SL_DT_O[30]_i_2 
       (.I0(f2u_rd_empty),
        .I1(f2u_rd_data[30]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(SL_DT_O[30]),
        .O(\SL_DT_O[30]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h88C8AAFF8808AA08)) 
    \SL_DT_O[30]_i_3 
       (.I0(SL_DT_O[30]),
        .I1(state[3]),
        .I2(SL_FULL_N),
        .I3(f2u_rd_empty),
        .I4(state[2]),
        .I5(f2u_rd_data[30]),
        .O(\SL_DT_O[30]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h06200020)) 
    \SL_DT_O[31]_i_1 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[4]),
        .I3(state[3]),
        .I4(state[2]),
        .O(\SL_DT_O[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7F307F3F5F005000)) 
    \SL_DT_O[31]_i_2 
       (.I0(\SL_DT_O[31]_i_3_n_0 ),
        .I1(\SL_DT_O[31]_i_4_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[31]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[31]),
        .O(\SL_DT_O[31]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hF7F0)) 
    \SL_DT_O[31]_i_3 
       (.I0(state[3]),
        .I1(SL_FULL_N),
        .I2(f2u_rd_empty),
        .I3(state[2]),
        .O(\SL_DT_O[31]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h50DD)) 
    \SL_DT_O[31]_i_4 
       (.I0(state[3]),
        .I1(SL_FULL_N),
        .I2(state[2]),
        .I3(f2u_rd_empty),
        .O(\SL_DT_O[31]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \SL_DT_O[31]_i_5 
       (.I0(f2u_rd_empty),
        .I1(SL_FULL_N),
        .I2(SL_PRE_FULL_N),
        .O(\SL_DT_O[31]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \SL_DT_O[3]_i_1 
       (.I0(\SL_DT_O[29]_i_2_n_0 ),
        .I1(cnt[0]),
        .I2(\SL_DT_O[3]_i_2_n_0 ),
        .I3(\SL_DT_O[3]_i_3_n_0 ),
        .O(\SL_DT_O[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111011111115111)) 
    \SL_DT_O[3]_i_2 
       (.I0(state[0]),
        .I1(SL_DT_O[3]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(f2u_rd_empty),
        .I5(f2u_rd_data[3]),
        .O(\SL_DT_O[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[3]_i_3 
       (.I0(\SL_DT_O[3]_i_4_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[3]),
        .I4(state[0]),
        .I5(SL_DT_O[3]),
        .O(\SL_DT_O[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[3]_i_4 
       (.I0(SL_DT_O[3]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[3]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[4]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[4]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[4]),
        .O(\SL_DT_O[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \SL_DT_O[5]_i_1 
       (.I0(\SL_DT_O[29]_i_2_n_0 ),
        .I1(cnt[0]),
        .I2(\SL_DT_O[5]_i_2_n_0 ),
        .I3(\SL_DT_O[5]_i_3_n_0 ),
        .O(\SL_DT_O[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111011111115111)) 
    \SL_DT_O[5]_i_2 
       (.I0(state[0]),
        .I1(SL_DT_O[5]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(f2u_rd_empty),
        .I5(f2u_rd_data[5]),
        .O(\SL_DT_O[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[5]_i_3 
       (.I0(\SL_DT_O[5]_i_4_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[5]),
        .I4(state[0]),
        .I5(SL_DT_O[5]),
        .O(\SL_DT_O[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[5]_i_4 
       (.I0(SL_DT_O[5]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[5]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h7F507F5F3F003000)) 
    \SL_DT_O[6]_i_1 
       (.I0(\SL_DT_O[31]_i_4_n_0 ),
        .I1(\SL_DT_O[31]_i_3_n_0 ),
        .I2(state[0]),
        .I3(f2u_rd_data[6]),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(SL_DT_O[6]),
        .O(\SL_DT_O[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFF4000)) 
    \SL_DT_O[7]_i_2 
       (.I0(f2u_rd_empty),
        .I1(f2u_rd_data[7]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(SL_DT_O[7]),
        .O(\SL_DT_O[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h88C8AAFF8808AA08)) 
    \SL_DT_O[7]_i_3 
       (.I0(SL_DT_O[7]),
        .I1(state[3]),
        .I2(SL_FULL_N),
        .I3(f2u_rd_empty),
        .I4(state[2]),
        .I5(f2u_rd_data[7]),
        .O(\SL_DT_O[7]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \SL_DT_O[8]_i_1 
       (.I0(\SL_DT_O[29]_i_2_n_0 ),
        .I1(cnt[0]),
        .I2(\SL_DT_O[8]_i_2_n_0 ),
        .I3(\SL_DT_O[8]_i_3_n_0 ),
        .O(\SL_DT_O[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111011111115111)) 
    \SL_DT_O[8]_i_2 
       (.I0(state[0]),
        .I1(SL_DT_O[8]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(f2u_rd_empty),
        .I5(f2u_rd_data[8]),
        .O(\SL_DT_O[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[8]_i_3 
       (.I0(\SL_DT_O[8]_i_4_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[8]),
        .I4(state[0]),
        .I5(SL_DT_O[8]),
        .O(\SL_DT_O[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[8]_i_4 
       (.I0(SL_DT_O[8]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[8]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[8]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEAAAAAAAA)) 
    \SL_DT_O[9]_i_1 
       (.I0(\SL_DT_O[25]_i_2_n_0 ),
        .I1(state[0]),
        .I2(SL_DT_O[9]),
        .I3(\SL_DT_O[31]_i_5_n_0 ),
        .I4(f2u_rd_data[9]),
        .I5(\SL_DT_O[9]_i_2_n_0 ),
        .O(\SL_DT_O[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBAFFFFABAAFFFF)) 
    \SL_DT_O[9]_i_2 
       (.I0(\SL_DT_O[9]_i_3_n_0 ),
        .I1(state[2]),
        .I2(f2u_rd_empty),
        .I3(f2u_rd_data[9]),
        .I4(state[0]),
        .I5(SL_DT_O[9]),
        .O(\SL_DT_O[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000BA8A00000000)) 
    \SL_DT_O[9]_i_3 
       (.I0(SL_DT_O[9]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(f2u_rd_data[9]),
        .I4(state[4]),
        .I5(state[2]),
        .O(\SL_DT_O[9]_i_3_n_0 ));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[0] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[0]_i_1_n_0 ),
        .Q(SL_DT_O[0]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[10] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[10]_i_1_n_0 ),
        .Q(SL_DT_O[10]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[11] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[11]_i_1_n_0 ),
        .Q(SL_DT_O[11]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[12] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O_reg[12]_i_1_n_0 ),
        .Q(SL_DT_O[12]));
  MUXF7 \SL_DT_O_reg[12]_i_1 
       (.I0(\SL_DT_O[12]_i_2_n_0 ),
        .I1(\SL_DT_O[12]_i_3_n_0 ),
        .O(\SL_DT_O_reg[12]_i_1_n_0 ),
        .S(state[0]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[13] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O_reg[13]_i_1_n_0 ),
        .Q(SL_DT_O[13]));
  MUXF7 \SL_DT_O_reg[13]_i_1 
       (.I0(\SL_DT_O[13]_i_2_n_0 ),
        .I1(\SL_DT_O[13]_i_3_n_0 ),
        .O(\SL_DT_O_reg[13]_i_1_n_0 ),
        .S(state[0]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[14] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O_reg[14]_i_1_n_0 ),
        .Q(SL_DT_O[14]));
  MUXF7 \SL_DT_O_reg[14]_i_1 
       (.I0(\SL_DT_O[14]_i_2_n_0 ),
        .I1(\SL_DT_O[14]_i_3_n_0 ),
        .O(\SL_DT_O_reg[14]_i_1_n_0 ),
        .S(state[0]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[15] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[15]_i_1_n_0 ),
        .Q(SL_DT_O[15]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[16] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[16]_i_1_n_0 ),
        .Q(SL_DT_O[16]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[17] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[17]_i_1_n_0 ),
        .Q(SL_DT_O[17]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[18] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[18]_i_1_n_0 ),
        .Q(SL_DT_O[18]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[19] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[19]_i_1_n_0 ),
        .Q(SL_DT_O[19]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[1] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[1]_i_1_n_0 ),
        .Q(SL_DT_O[1]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[20] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[20]_i_1_n_0 ),
        .Q(SL_DT_O[20]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[21] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[21]_i_1_n_0 ),
        .Q(SL_DT_O[21]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[22] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[22]_i_1_n_0 ),
        .Q(SL_DT_O[22]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[23] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[23]_i_1_n_0 ),
        .Q(SL_DT_O[23]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[24] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[24]_i_1_n_0 ),
        .Q(SL_DT_O[24]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[25] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[25]_i_1_n_0 ),
        .Q(SL_DT_O[25]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[26] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[26]_i_1_n_0 ),
        .Q(SL_DT_O[26]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[27] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[27]_i_1_n_0 ),
        .Q(SL_DT_O[27]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[28] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[28]_i_1_n_0 ),
        .Q(SL_DT_O[28]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[29] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[29]_i_1_n_0 ),
        .Q(SL_DT_O[29]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[2] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[2]_i_1_n_0 ),
        .Q(SL_DT_O[2]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[30] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O_reg[30]_i_1_n_0 ),
        .Q(SL_DT_O[30]));
  MUXF7 \SL_DT_O_reg[30]_i_1 
       (.I0(\SL_DT_O[30]_i_2_n_0 ),
        .I1(\SL_DT_O[30]_i_3_n_0 ),
        .O(\SL_DT_O_reg[30]_i_1_n_0 ),
        .S(state[0]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[31] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[31]_i_2_n_0 ),
        .Q(SL_DT_O[31]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[3] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[3]_i_1_n_0 ),
        .Q(SL_DT_O[3]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[4] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[4]_i_1_n_0 ),
        .Q(SL_DT_O[4]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[5] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[5]_i_1_n_0 ),
        .Q(SL_DT_O[5]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[6] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[6]_i_1_n_0 ),
        .Q(SL_DT_O[6]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[7] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O_reg[7]_i_1_n_0 ),
        .Q(SL_DT_O[7]));
  MUXF7 \SL_DT_O_reg[7]_i_1 
       (.I0(\SL_DT_O[7]_i_2_n_0 ),
        .I1(\SL_DT_O[7]_i_3_n_0 ),
        .O(\SL_DT_O_reg[7]_i_1_n_0 ),
        .S(state[0]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[8] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[8]_i_1_n_0 ),
        .Q(SL_DT_O[8]));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \SL_DT_O_reg[9] 
       (.C(f2u_rd_clk),
        .CE(\SL_DT_O[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\SL_DT_O[9]_i_1_n_0 ),
        .Q(SL_DT_O[9]));
  LUT6 #(
    .INIT(64'hFAFAEAFFFAFAEA00)) 
    SL_DT_T_i_1
       (.I0(SL_DT_T),
        .I1(state[2]),
        .I2(state[4]),
        .I3(state[1]),
        .I4(state[3]),
        .I5(SL_DT_T_i_2_n_0),
        .O(SL_DT_T_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFF3F50F000305)) 
    SL_DT_T_i_2
       (.I0(SL_DT_T_i_3_n_0),
        .I1(\state[3]_i_14_n_0 ),
        .I2(state[0]),
        .I3(state[2]),
        .I4(state[4]),
        .I5(SL_DT_T),
        .O(SL_DT_T_i_2_n_0));
  LUT4 #(
    .INIT(16'h0888)) 
    SL_DT_T_i_3
       (.I0(sl_mode_reg[1]),
        .I1(mask[1]),
        .I2(sl_mode_reg[0]),
        .I3(mask[0]),
        .O(SL_DT_T_i_3_n_0));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    SL_DT_T_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(SL_DT_T_i_1_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(SL_DT_T));
  LUT6 #(
    .INIT(64'hF8F8F8F8F8F8F8FF)) 
    SL_OE_N_i_1
       (.I0(SL_OE_N_i_2_n_0),
        .I1(SL_OE_N_i_3_n_0),
        .I2(SL_OE_N_i_4_n_0),
        .I3(state[4]),
        .I4(state[3]),
        .I5(SL_OE_N_i_5_n_0),
        .O(SL_OE_N_i_1_n_0));
  LUT5 #(
    .INIT(32'h00000100)) 
    SL_OE_N_i_2
       (.I0(state[1]),
        .I1(state[3]),
        .I2(state[0]),
        .I3(state[2]),
        .I4(state[4]),
        .O(SL_OE_N_i_2_n_0));
  LUT5 #(
    .INIT(32'hFFFFF9FF)) 
    SL_OE_N_i_3
       (.I0(ctl_cmd[1]),
        .I1(ctl_cmd[2]),
        .I2(ctl_cmd[0]),
        .I3(\cnt[15]_i_6_n_0 ),
        .I4(ctl_cmd[3]),
        .O(SL_OE_N_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFAAFF2A0000)) 
    SL_OE_N_i_4
       (.I0(state[2]),
        .I1(state[1]),
        .I2(state[0]),
        .I3(SL_OE_N),
        .I4(state[3]),
        .I5(state[4]),
        .O(SL_OE_N_i_4_n_0));
  LUT5 #(
    .INIT(32'h5FFC5FFF)) 
    SL_OE_N_i_5
       (.I0(SL_OE_N),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .I4(SL_OE_N_i_6_n_0),
        .O(SL_OE_N_i_5_n_0));
  LUT5 #(
    .INIT(32'h55FF55CF)) 
    SL_OE_N_i_6
       (.I0(mask[0]),
        .I1(cmd_wr_fullN),
        .I2(SL_EMPTY_N),
        .I3(sl_mode_reg[0]),
        .I4(sl_mode_reg[1]),
        .O(SL_OE_N_i_6_n_0));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* xc_pullup = "1" *) 
  FDPE #(
    .INIT(1'b1)) 
    SL_OE_N_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(SL_OE_N_i_1_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(SL_OE_N));
  LUT6 #(
    .INIT(64'hF757F7F7F757F757)) 
    SL_PKTEND_N_i_1
       (.I0(SL_PKTEND_N_i_2_n_0),
        .I1(SL_PKTEND_N_i_3_n_0),
        .I2(state[2]),
        .I3(SL_PKTEND_N_i_4_n_0),
        .I4(SL_PKTEND_N_i_5_n_0),
        .I5(SL_PKTEND_N_i_6_n_0),
        .O(SL_PKTEND_N_i_1_n_0));
  LUT6 #(
    .INIT(64'h10F0100000000000)) 
    SL_PKTEND_N_i_10
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(f2u_rd_data[32]),
        .I2(\state[3]_i_7_n_0 ),
        .I3(\SL_DT_O[24]_i_3_n_0 ),
        .I4(SL_PKTEND_N),
        .I5(state[3]),
        .O(SL_PKTEND_N_i_10_n_0));
  LUT6 #(
    .INIT(64'h040C050D6060FFFF)) 
    SL_PKTEND_N_i_2
       (.I0(state[1]),
        .I1(state[0]),
        .I2(state[3]),
        .I3(\state[4]_i_14_n_0 ),
        .I4(SL_PKTEND_N),
        .I5(state[4]),
        .O(SL_PKTEND_N_i_2_n_0));
  LUT6 #(
    .INIT(64'h00000000001FBFBF)) 
    SL_PKTEND_N_i_3
       (.I0(f2u_rd_empty),
        .I1(SL_PKTEND_N_i_7_n_0),
        .I2(SL_PKTEND_N_i_8_n_0),
        .I3(state[3]),
        .I4(SL_PKTEND_N),
        .I5(SL_PKTEND_N_i_9_n_0),
        .O(SL_PKTEND_N_i_3_n_0));
  LUT6 #(
    .INIT(64'hEEEEAEEEEEEEEEEE)) 
    SL_PKTEND_N_i_4
       (.I0(SL_PKTEND_N_i_10_n_0),
        .I1(state[4]),
        .I2(sl_pktend_n_reg_i_4_n_0),
        .I3(SL_FULL_N),
        .I4(state[1]),
        .I5(state[0]),
        .O(SL_PKTEND_N_i_4_n_0));
  LUT5 #(
    .INIT(32'h08080800)) 
    SL_PKTEND_N_i_5
       (.I0(SL_PRE_FULL_N),
        .I1(SL_FULL_N),
        .I2(f2u_rd_empty),
        .I3(sl_pktend_n_reg_i_4_n_0),
        .I4(f2u_rd_data[32]),
        .O(SL_PKTEND_N_i_5_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    SL_PKTEND_N_i_6
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[3]),
        .O(SL_PKTEND_N_i_6_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    SL_PKTEND_N_i_7
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(f2u_rd_data[32]),
        .O(SL_PKTEND_N_i_7_n_0));
  LUT4 #(
    .INIT(16'h0400)) 
    SL_PKTEND_N_i_8
       (.I0(state[1]),
        .I1(state[0]),
        .I2(state[3]),
        .I3(state[4]),
        .O(SL_PKTEND_N_i_8_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    SL_PKTEND_N_i_9
       (.I0(state[4]),
        .I1(state[0]),
        .I2(state[3]),
        .I3(state[1]),
        .O(SL_PKTEND_N_i_9_n_0));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* xc_pullup = "1" *) 
  FDPE #(
    .INIT(1'b1)) 
    SL_PKTEND_N_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(SL_PKTEND_N_i_1_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(SL_PKTEND_N));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAE)) 
    SL_RD_N0_i_1
       (.I0(sl_rd_n_reg),
        .I1(state[0]),
        .I2(state[1]),
        .I3(state[4]),
        .I4(state[2]),
        .I5(state[3]),
        .O(SL_RD_N00));
  FDPE #(
    .INIT(1'b1)) 
    SL_RD_N0_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(SL_RD_N00),
        .PRE(u_cu2f_i_1_n_0),
        .Q(SL_RD_N0_reg_n_0));
  FDPE #(
    .INIT(1'b1)) 
    SL_RD_N1_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(SL_RD_N0_reg_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(SL_RD_N1));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF6F0000)) 
    SL_RD_N_i_1
       (.I0(state[2]),
        .I1(state[1]),
        .I2(\state[0]_i_3_n_0 ),
        .I3(state[0]),
        .I4(SL_RD_N),
        .I5(SL_RD_N_i_2_n_0),
        .O(SL_RD_N_i_1_n_0));
  LUT4 #(
    .INIT(16'h7433)) 
    SL_RD_N_i_2
       (.I0(SL_RD_N_i_3_n_0),
        .I1(SL_RD_N_i_4_n_0),
        .I2(\cnt[14]_i_11_n_0 ),
        .I3(SL_RD_N_i_5_n_0),
        .O(SL_RD_N_i_2_n_0));
  LUT4 #(
    .INIT(16'h0010)) 
    SL_RD_N_i_3
       (.I0(sl_mode_reg[1]),
        .I1(sl_mode_reg[0]),
        .I2(SL_EMPTY_N),
        .I3(cmd_wr_fullN),
        .O(SL_RD_N_i_3_n_0));
  LUT5 #(
    .INIT(32'h005DFB09)) 
    SL_RD_N_i_4
       (.I0(state[2]),
        .I1(state[0]),
        .I2(state[1]),
        .I3(state[3]),
        .I4(state[4]),
        .O(SL_RD_N_i_4_n_0));
  LUT5 #(
    .INIT(32'h00000009)) 
    SL_RD_N_i_5
       (.I0(state[2]),
        .I1(state[1]),
        .I2(state[3]),
        .I3(state[4]),
        .I4(state[0]),
        .O(SL_RD_N_i_5_n_0));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* xc_pullup = "1" *) 
  FDPE #(
    .INIT(1'b1)) 
    SL_RD_N_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(SL_RD_N_i_1_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(SL_RD_N));
  LUT6 #(
    .INIT(64'h0000AE00AEAEAEAE)) 
    SL_WR_N_i_1
       (.I0(SL_WR_N_i_2_n_0),
        .I1(SL_WR_N_i_3_n_0),
        .I2(SL_WR_N_i_4_n_0),
        .I3(SL_WR_N),
        .I4(SL_WR_N_i_5_n_0),
        .I5(SL_WR_N_i_6_n_0),
        .O(SL_WR_N_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFF7F3CFFFFFFF)) 
    SL_WR_N_i_2
       (.I0(SL_FULL_N),
        .I1(state[0]),
        .I2(state[3]),
        .I3(state[2]),
        .I4(state[1]),
        .I5(state[4]),
        .O(SL_WR_N_i_2_n_0));
  LUT6 #(
    .INIT(64'h0FFF0F0F88BB8888)) 
    SL_WR_N_i_3
       (.I0(SL_WR_N),
        .I1(f2u_rd_empty),
        .I2(\SL_DT_O[31]_i_5_n_0 ),
        .I3(sl_pktend_n_reg_i_4_n_0),
        .I4(f2u_rd_data[33]),
        .I5(SL_WR_N_i_7_n_0),
        .O(SL_WR_N_i_3_n_0));
  LUT5 #(
    .INIT(32'h0221BFFE)) 
    SL_WR_N_i_4
       (.I0(state[0]),
        .I1(state[3]),
        .I2(state[2]),
        .I3(state[1]),
        .I4(state[4]),
        .O(SL_WR_N_i_4_n_0));
  LUT6 #(
    .INIT(64'h88A0808888888882)) 
    SL_WR_N_i_5
       (.I0(\SL_DT_O[24]_i_3_n_0 ),
        .I1(state[4]),
        .I2(state[3]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(state[0]),
        .O(SL_WR_N_i_5_n_0));
  LUT6 #(
    .INIT(64'h00000000FFFFFBFF)) 
    SL_WR_N_i_6
       (.I0(f2u_rd_empty),
        .I1(SL_FULL_N),
        .I2(SL_WR_N_i_7_n_0),
        .I3(f2u_rd_data[33]),
        .I4(sl_pktend_n_reg_i_4_n_0),
        .I5(SL_WR_N_i_8_n_0),
        .O(SL_WR_N_i_6_n_0));
  LUT5 #(
    .INIT(32'h0029F7FE)) 
    SL_WR_N_i_7
       (.I0(state[0]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[3]),
        .I4(state[4]),
        .O(SL_WR_N_i_7_n_0));
  LUT5 #(
    .INIT(32'hFF20F601)) 
    SL_WR_N_i_8
       (.I0(state[1]),
        .I1(state[0]),
        .I2(state[3]),
        .I3(state[4]),
        .I4(state[2]),
        .O(SL_WR_N_i_8_n_0));
  (* IOB = "TRUE" *) 
  (* KEEP = "yes" *) 
  (* xc_pullup = "1" *) 
  FDPE #(
    .INIT(1'b1)) 
    SL_WR_N_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(SL_WR_N_i_1_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(SL_WR_N));
  LUT3 #(
    .INIT(8'h80)) 
    SYS_RST_N_inferred_i_1
       (.I0(SL_PCLK_STABLE),
        .I1(SL_RST_N),
        .I2(SYS_CLK_STABLE),
        .O(SYS_RST_N));
  LUT2 #(
    .INIT(4'h1)) 
    \cmd_wr_data[31]_i_1 
       (.I0(fifo_sel[1]),
        .I1(fifo_sel[0]),
        .O(\cmd_wr_data[31]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[0] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[0]),
        .Q(cmd_wr_data[0]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[10] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[10]),
        .Q(cmd_wr_data[10]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[11] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[11]),
        .Q(cmd_wr_data[11]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[12] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[12]),
        .Q(cmd_wr_data[12]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[13] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[13]),
        .Q(cmd_wr_data[13]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[14] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[14]),
        .Q(cmd_wr_data[14]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[15] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[15]),
        .Q(cmd_wr_data[15]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[16] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[16]),
        .Q(cmd_wr_data[16]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[17] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[17]),
        .Q(cmd_wr_data[17]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[18] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[18]),
        .Q(cmd_wr_data[18]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[19] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[19]),
        .Q(cmd_wr_data[19]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[1] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[1]),
        .Q(cmd_wr_data[1]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[20] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[20]),
        .Q(cmd_wr_data[20]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[21] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[21]),
        .Q(cmd_wr_data[21]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[22] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[22]),
        .Q(cmd_wr_data[22]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[23] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[23]),
        .Q(cmd_wr_data[23]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[24] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[24]),
        .Q(cmd_wr_data[24]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[25] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[25]),
        .Q(cmd_wr_data[25]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[26] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[26]),
        .Q(cmd_wr_data[26]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[27] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[27]),
        .Q(cmd_wr_data[27]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[28] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[28]),
        .Q(cmd_wr_data[28]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[29] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[29]),
        .Q(cmd_wr_data[29]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[2] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[2]),
        .Q(cmd_wr_data[2]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[30] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[30]),
        .Q(cmd_wr_data[30]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[31] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[31]),
        .Q(cmd_wr_data[31]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[3] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[3]),
        .Q(cmd_wr_data[3]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[4] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[4]),
        .Q(cmd_wr_data[4]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[5] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[5]),
        .Q(cmd_wr_data[5]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[6] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[6]),
        .Q(cmd_wr_data[6]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[7] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[7]),
        .Q(cmd_wr_data[7]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[8] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[8]),
        .Q(cmd_wr_data[8]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cmd_wr_data_reg[9] 
       (.C(f2u_rd_clk),
        .CE(\cmd_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[9]),
        .Q(cmd_wr_data[9]));
  LUT3 #(
    .INIT(8'h01)) 
    cmd_wr_valid_i_1
       (.I0(fifo_sel[0]),
        .I1(fifo_sel[1]),
        .I2(SL_RD_N1),
        .O(cmd_wr_valid_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    cmd_wr_valid_i_2
       (.I0(SYS_RST_N),
        .O(cmd_wr_valid_i_2_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    cmd_wr_valid_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(cmd_wr_valid_i_1_n_0),
        .Q(cmd_wr_valid));
  LUT5 #(
    .INIT(32'hFFFF00F1)) 
    \cnt[0]_i_1 
       (.I0(\cnt[0]_i_2_n_0 ),
        .I1(\cnt[15]_i_2_n_0 ),
        .I2(\cnt[0]_i_3_n_0 ),
        .I3(state[1]),
        .I4(\cnt[0]_i_4_n_0 ),
        .O(\cnt[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0F0E0B090F0E0F0F)) 
    \cnt[0]_i_2 
       (.I0(ctl_cmd[1]),
        .I1(ctl_cmd[2]),
        .I2(cnt[0]),
        .I3(ctl_cmd[0]),
        .I4(ctl_cmd[3]),
        .I5(\cnt[15]_i_6_n_0 ),
        .O(\cnt[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF08000900)) 
    \cnt[0]_i_3 
       (.I0(cnt[0]),
        .I1(\cnt[15]_i_8_n_0 ),
        .I2(state[2]),
        .I3(state[4]),
        .I4(sl_mode_reg[1]),
        .I5(\cnt[0]_i_5_n_0 ),
        .O(\cnt[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF82FF82FFFFFF82)) 
    \cnt[0]_i_4 
       (.I0(\cnt[14]_i_6_n_0 ),
        .I1(\cnt[14]_i_5_n_0 ),
        .I2(cnt[0]),
        .I3(\cnt[0]_i_6_n_0 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[0]_i_7_n_0 ),
        .O(\cnt[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hF0A1F0F000000000)) 
    \cnt[0]_i_5 
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(sl_mode_reg[1]),
        .I2(cnt[0]),
        .I3(f2u_rd_empty),
        .I4(SL_FULL_N),
        .I5(state[3]),
        .O(\cnt[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFC0220C33C022)) 
    \cnt[0]_i_6 
       (.I0(SL_DT_T_i_3_n_0),
        .I1(state[2]),
        .I2(SL_FULL_N),
        .I3(state[4]),
        .I4(cnt[0]),
        .I5(\cnt[0]_i_8_n_0 ),
        .O(\cnt[0]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'h5E)) 
    \cnt[0]_i_7 
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(sl_mode_reg[1]),
        .I2(cnt[0]),
        .O(\cnt[0]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h88880888)) 
    \cnt[0]_i_8 
       (.I0(state[3]),
        .I1(state[1]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(f2u_rd_empty),
        .O(\cnt[0]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[10]_i_1 
       (.I0(\cnt[10]_i_2_n_0 ),
        .I1(\cnt[10]_i_3_n_0 ),
        .I2(\cnt_reg[12]_i_4_n_6 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[10]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[10]_i_2 
       (.I0(state[1]),
        .I1(\cnt[10]_i_4_n_0 ),
        .I2(\cnt[10]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[10]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[10]_i_3 
       (.I0(cnt[10]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[12]_i_4_n_6 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[10]_i_6_n_0 ),
        .O(\cnt[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBAFF000010000000)) 
    \cnt[10]_i_4 
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(sl_mode_reg[1]),
        .I2(\cnt_reg[12]_i_4_n_6 ),
        .I3(\SL_DT_O[24]_i_3_n_0 ),
        .I4(state[3]),
        .I5(cnt[10]),
        .O(\cnt[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h4444004000000040)) 
    \cnt[10]_i_5 
       (.I0(state[2]),
        .I1(state[4]),
        .I2(\cnt_reg[12]_i_4_n_6 ),
        .I3(sl_mode_reg[1]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[10]),
        .O(\cnt[10]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[10]_i_6 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[10]),
        .I2(state[2]),
        .I3(\cnt_reg[12]_i_4_n_6 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[10]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[11]_i_1 
       (.I0(\cnt[11]_i_2_n_0 ),
        .I1(\cnt[11]_i_3_n_0 ),
        .I2(\cnt_reg[12]_i_4_n_5 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[11]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[11]_i_2 
       (.I0(state[1]),
        .I1(\cnt[11]_i_4_n_0 ),
        .I2(\cnt[11]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[11]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[11]_i_3 
       (.I0(cnt[11]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[12]_i_4_n_5 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[11]_i_6_n_0 ),
        .O(\cnt[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBAFF000010000000)) 
    \cnt[11]_i_4 
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(sl_mode_reg[1]),
        .I2(\cnt_reg[12]_i_4_n_5 ),
        .I3(\SL_DT_O[24]_i_3_n_0 ),
        .I4(state[3]),
        .I5(cnt[11]),
        .O(\cnt[11]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h4444004000000040)) 
    \cnt[11]_i_5 
       (.I0(state[2]),
        .I1(state[4]),
        .I2(\cnt_reg[12]_i_4_n_5 ),
        .I3(sl_mode_reg[1]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[11]),
        .O(\cnt[11]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h8000FFFF80008000)) 
    \cnt[11]_i_6 
       (.I0(state[2]),
        .I1(\cnt_reg[12]_i_4_n_5 ),
        .I2(SL_FULL_N),
        .I3(state[4]),
        .I4(\cnt[14]_i_12_n_0 ),
        .I5(cnt[11]),
        .O(\cnt[11]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[12]_i_1 
       (.I0(\cnt[12]_i_2_n_0 ),
        .I1(\cnt[12]_i_3_n_0 ),
        .I2(\cnt_reg[12]_i_4_n_4 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[12]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[12]_i_2 
       (.I0(state[1]),
        .I1(\cnt[12]_i_5_n_0 ),
        .I2(\cnt[12]_i_6_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[12]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[12]_i_3 
       (.I0(cnt[12]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[12]_i_4_n_4 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[12]_i_7_n_0 ),
        .O(\cnt[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[12]_i_5 
       (.I0(cnt[12]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[12]_i_4_n_4 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[12]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00F0002000000020)) 
    \cnt[12]_i_6 
       (.I0(\cnt_reg[12]_i_4_n_4 ),
        .I1(sl_mode_reg[1]),
        .I2(state[4]),
        .I3(state[2]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[12]),
        .O(\cnt[12]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[12]_i_7 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[12]),
        .I2(state[2]),
        .I3(\cnt_reg[12]_i_4_n_4 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[12]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[13]_i_1 
       (.I0(\cnt[13]_i_2_n_0 ),
        .I1(\cnt[13]_i_3_n_0 ),
        .I2(\cnt_reg[14]_i_4_n_7 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[13]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[13]_i_2 
       (.I0(state[1]),
        .I1(\cnt[13]_i_4_n_0 ),
        .I2(\cnt[13]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[13]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[13]_i_3 
       (.I0(cnt[13]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[14]_i_4_n_7 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[13]_i_6_n_0 ),
        .O(\cnt[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[13]_i_4 
       (.I0(cnt[13]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[14]_i_4_n_7 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[13]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00F0002000000020)) 
    \cnt[13]_i_5 
       (.I0(\cnt_reg[14]_i_4_n_7 ),
        .I1(sl_mode_reg[1]),
        .I2(state[4]),
        .I3(state[2]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[13]),
        .O(\cnt[13]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[13]_i_6 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[13]),
        .I2(state[2]),
        .I3(\cnt_reg[14]_i_4_n_7 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[13]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[14]_i_1 
       (.I0(\cnt[14]_i_2_n_0 ),
        .I1(\cnt[14]_i_3_n_0 ),
        .I2(\cnt_reg[14]_i_4_n_6 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[14]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[14]_i_10 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[14]),
        .I2(state[2]),
        .I3(\cnt_reg[14]_i_4_n_6 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[14]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h4540FFFF)) 
    \cnt[14]_i_11 
       (.I0(fifo_sel[1]),
        .I1(u2f_wr_fullN),
        .I2(fifo_sel[0]),
        .I3(cmd_wr_fullN),
        .I4(SL_EMPTY_N),
        .O(\cnt[14]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hFE3E0000FE3EFE3E)) 
    \cnt[14]_i_12 
       (.I0(SL_DT_T_i_3_n_0),
        .I1(state[2]),
        .I2(state[4]),
        .I3(SL_FULL_N),
        .I4(\SL_DT_O[31]_i_5_n_0 ),
        .I5(\cnt[15]_i_16_n_0 ),
        .O(\cnt[14]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[14]_i_2 
       (.I0(state[1]),
        .I1(\cnt[14]_i_7_n_0 ),
        .I2(\cnt[14]_i_8_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[14]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[14]_i_3 
       (.I0(cnt[14]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[14]_i_4_n_6 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[14]_i_10_n_0 ),
        .O(\cnt[14]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hA8)) 
    \cnt[14]_i_5 
       (.I0(state[2]),
        .I1(\cnt[14]_i_11_n_0 ),
        .I2(sl_pktend_n_reg_i_4_n_0),
        .O(\cnt[14]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \cnt[14]_i_6 
       (.I0(state[1]),
        .I1(state[3]),
        .O(\cnt[14]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[14]_i_7 
       (.I0(cnt[14]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[14]_i_4_n_6 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[14]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h4444004000000040)) 
    \cnt[14]_i_8 
       (.I0(state[2]),
        .I1(state[4]),
        .I2(\cnt_reg[14]_i_4_n_6 ),
        .I3(sl_mode_reg[1]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[14]),
        .O(\cnt[14]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h08000000)) 
    \cnt[14]_i_9 
       (.I0(SL_PRE_FULL_N),
        .I1(SL_FULL_N),
        .I2(f2u_rd_empty),
        .I3(state[3]),
        .I4(state[1]),
        .O(\cnt[14]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0000FF04)) 
    \cnt[15]_i_1 
       (.I0(\cnt[15]_i_2_n_0 ),
        .I1(cnt[15]),
        .I2(\cnt[15]_i_3_n_0 ),
        .I3(\cnt[15]_i_4_n_0 ),
        .I4(state[1]),
        .I5(\cnt[15]_i_5_n_0 ),
        .O(\cnt[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAE000400FF000000)) 
    \cnt[15]_i_10 
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(\cnt_reg[14]_i_4_n_5 ),
        .I2(sl_mode_reg[1]),
        .I3(\cnt[15]_i_16_n_0 ),
        .I4(cnt[15]),
        .I5(\SL_DT_O[31]_i_5_n_0 ),
        .O(\cnt[15]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hF000C0C004040404)) 
    \cnt[15]_i_11 
       (.I0(SL_DT_T_i_3_n_0),
        .I1(cnt[15]),
        .I2(state[2]),
        .I3(\cnt_reg[14]_i_4_n_5 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[15]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cnt[15]_i_12 
       (.I0(dat_leng[13]),
        .I1(dat_leng[12]),
        .I2(dat_leng[14]),
        .I3(dat_leng[15]),
        .O(\cnt[15]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cnt[15]_i_13 
       (.I0(dat_leng[11]),
        .I1(dat_leng[10]),
        .I2(dat_leng[9]),
        .I3(dat_leng[8]),
        .O(\cnt[15]_i_13_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \cnt[15]_i_14 
       (.I0(dat_leng[5]),
        .I1(dat_leng[4]),
        .I2(dat_leng[7]),
        .I3(dat_leng[6]),
        .O(\cnt[15]_i_14_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \cnt[15]_i_15 
       (.I0(dat_leng[1]),
        .I1(dat_leng[0]),
        .I2(dat_leng[3]),
        .I3(dat_leng[2]),
        .O(\cnt[15]_i_15_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \cnt[15]_i_16 
       (.I0(state[1]),
        .I1(state[3]),
        .O(\cnt[15]_i_16_n_0 ));
  LUT3 #(
    .INIT(8'hFB)) 
    \cnt[15]_i_2 
       (.I0(state[3]),
        .I1(state[2]),
        .I2(state[4]),
        .O(\cnt[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00030A20)) 
    \cnt[15]_i_3 
       (.I0(\cnt[15]_i_6_n_0 ),
        .I1(ctl_cmd[0]),
        .I2(ctl_cmd[1]),
        .I3(ctl_cmd[2]),
        .I4(ctl_cmd[3]),
        .O(\cnt[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hEAAAEFAAEAAAEAAA)) 
    \cnt[15]_i_4 
       (.I0(\cnt[15]_i_7_n_0 ),
        .I1(cnt[15]),
        .I2(\cnt[15]_i_8_n_0 ),
        .I3(\cnt[15]_i_9_n_0 ),
        .I4(sl_mode_reg[1]),
        .I5(\cnt_reg[14]_i_4_n_5 ),
        .O(\cnt[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF8A80)) 
    \cnt[15]_i_5 
       (.I0(\cnt[14]_i_6_n_0 ),
        .I1(cnt[15]),
        .I2(\cnt[14]_i_5_n_0 ),
        .I3(\cnt_reg[14]_i_4_n_5 ),
        .I4(\cnt[15]_i_10_n_0 ),
        .I5(\cnt[15]_i_11_n_0 ),
        .O(\cnt[15]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFEFF)) 
    \cnt[15]_i_6 
       (.I0(\cnt[15]_i_12_n_0 ),
        .I1(\cnt[15]_i_13_n_0 ),
        .I2(\cnt[15]_i_14_n_0 ),
        .I3(\cnt[15]_i_15_n_0 ),
        .O(\cnt[15]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hC040C040C0C8C040)) 
    \cnt[15]_i_7 
       (.I0(\SL_DT_O[24]_i_3_n_0 ),
        .I1(state[3]),
        .I2(cnt[15]),
        .I3(sl_pktend_n_reg_i_4_n_0),
        .I4(\cnt_reg[14]_i_4_n_5 ),
        .I5(sl_mode_reg[1]),
        .O(\cnt[15]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hAAAAABAA)) 
    \cnt[15]_i_8 
       (.I0(f2u_rd_empty),
        .I1(sl_pktend_n_reg_i_9_n_0),
        .I2(sl_pktend_n_reg_i_8_n_0),
        .I3(sl_pktend_n_reg_i_7_n_0),
        .I4(sl_pktend_n_reg_i_6_n_0),
        .O(\cnt[15]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \cnt[15]_i_9 
       (.I0(state[4]),
        .I1(state[2]),
        .O(\cnt[15]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[1]_i_1 
       (.I0(\cnt[1]_i_2_n_0 ),
        .I1(\cnt[1]_i_3_n_0 ),
        .I2(\cnt_reg[4]_i_4_n_7 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[1]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[1]_i_2 
       (.I0(state[1]),
        .I1(\cnt[1]_i_4_n_0 ),
        .I2(\cnt[1]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[1]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[1]_i_3 
       (.I0(cnt[1]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[4]_i_4_n_7 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[1]_i_6_n_0 ),
        .O(\cnt[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[1]_i_4 
       (.I0(cnt[1]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[4]_i_4_n_7 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h4444004000000040)) 
    \cnt[1]_i_5 
       (.I0(state[2]),
        .I1(state[4]),
        .I2(\cnt_reg[4]_i_4_n_7 ),
        .I3(sl_mode_reg[1]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[1]),
        .O(\cnt[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[1]_i_6 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[1]),
        .I2(state[2]),
        .I3(\cnt_reg[4]_i_4_n_7 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[2]_i_1 
       (.I0(\cnt[2]_i_2_n_0 ),
        .I1(\cnt[2]_i_3_n_0 ),
        .I2(\cnt_reg[4]_i_4_n_6 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[2]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[2]_i_2 
       (.I0(state[1]),
        .I1(\cnt[2]_i_4_n_0 ),
        .I2(\cnt[2]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[2]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[2]_i_3 
       (.I0(cnt[2]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[4]_i_4_n_6 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[2]_i_6_n_0 ),
        .O(\cnt[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[2]_i_4 
       (.I0(cnt[2]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[4]_i_4_n_6 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00F0002000000020)) 
    \cnt[2]_i_5 
       (.I0(\cnt_reg[4]_i_4_n_6 ),
        .I1(sl_mode_reg[1]),
        .I2(state[4]),
        .I3(state[2]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[2]),
        .O(\cnt[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[2]_i_6 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[2]),
        .I2(state[2]),
        .I3(\cnt_reg[4]_i_4_n_6 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[2]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[3]_i_1 
       (.I0(\cnt[3]_i_2_n_0 ),
        .I1(\cnt[3]_i_3_n_0 ),
        .I2(\cnt_reg[4]_i_4_n_5 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[3]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[3]_i_2 
       (.I0(state[1]),
        .I1(\cnt[3]_i_4_n_0 ),
        .I2(\cnt[3]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[3]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[3]_i_3 
       (.I0(cnt[3]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[4]_i_4_n_5 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[3]_i_6_n_0 ),
        .O(\cnt[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[3]_i_4 
       (.I0(cnt[3]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[4]_i_4_n_5 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h4444004000000040)) 
    \cnt[3]_i_5 
       (.I0(state[2]),
        .I1(state[4]),
        .I2(\cnt_reg[4]_i_4_n_5 ),
        .I3(sl_mode_reg[1]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[3]),
        .O(\cnt[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[3]_i_6 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[3]),
        .I2(state[2]),
        .I3(\cnt_reg[4]_i_4_n_5 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[4]_i_1 
       (.I0(\cnt[4]_i_2_n_0 ),
        .I1(\cnt[4]_i_3_n_0 ),
        .I2(\cnt_reg[4]_i_4_n_4 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[4]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[4]_i_2 
       (.I0(state[1]),
        .I1(\cnt[4]_i_5_n_0 ),
        .I2(\cnt[4]_i_6_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[4]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[4]_i_3 
       (.I0(cnt[4]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[4]_i_4_n_4 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[4]_i_7_n_0 ),
        .O(\cnt[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[4]_i_5 
       (.I0(cnt[4]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[4]_i_4_n_4 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00F0002000000020)) 
    \cnt[4]_i_6 
       (.I0(\cnt_reg[4]_i_4_n_4 ),
        .I1(sl_mode_reg[1]),
        .I2(state[4]),
        .I3(state[2]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[4]),
        .O(\cnt[4]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[4]_i_7 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[4]),
        .I2(state[2]),
        .I3(\cnt_reg[4]_i_4_n_4 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[4]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[5]_i_1 
       (.I0(\cnt[5]_i_2_n_0 ),
        .I1(\cnt[5]_i_3_n_0 ),
        .I2(\cnt_reg[8]_i_4_n_7 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[5]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[5]_i_2 
       (.I0(state[1]),
        .I1(\cnt[5]_i_4_n_0 ),
        .I2(\cnt[5]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[5]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[5]_i_3 
       (.I0(cnt[5]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[8]_i_4_n_7 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[5]_i_6_n_0 ),
        .O(\cnt[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[5]_i_4 
       (.I0(cnt[5]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[8]_i_4_n_7 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00F0002000000020)) 
    \cnt[5]_i_5 
       (.I0(\cnt_reg[8]_i_4_n_7 ),
        .I1(sl_mode_reg[1]),
        .I2(state[4]),
        .I3(state[2]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[5]),
        .O(\cnt[5]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[5]_i_6 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[5]),
        .I2(state[2]),
        .I3(\cnt_reg[8]_i_4_n_7 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[5]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[6]_i_1 
       (.I0(\cnt[6]_i_2_n_0 ),
        .I1(\cnt[6]_i_3_n_0 ),
        .I2(\cnt_reg[8]_i_4_n_6 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[6]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[6]_i_2 
       (.I0(state[1]),
        .I1(\cnt[6]_i_4_n_0 ),
        .I2(\cnt[6]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[6]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[6]_i_3 
       (.I0(cnt[6]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[8]_i_4_n_6 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[6]_i_6_n_0 ),
        .O(\cnt[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[6]_i_4 
       (.I0(cnt[6]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[8]_i_4_n_6 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[6]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00F0002000000020)) 
    \cnt[6]_i_5 
       (.I0(\cnt_reg[8]_i_4_n_6 ),
        .I1(sl_mode_reg[1]),
        .I2(state[4]),
        .I3(state[2]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[6]),
        .O(\cnt[6]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[6]_i_6 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[6]),
        .I2(state[2]),
        .I3(\cnt_reg[8]_i_4_n_6 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[6]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[7]_i_1 
       (.I0(\cnt[7]_i_2_n_0 ),
        .I1(\cnt[7]_i_3_n_0 ),
        .I2(\cnt_reg[8]_i_4_n_5 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[7]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[7]_i_2 
       (.I0(state[1]),
        .I1(\cnt[7]_i_4_n_0 ),
        .I2(\cnt[7]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[7]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[7]_i_3 
       (.I0(cnt[7]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[8]_i_4_n_5 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[7]_i_6_n_0 ),
        .O(\cnt[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[7]_i_4 
       (.I0(cnt[7]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[8]_i_4_n_5 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[7]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00F0002000000020)) 
    \cnt[7]_i_5 
       (.I0(\cnt_reg[8]_i_4_n_5 ),
        .I1(sl_mode_reg[1]),
        .I2(state[4]),
        .I3(state[2]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[7]),
        .O(\cnt[7]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[7]_i_6 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[7]),
        .I2(state[2]),
        .I3(\cnt_reg[8]_i_4_n_5 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[7]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[8]_i_1 
       (.I0(\cnt[8]_i_2_n_0 ),
        .I1(\cnt[8]_i_3_n_0 ),
        .I2(\cnt_reg[8]_i_4_n_4 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[8]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[8]_i_2 
       (.I0(state[1]),
        .I1(\cnt[8]_i_5_n_0 ),
        .I2(\cnt[8]_i_6_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[8]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[8]_i_3 
       (.I0(cnt[8]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[8]_i_4_n_4 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[8]_i_7_n_0 ),
        .O(\cnt[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[8]_i_5 
       (.I0(cnt[8]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[8]_i_4_n_4 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[8]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00F0002000000020)) 
    \cnt[8]_i_6 
       (.I0(\cnt_reg[8]_i_4_n_4 ),
        .I1(sl_mode_reg[1]),
        .I2(state[4]),
        .I3(state[2]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[8]),
        .O(\cnt[8]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[8]_i_7 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[8]),
        .I2(state[2]),
        .I3(\cnt_reg[8]_i_4_n_4 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[8]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEEEFEEEEEEEEE)) 
    \cnt[9]_i_1 
       (.I0(\cnt[9]_i_2_n_0 ),
        .I1(\cnt[9]_i_3_n_0 ),
        .I2(\cnt_reg[12]_i_4_n_7 ),
        .I3(\cnt[14]_i_5_n_0 ),
        .I4(cnt[9]),
        .I5(\cnt[14]_i_6_n_0 ),
        .O(\cnt[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454555454)) 
    \cnt[9]_i_2 
       (.I0(state[1]),
        .I1(\cnt[9]_i_4_n_0 ),
        .I2(\cnt[9]_i_5_n_0 ),
        .I3(\cnt[15]_i_3_n_0 ),
        .I4(cnt[9]),
        .I5(\cnt[15]_i_2_n_0 ),
        .O(\cnt[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8B880000)) 
    \cnt[9]_i_3 
       (.I0(cnt[9]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[12]_i_4_n_7 ),
        .I4(\cnt[14]_i_9_n_0 ),
        .I5(\cnt[9]_i_6_n_0 ),
        .O(\cnt[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8B88AAAA00000000)) 
    \cnt[9]_i_4 
       (.I0(cnt[9]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(sl_mode_reg[1]),
        .I3(\cnt_reg[12]_i_4_n_7 ),
        .I4(\SL_DT_O[24]_i_3_n_0 ),
        .I5(state[3]),
        .O(\cnt[9]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00F0002000000020)) 
    \cnt[9]_i_5 
       (.I0(\cnt_reg[12]_i_4_n_7 ),
        .I1(sl_mode_reg[1]),
        .I2(state[4]),
        .I3(state[2]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(cnt[9]),
        .O(\cnt[9]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hF444444444444444)) 
    \cnt[9]_i_6 
       (.I0(\cnt[14]_i_12_n_0 ),
        .I1(cnt[9]),
        .I2(state[2]),
        .I3(\cnt_reg[12]_i_4_n_7 ),
        .I4(SL_FULL_N),
        .I5(state[4]),
        .O(\cnt[9]_i_6_n_0 ));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[0] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[0]_i_1_n_0 ),
        .Q(cnt[0]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[10] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[10]_i_1_n_0 ),
        .Q(cnt[10]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[11] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[11]_i_1_n_0 ),
        .Q(cnt[11]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[12] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[12]_i_1_n_0 ),
        .Q(cnt[12]));
  CARRY4 \cnt_reg[12]_i_4 
       (.CI(\cnt_reg[8]_i_4_n_0 ),
        .CO({\cnt_reg[12]_i_4_n_0 ,\cnt_reg[12]_i_4_n_1 ,\cnt_reg[12]_i_4_n_2 ,\cnt_reg[12]_i_4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cnt_reg[12]_i_4_n_4 ,\cnt_reg[12]_i_4_n_5 ,\cnt_reg[12]_i_4_n_6 ,\cnt_reg[12]_i_4_n_7 }),
        .S(cnt[12:9]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[13] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[13]_i_1_n_0 ),
        .Q(cnt[13]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[14] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[14]_i_1_n_0 ),
        .Q(cnt[14]));
  CARRY4 \cnt_reg[14]_i_4 
       (.CI(\cnt_reg[12]_i_4_n_0 ),
        .CO({\NLW_cnt_reg[14]_i_4_CO_UNCONNECTED [3:2],\cnt_reg[14]_i_4_n_2 ,\cnt_reg[14]_i_4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_cnt_reg[14]_i_4_O_UNCONNECTED [3],\cnt_reg[14]_i_4_n_5 ,\cnt_reg[14]_i_4_n_6 ,\cnt_reg[14]_i_4_n_7 }),
        .S({1'b0,cnt[15:13]}));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[15] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[15]_i_1_n_0 ),
        .Q(cnt[15]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[1] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[1]_i_1_n_0 ),
        .Q(cnt[1]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[2] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[2]_i_1_n_0 ),
        .Q(cnt[2]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[3] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[3]_i_1_n_0 ),
        .Q(cnt[3]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[4] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[4]_i_1_n_0 ),
        .Q(cnt[4]));
  CARRY4 \cnt_reg[4]_i_4 
       (.CI(1'b0),
        .CO({\cnt_reg[4]_i_4_n_0 ,\cnt_reg[4]_i_4_n_1 ,\cnt_reg[4]_i_4_n_2 ,\cnt_reg[4]_i_4_n_3 }),
        .CYINIT(cnt[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cnt_reg[4]_i_4_n_4 ,\cnt_reg[4]_i_4_n_5 ,\cnt_reg[4]_i_4_n_6 ,\cnt_reg[4]_i_4_n_7 }),
        .S(cnt[4:1]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[5] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[5]_i_1_n_0 ),
        .Q(cnt[5]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[6] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[6]_i_1_n_0 ),
        .Q(cnt[6]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[7] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[7]_i_1_n_0 ),
        .Q(cnt[7]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[8] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[8]_i_1_n_0 ),
        .Q(cnt[8]));
  CARRY4 \cnt_reg[8]_i_4 
       (.CI(\cnt_reg[4]_i_4_n_0 ),
        .CO({\cnt_reg[8]_i_4_n_0 ,\cnt_reg[8]_i_4_n_1 ,\cnt_reg[8]_i_4_n_2 ,\cnt_reg[8]_i_4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\cnt_reg[8]_i_4_n_4 ,\cnt_reg[8]_i_4_n_5 ,\cnt_reg[8]_i_4_n_6 ,\cnt_reg[8]_i_4_n_7 }),
        .S(cnt[8:5]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \cnt_reg[9] 
       (.C(f2u_rd_clk),
        .CE(g0_b0_n_0),
        .CLR(u_cu2f_i_1_n_0),
        .D(\cnt[9]_i_1_n_0 ),
        .Q(cnt[9]));
  LUT3 #(
    .INIT(8'hB8)) 
    \control_flit[0]_i_1 
       (.I0(SL_DT_I[0]),
        .I1(state[1]),
        .I2(req_cmd[0]),
        .O(\control_flit[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \control_flit[10]_i_1 
       (.I0(SL_DT_I[10]),
        .I1(state[1]),
        .I2(control_flit[10]),
        .O(\control_flit[10]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \control_flit[11]_i_1 
       (.I0(SL_DT_I[11]),
        .I1(state[1]),
        .I2(control_flit[11]),
        .O(\control_flit[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8BBB8BBB8BBB8888)) 
    \control_flit[12]_i_1 
       (.I0(SL_DT_I[12]),
        .I1(state[1]),
        .I2(sl_mode_reg[0]),
        .I3(mask[0]),
        .I4(ctl_cmd[0]),
        .I5(\control_flit[12]_i_2_n_0 ),
        .O(\control_flit[12]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \control_flit[12]_i_2 
       (.I0(mask[1]),
        .I1(sl_mode_reg[1]),
        .O(\control_flit[12]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h8F88)) 
    \control_flit[13]_i_1 
       (.I0(SL_DT_I[13]),
        .I1(state[1]),
        .I2(\control_flit[31]_i_3_n_0 ),
        .I3(ctl_cmd[1]),
        .O(\control_flit[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[14]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(ctl_cmd[2]),
        .I2(SL_DT_I[14]),
        .I3(state[1]),
        .O(\control_flit[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8F88)) 
    \control_flit[15]_i_1 
       (.I0(SL_DT_I[15]),
        .I1(state[1]),
        .I2(\control_flit[31]_i_3_n_0 ),
        .I3(ctl_cmd[3]),
        .O(\control_flit[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[16]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[0]),
        .I2(SL_DT_I[16]),
        .I3(state[1]),
        .O(\control_flit[16]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[17]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[1]),
        .I2(SL_DT_I[17]),
        .I3(state[1]),
        .O(\control_flit[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[18]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[2]),
        .I2(SL_DT_I[18]),
        .I3(state[1]),
        .O(\control_flit[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[19]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[3]),
        .I2(SL_DT_I[19]),
        .I3(state[1]),
        .O(\control_flit[19]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \control_flit[1]_i_1 
       (.I0(SL_DT_I[1]),
        .I1(state[1]),
        .I2(req_cmd[1]),
        .O(\control_flit[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[20]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[4]),
        .I2(SL_DT_I[20]),
        .I3(state[1]),
        .O(\control_flit[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[21]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[5]),
        .I2(SL_DT_I[21]),
        .I3(state[1]),
        .O(\control_flit[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[22]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[6]),
        .I2(SL_DT_I[22]),
        .I3(state[1]),
        .O(\control_flit[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[23]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[7]),
        .I2(SL_DT_I[23]),
        .I3(state[1]),
        .O(\control_flit[23]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[24]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[8]),
        .I2(SL_DT_I[24]),
        .I3(state[1]),
        .O(\control_flit[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[25]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[9]),
        .I2(SL_DT_I[25]),
        .I3(state[1]),
        .O(\control_flit[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[26]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[10]),
        .I2(SL_DT_I[26]),
        .I3(state[1]),
        .O(\control_flit[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[27]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[11]),
        .I2(SL_DT_I[27]),
        .I3(state[1]),
        .O(\control_flit[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[28]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[12]),
        .I2(SL_DT_I[28]),
        .I3(state[1]),
        .O(\control_flit[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[29]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[13]),
        .I2(SL_DT_I[29]),
        .I3(state[1]),
        .O(\control_flit[29]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \control_flit[2]_i_1 
       (.I0(SL_DT_I[2]),
        .I1(state[1]),
        .I2(req_cmd[2]),
        .O(\control_flit[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[30]_i_1 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[14]),
        .I2(SL_DT_I[30]),
        .I3(state[1]),
        .O(\control_flit[30]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00001001)) 
    \control_flit[31]_i_1 
       (.I0(state[4]),
        .I1(state[3]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(state[2]),
        .O(\control_flit[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE0EE)) 
    \control_flit[31]_i_2 
       (.I0(\control_flit[31]_i_3_n_0 ),
        .I1(dat_leng[15]),
        .I2(SL_DT_I[31]),
        .I3(state[1]),
        .O(\control_flit[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \control_flit[31]_i_3 
       (.I0(sl_mode_reg[1]),
        .I1(mask[1]),
        .I2(mask[0]),
        .I3(sl_mode_reg[0]),
        .I4(state[1]),
        .O(\control_flit[31]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \control_flit[3]_i_1 
       (.I0(SL_DT_I[3]),
        .I1(state[1]),
        .I2(req_cmd[3]),
        .O(\control_flit[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8F88)) 
    \control_flit[4]_i_1 
       (.I0(SL_DT_I[4]),
        .I1(state[1]),
        .I2(\control_flit[31]_i_3_n_0 ),
        .I3(transactor_sel[0]),
        .O(\control_flit[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8F88)) 
    \control_flit[5]_i_1 
       (.I0(SL_DT_I[5]),
        .I1(state[1]),
        .I2(\control_flit[31]_i_3_n_0 ),
        .I3(transactor_sel[1]),
        .O(\control_flit[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8F88)) 
    \control_flit[6]_i_1 
       (.I0(SL_DT_I[6]),
        .I1(state[1]),
        .I2(\control_flit[31]_i_3_n_0 ),
        .I3(transactor_sel[2]),
        .O(\control_flit[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8F88)) 
    \control_flit[7]_i_1 
       (.I0(SL_DT_I[7]),
        .I1(state[1]),
        .I2(\control_flit[31]_i_3_n_0 ),
        .I3(transactor_sel[3]),
        .O(\control_flit[7]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \control_flit[8]_i_1 
       (.I0(SL_DT_I[8]),
        .I1(state[1]),
        .I2(control_flit[8]),
        .O(\control_flit[8]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \control_flit[9]_i_1 
       (.I0(SL_DT_I[9]),
        .I1(state[1]),
        .I2(control_flit[9]),
        .O(\control_flit[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[0] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[0]_i_1_n_0 ),
        .Q(control_flit[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[10] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[10]_i_1_n_0 ),
        .Q(control_flit[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[11] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[11]_i_1_n_0 ),
        .Q(control_flit[11]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[12] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[12]_i_1_n_0 ),
        .Q(control_flit[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[13] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[13]_i_1_n_0 ),
        .Q(control_flit[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[14] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[14]_i_1_n_0 ),
        .Q(control_flit[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[15] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[15]_i_1_n_0 ),
        .Q(control_flit[15]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[16] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[16]_i_1_n_0 ),
        .Q(control_flit[16]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[17] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[17]_i_1_n_0 ),
        .Q(control_flit[17]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[18] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[18]_i_1_n_0 ),
        .Q(control_flit[18]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[19] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[19]_i_1_n_0 ),
        .Q(control_flit[19]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[1] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[1]_i_1_n_0 ),
        .Q(control_flit[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[20] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[20]_i_1_n_0 ),
        .Q(control_flit[20]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[21] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[21]_i_1_n_0 ),
        .Q(control_flit[21]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[22] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[22]_i_1_n_0 ),
        .Q(control_flit[22]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[23] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[23]_i_1_n_0 ),
        .Q(control_flit[23]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[24] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[24]_i_1_n_0 ),
        .Q(control_flit[24]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[25] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[25]_i_1_n_0 ),
        .Q(control_flit[25]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[26] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[26]_i_1_n_0 ),
        .Q(control_flit[26]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[27] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[27]_i_1_n_0 ),
        .Q(control_flit[27]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[28] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[28]_i_1_n_0 ),
        .Q(control_flit[28]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[29] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[29]_i_1_n_0 ),
        .Q(control_flit[29]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[2] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[2]_i_1_n_0 ),
        .Q(control_flit[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[30] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[30]_i_1_n_0 ),
        .Q(control_flit[30]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[31] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[31]_i_2_n_0 ),
        .Q(control_flit[31]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[3] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[3]_i_1_n_0 ),
        .Q(control_flit[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[4] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[4]_i_1_n_0 ),
        .Q(control_flit[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[5] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[5]_i_1_n_0 ),
        .Q(control_flit[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[6] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[6]_i_1_n_0 ),
        .Q(control_flit[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[7] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[7]_i_1_n_0 ),
        .Q(control_flit[7]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[8] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[8]_i_1_n_0 ),
        .Q(control_flit[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \control_flit_reg[9] 
       (.C(f2u_rd_clk),
        .CE(\control_flit[31]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\control_flit[9]_i_1_n_0 ),
        .Q(control_flit[9]));
  LUT6 #(
    .INIT(64'h00AA0000C000AA00)) 
    f2u_rd_ready_inferred_i_1
       (.I0(f2u_rd_ready_inferred_i_2_n_0),
        .I1(\state[2]_i_5_n_0 ),
        .I2(\SL_DT_O[24]_i_3_n_0 ),
        .I3(state[0]),
        .I4(state[2]),
        .I5(state[1]),
        .O(f2u_rd_ready));
  LUT6 #(
    .INIT(64'h00000800000F0000)) 
    f2u_rd_ready_inferred_i_2
       (.I0(SL_FULL_N),
        .I1(SL_PRE_FULL_N),
        .I2(f2u_rd_empty),
        .I3(state[3]),
        .I4(state[4]),
        .I5(state[2]),
        .O(f2u_rd_ready_inferred_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000002)) 
    \fifo_sel[0]_i_1 
       (.I0(\fifo_sel_reg[0]_i_2_n_0 ),
        .I1(state[4]),
        .I2(state[0]),
        .I3(state[3]),
        .I4(state[1]),
        .I5(fifo_sel[0]),
        .O(\fifo_sel[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \fifo_sel[0]_i_3 
       (.I0(sl_mode_reg[0]),
        .I1(mask[0]),
        .I2(mask[1]),
        .I3(sl_mode_reg[1]),
        .I4(fifo_sel[0]),
        .O(\fifo_sel[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFEDBFEFF00100000)) 
    \fifo_sel[0]_i_4 
       (.I0(ctl_cmd[0]),
        .I1(ctl_cmd[1]),
        .I2(ctl_cmd[2]),
        .I3(ctl_cmd[3]),
        .I4(\cnt[15]_i_6_n_0 ),
        .I5(fifo_sel[0]),
        .O(\fifo_sel[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000002)) 
    \fifo_sel[1]_i_1 
       (.I0(\fifo_sel_reg[1]_i_2_n_0 ),
        .I1(state[4]),
        .I2(state[0]),
        .I3(state[3]),
        .I4(state[1]),
        .I5(fifo_sel[1]),
        .O(\fifo_sel[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h77777000)) 
    \fifo_sel[1]_i_3 
       (.I0(sl_mode_reg[0]),
        .I1(mask[0]),
        .I2(mask[1]),
        .I3(sl_mode_reg[1]),
        .I4(fifo_sel[1]),
        .O(\fifo_sel[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCCCE4CCCFC4CC)) 
    \fifo_sel[1]_i_4 
       (.I0(\cnt[15]_i_6_n_0 ),
        .I1(fifo_sel[1]),
        .I2(ctl_cmd[0]),
        .I3(ctl_cmd[1]),
        .I4(ctl_cmd[3]),
        .I5(ctl_cmd[2]),
        .O(\fifo_sel[1]_i_4_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \fifo_sel_reg[0] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\fifo_sel[0]_i_1_n_0 ),
        .Q(fifo_sel[0]));
  MUXF7 \fifo_sel_reg[0]_i_2 
       (.I0(\fifo_sel[0]_i_3_n_0 ),
        .I1(\fifo_sel[0]_i_4_n_0 ),
        .O(\fifo_sel_reg[0]_i_2_n_0 ),
        .S(state[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \fifo_sel_reg[1] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\fifo_sel[1]_i_1_n_0 ),
        .Q(fifo_sel[1]));
  MUXF7 \fifo_sel_reg[1]_i_2 
       (.I0(\fifo_sel[1]_i_3_n_0 ),
        .I1(\fifo_sel[1]_i_4_n_0 ),
        .O(\fifo_sel_reg[1]_i_2_n_0 ),
        .S(state[2]));
  LUT5 #(
    .INIT(32'h002A6051)) 
    g0_b0
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .O(g0_b0_n_0));
  LUT5 #(
    .INIT(32'h0004C181)) 
    g0_b0__0
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .I3(state[3]),
        .I4(state[4]),
        .O(g0_b0__0_n_0));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(SL_PCLK_STABLE));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(SL_FLAGA),
        .O(SL_EMPTY_N));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(control_flit[23]),
        .O(dat_leng[7]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(control_flit[22]),
        .O(dat_leng[6]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(control_flit[21]),
        .O(dat_leng[5]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(control_flit[20]),
        .O(dat_leng[4]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(control_flit[19]),
        .O(dat_leng[3]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(control_flit[18]),
        .O(dat_leng[2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(control_flit[17]),
        .O(dat_leng[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(control_flit[16]),
        .O(dat_leng[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(control_flit[15]),
        .O(ctl_cmd[3]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(control_flit[14]),
        .O(ctl_cmd[2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(control_flit[31]),
        .O(dat_leng[15]));
  LUT1 #(
    .INIT(2'h2)) 
    i_20
       (.I0(control_flit[13]),
        .O(ctl_cmd[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_21
       (.I0(control_flit[12]),
        .O(ctl_cmd[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_22
       (.I0(control_flit[7]),
        .O(transactor_sel[3]));
  LUT1 #(
    .INIT(2'h2)) 
    i_23
       (.I0(control_flit[6]),
        .O(transactor_sel[2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_24
       (.I0(control_flit[5]),
        .O(transactor_sel[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_25
       (.I0(control_flit[4]),
        .O(transactor_sel[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_26
       (.I0(control_flit[3]),
        .O(req_cmd[3]));
  LUT1 #(
    .INIT(2'h2)) 
    i_27
       (.I0(control_flit[2]),
        .O(req_cmd[2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_28
       (.I0(control_flit[1]),
        .O(req_cmd[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_29
       (.I0(control_flit[0]),
        .O(req_cmd[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(control_flit[30]),
        .O(dat_leng[14]));
  LUT1 #(
    .INIT(2'h2)) 
    i_30
       (.I0(SL_FLAGB),
        .O(SL_PRE_EMPTY_N));
  LUT1 #(
    .INIT(2'h2)) 
    i_31
       (.I0(SL_FLAGC),
        .O(SL_FULL_N));
  LUT1 #(
    .INIT(2'h2)) 
    i_32
       (.I0(SL_FLAGD),
        .O(SL_PRE_FULL_N));
  LUT1 #(
    .INIT(2'h2)) 
    i_33
       (.I0(f2u_rd_clk),
        .O(cmd_wr_clk));
  LUT1 #(
    .INIT(2'h2)) 
    i_34
       (.I0(f2u_rd_clk),
        .O(u2f_wr_clk));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(control_flit[29]),
        .O(dat_leng[13]));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(control_flit[28]),
        .O(dat_leng[12]));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(control_flit[27]),
        .O(dat_leng[11]));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(control_flit[26]),
        .O(dat_leng[10]));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(control_flit[25]),
        .O(dat_leng[9]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(control_flit[24]),
        .O(dat_leng[8]));
  LUT4 #(
    .INIT(16'h3FB0)) 
    \mask[0]_i_1 
       (.I0(mask[1]),
        .I1(sl_mode_reg[1]),
        .I2(mask[0]),
        .I3(sl_mode_reg[0]),
        .O(\mask[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hBFB0)) 
    \mask[1]_i_1 
       (.I0(mask[0]),
        .I1(sl_mode_reg[0]),
        .I2(mask[1]),
        .I3(sl_mode_reg[1]),
        .O(\mask[1]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \mask_reg[0] 
       (.C(f2u_rd_clk),
        .CE(\sl_mode_reg[1]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\mask[0]_i_1_n_0 ),
        .Q(mask[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \mask_reg[1] 
       (.C(f2u_rd_clk),
        .CE(\sl_mode_reg[1]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(\mask[1]_i_1_n_0 ),
        .Q(mask[1]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[0]_i_1 
       (.I0(\pushed_reg[3]_i_2_n_7 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[10]_i_1 
       (.I0(\pushed_reg[11]_i_2_n_5 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[11]_i_1 
       (.I0(\pushed_reg[11]_i_2_n_4 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[12]_i_1 
       (.I0(\pushed_reg[15]_i_2_n_7 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[13]_i_1 
       (.I0(\pushed_reg[15]_i_2_n_6 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[14]_i_1 
       (.I0(\pushed_reg[15]_i_2_n_5 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[15]_i_1 
       (.I0(\pushed_reg[15]_i_2_n_4 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[1]_i_1 
       (.I0(\pushed_reg[3]_i_2_n_6 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[2]_i_1 
       (.I0(\pushed_reg[3]_i_2_n_5 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[3]_i_1 
       (.I0(\pushed_reg[3]_i_2_n_4 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[3]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h6A)) 
    \pushed[3]_i_3 
       (.I0(pushed[0]),
        .I1(u2f_wr_ready),
        .I2(u2f_wr_valid),
        .O(\pushed[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[4]_i_1 
       (.I0(\pushed_reg[7]_i_2_n_7 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[5]_i_1 
       (.I0(\pushed_reg[7]_i_2_n_6 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[6]_i_1 
       (.I0(\pushed_reg[7]_i_2_n_5 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[7]_i_1 
       (.I0(\pushed_reg[7]_i_2_n_4 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[8]_i_1 
       (.I0(\pushed_reg[11]_i_2_n_7 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA8A)) 
    \pushed[9]_i_1 
       (.I0(\pushed_reg[11]_i_2_n_6 ),
        .I1(state[4]),
        .I2(state[2]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[1]),
        .O(\pushed[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[0] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[0]_i_1_n_0 ),
        .Q(pushed[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[10] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[10]_i_1_n_0 ),
        .Q(pushed[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[11] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[11]_i_1_n_0 ),
        .Q(pushed[11]));
  CARRY4 \pushed_reg[11]_i_2 
       (.CI(\pushed_reg[7]_i_2_n_0 ),
        .CO({\pushed_reg[11]_i_2_n_0 ,\pushed_reg[11]_i_2_n_1 ,\pushed_reg[11]_i_2_n_2 ,\pushed_reg[11]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\pushed_reg[11]_i_2_n_4 ,\pushed_reg[11]_i_2_n_5 ,\pushed_reg[11]_i_2_n_6 ,\pushed_reg[11]_i_2_n_7 }),
        .S(pushed[11:8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[12] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[12]_i_1_n_0 ),
        .Q(pushed[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[13] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[13]_i_1_n_0 ),
        .Q(pushed[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[14] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[14]_i_1_n_0 ),
        .Q(pushed[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[15] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[15]_i_1_n_0 ),
        .Q(pushed[15]));
  CARRY4 \pushed_reg[15]_i_2 
       (.CI(\pushed_reg[11]_i_2_n_0 ),
        .CO({\NLW_pushed_reg[15]_i_2_CO_UNCONNECTED [3],\pushed_reg[15]_i_2_n_1 ,\pushed_reg[15]_i_2_n_2 ,\pushed_reg[15]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\pushed_reg[15]_i_2_n_4 ,\pushed_reg[15]_i_2_n_5 ,\pushed_reg[15]_i_2_n_6 ,\pushed_reg[15]_i_2_n_7 }),
        .S(pushed[15:12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[1] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[1]_i_1_n_0 ),
        .Q(pushed[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[2] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[2]_i_1_n_0 ),
        .Q(pushed[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[3] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[3]_i_1_n_0 ),
        .Q(pushed[3]));
  CARRY4 \pushed_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\pushed_reg[3]_i_2_n_0 ,\pushed_reg[3]_i_2_n_1 ,\pushed_reg[3]_i_2_n_2 ,\pushed_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,pushed[0]}),
        .O({\pushed_reg[3]_i_2_n_4 ,\pushed_reg[3]_i_2_n_5 ,\pushed_reg[3]_i_2_n_6 ,\pushed_reg[3]_i_2_n_7 }),
        .S({pushed[3:1],\pushed[3]_i_3_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[4] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[4]_i_1_n_0 ),
        .Q(pushed[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[5] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[5]_i_1_n_0 ),
        .Q(pushed[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[6] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[6]_i_1_n_0 ),
        .Q(pushed[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[7] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[7]_i_1_n_0 ),
        .Q(pushed[7]));
  CARRY4 \pushed_reg[7]_i_2 
       (.CI(\pushed_reg[3]_i_2_n_0 ),
        .CO({\pushed_reg[7]_i_2_n_0 ,\pushed_reg[7]_i_2_n_1 ,\pushed_reg[7]_i_2_n_2 ,\pushed_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\pushed_reg[7]_i_2_n_4 ,\pushed_reg[7]_i_2_n_5 ,\pushed_reg[7]_i_2_n_6 ,\pushed_reg[7]_i_2_n_7 }),
        .S(pushed[7:4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[8] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[8]_i_1_n_0 ),
        .Q(pushed[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \pushed_reg[9] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\pushed[9]_i_1_n_0 ),
        .Q(pushed[9]));
  LUT1 #(
    .INIT(2'h1)) 
    reg_clk_i_1
       (.I0(reg_clk),
        .O(reg_clk_i_1_n_0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    reg_clk_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(reg_clk_i_1_n_0),
        .Q(reg_clk),
        .R(1'b0));
  CARRY4 remain_inferred_i_1
       (.CI(remain_inferred_i_2_n_0),
        .CO({NLW_remain_inferred_i_1_CO_UNCONNECTED[3],remain_inferred_i_1_n_1,remain_inferred_i_1_n_2,remain_inferred_i_1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,dat_leng[14:12]}),
        .O(remain[15:12]),
        .S({remain_inferred_i_5_n_0,remain_inferred_i_6_n_0,remain_inferred_i_7_n_0,remain_inferred_i_8_n_0}));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_10
       (.I0(dat_leng[10]),
        .I1(cnt[10]),
        .O(remain_inferred_i_10_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_11
       (.I0(dat_leng[9]),
        .I1(cnt[9]),
        .O(remain_inferred_i_11_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_12
       (.I0(dat_leng[8]),
        .I1(cnt[8]),
        .O(remain_inferred_i_12_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_13
       (.I0(dat_leng[7]),
        .I1(cnt[7]),
        .O(remain_inferred_i_13_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_14
       (.I0(dat_leng[6]),
        .I1(cnt[6]),
        .O(remain_inferred_i_14_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_15
       (.I0(dat_leng[5]),
        .I1(cnt[5]),
        .O(remain_inferred_i_15_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_16
       (.I0(dat_leng[4]),
        .I1(cnt[4]),
        .O(remain_inferred_i_16_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_17
       (.I0(dat_leng[3]),
        .I1(cnt[3]),
        .O(remain_inferred_i_17_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_18
       (.I0(dat_leng[2]),
        .I1(cnt[2]),
        .O(remain_inferred_i_18_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_19
       (.I0(dat_leng[1]),
        .I1(cnt[1]),
        .O(remain_inferred_i_19_n_0));
  CARRY4 remain_inferred_i_2
       (.CI(remain_inferred_i_3_n_0),
        .CO({remain_inferred_i_2_n_0,remain_inferred_i_2_n_1,remain_inferred_i_2_n_2,remain_inferred_i_2_n_3}),
        .CYINIT(1'b0),
        .DI(dat_leng[11:8]),
        .O(remain[11:8]),
        .S({remain_inferred_i_9_n_0,remain_inferred_i_10_n_0,remain_inferred_i_11_n_0,remain_inferred_i_12_n_0}));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_20
       (.I0(dat_leng[0]),
        .I1(cnt[0]),
        .O(remain_inferred_i_20_n_0));
  CARRY4 remain_inferred_i_3
       (.CI(remain_inferred_i_4_n_0),
        .CO({remain_inferred_i_3_n_0,remain_inferred_i_3_n_1,remain_inferred_i_3_n_2,remain_inferred_i_3_n_3}),
        .CYINIT(1'b0),
        .DI(dat_leng[7:4]),
        .O(remain[7:4]),
        .S({remain_inferred_i_13_n_0,remain_inferred_i_14_n_0,remain_inferred_i_15_n_0,remain_inferred_i_16_n_0}));
  CARRY4 remain_inferred_i_4
       (.CI(1'b0),
        .CO({remain_inferred_i_4_n_0,remain_inferred_i_4_n_1,remain_inferred_i_4_n_2,remain_inferred_i_4_n_3}),
        .CYINIT(1'b1),
        .DI(dat_leng[3:0]),
        .O(remain[3:0]),
        .S({remain_inferred_i_17_n_0,remain_inferred_i_18_n_0,remain_inferred_i_19_n_0,remain_inferred_i_20_n_0}));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_5
       (.I0(dat_leng[15]),
        .I1(cnt[15]),
        .O(remain_inferred_i_5_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_6
       (.I0(dat_leng[14]),
        .I1(cnt[14]),
        .O(remain_inferred_i_6_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_7
       (.I0(dat_leng[13]),
        .I1(cnt[13]),
        .O(remain_inferred_i_7_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_8
       (.I0(dat_leng[12]),
        .I1(cnt[12]),
        .O(remain_inferred_i_8_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    remain_inferred_i_9
       (.I0(dat_leng[11]),
        .I1(cnt[11]),
        .O(remain_inferred_i_9_n_0));
  LUT6 #(
    .INIT(64'h00002A228AAA8880)) 
    \sl_ad_reg[0]_i_1 
       (.I0(sl_ad_reg[0]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(state[3]),
        .I5(state[4]),
        .O(\sl_ad_reg[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8F888F8F8F888888)) 
    \sl_ad_reg[1]_i_1 
       (.I0(\SL_AD[1]_i_2_n_0 ),
        .I1(sl_ad_reg[1]),
        .I2(state[4]),
        .I3(\sl_ad_reg[1]_i_2_n_0 ),
        .I4(\SL_AD[1]_i_4_n_0 ),
        .I5(\SL_AD[1]_i_5_n_0 ),
        .O(\sl_ad_reg[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFE0002)) 
    \sl_ad_reg[1]_i_2 
       (.I0(\state[3]_i_14_n_0 ),
        .I1(state[0]),
        .I2(state[3]),
        .I3(state[1]),
        .I4(sl_ad_reg[1]),
        .O(\sl_ad_reg[1]_i_2_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \sl_ad_reg_reg[0] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\sl_ad_reg[0]_i_1_n_0 ),
        .Q(sl_ad_reg[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \sl_ad_reg_reg[1] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\sl_ad_reg[1]_i_1_n_0 ),
        .Q(sl_ad_reg[1]));
  LUT5 #(
    .INIT(32'h00000001)) 
    \sl_mode_reg[1]_i_1 
       (.I0(state[4]),
        .I1(state[3]),
        .I2(state[1]),
        .I3(state[2]),
        .I4(state[0]),
        .O(\sl_mode_reg[1]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \sl_mode_reg_reg[0] 
       (.C(f2u_rd_clk),
        .CE(\sl_mode_reg[1]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(SL_MODE[0]),
        .Q(sl_mode_reg[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \sl_mode_reg_reg[1] 
       (.C(f2u_rd_clk),
        .CE(\sl_mode_reg[1]_i_1_n_0 ),
        .CLR(u_cu2f_i_1_n_0),
        .D(SL_MODE[1]),
        .Q(sl_mode_reg[1]));
  LUT6 #(
    .INIT(64'hFFF0EFEFFFF0E0E0)) 
    sl_oe_n_reg_i_1
       (.I0(sl_oe_n_reg),
        .I1(state[2]),
        .I2(state[4]),
        .I3(sl_oe_n_reg_i_2_n_0),
        .I4(state[3]),
        .I5(sl_oe_n_reg_i_3_n_0),
        .O(sl_oe_n_reg_i_1_n_0));
  LUT4 #(
    .INIT(16'hF4FC)) 
    sl_oe_n_reg_i_2
       (.I0(state[1]),
        .I1(state[2]),
        .I2(sl_oe_n_reg),
        .I3(state[0]),
        .O(sl_oe_n_reg_i_2_n_0));
  LUT6 #(
    .INIT(64'hA0A0A0A000CF00C0)) 
    sl_oe_n_reg_i_3
       (.I0(sl_oe_n_reg),
        .I1(SL_OE_N_i_3_n_0),
        .I2(state[2]),
        .I3(state[0]),
        .I4(SL_OE_N_i_6_n_0),
        .I5(state[1]),
        .O(sl_oe_n_reg_i_3_n_0));
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    sl_oe_n_reg_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(sl_oe_n_reg_i_1_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(sl_oe_n_reg));
  LUT6 #(
    .INIT(64'h88A8A8A88AAAAAAA)) 
    sl_pktend_n_reg_i_1
       (.I0(sl_pktend_n_reg_i_2_n_0),
        .I1(sl_pktend_n_reg_i_3_n_0),
        .I2(SL_WR_N_i_4_n_0),
        .I3(SL_FULL_N),
        .I4(sl_pktend_n_reg_i_4_n_0),
        .I5(sl_pktend_n_reg_i_5_n_0),
        .O(sl_pktend_n_reg_i_1_n_0));
  LUT6 #(
    .INIT(64'h11F0FFFFFFFFFFFF)) 
    sl_pktend_n_reg_i_2
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(f2u_rd_data[32]),
        .I2(sl_pktend_n_reg),
        .I3(SL_WR_N_i_5_n_0),
        .I4(SL_WR_N_i_4_n_0),
        .I5(sl_pktend_n_reg_i_3_n_0),
        .O(sl_pktend_n_reg_i_2_n_0));
  LUT5 #(
    .INIT(32'hFFDFF3FF)) 
    sl_pktend_n_reg_i_3
       (.I0(state[2]),
        .I1(state[4]),
        .I2(state[3]),
        .I3(state[0]),
        .I4(state[1]),
        .O(sl_pktend_n_reg_i_3_n_0));
  LUT4 #(
    .INIT(16'h0004)) 
    sl_pktend_n_reg_i_4
       (.I0(sl_pktend_n_reg_i_6_n_0),
        .I1(sl_pktend_n_reg_i_7_n_0),
        .I2(sl_pktend_n_reg_i_8_n_0),
        .I3(sl_pktend_n_reg_i_9_n_0),
        .O(sl_pktend_n_reg_i_4_n_0));
  LUT6 #(
    .INIT(64'h000F0000000F8F8F)) 
    sl_pktend_n_reg_i_5
       (.I0(SL_PRE_FULL_N),
        .I1(SL_FULL_N),
        .I2(SL_WR_N_i_7_n_0),
        .I3(sl_pktend_n_reg),
        .I4(f2u_rd_empty),
        .I5(SL_PKTEND_N_i_7_n_0),
        .O(sl_pktend_n_reg_i_5_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    sl_pktend_n_reg_i_6
       (.I0(remain[12]),
        .I1(remain[0]),
        .I2(remain[8]),
        .I3(remain[4]),
        .O(sl_pktend_n_reg_i_6_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    sl_pktend_n_reg_i_7
       (.I0(remain[9]),
        .I1(remain[5]),
        .I2(remain[13]),
        .I3(remain[1]),
        .O(sl_pktend_n_reg_i_7_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    sl_pktend_n_reg_i_8
       (.I0(remain[10]),
        .I1(remain[6]),
        .I2(remain[15]),
        .I3(remain[2]),
        .O(sl_pktend_n_reg_i_8_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    sl_pktend_n_reg_i_9
       (.I0(remain[14]),
        .I1(remain[3]),
        .I2(remain[11]),
        .I3(remain[7]),
        .O(sl_pktend_n_reg_i_9_n_0));
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    sl_pktend_n_reg_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(sl_pktend_n_reg_i_1_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(sl_pktend_n_reg));
  LUT6 #(
    .INIT(64'hFFFFBEFFAAAAAAAA)) 
    sl_rd_n_reg_i_1
       (.I0(SL_RD_N_i_2_n_0),
        .I1(state[2]),
        .I2(state[1]),
        .I3(\state[0]_i_3_n_0 ),
        .I4(state[0]),
        .I5(sl_rd_n_reg),
        .O(sl_rd_n_reg_i_1_n_0));
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    sl_rd_n_reg_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(sl_rd_n_reg_i_1_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(sl_rd_n_reg));
  LUT6 #(
    .INIT(64'h0000F100F1F1F1F1)) 
    sl_wr_n_reg_i_1
       (.I0(SL_WR_N_i_4_n_0),
        .I1(sl_wr_n_reg_i_2_n_0),
        .I2(SL_WR_N_i_2_n_0),
        .I3(sl_wr_n_reg),
        .I4(SL_WR_N_i_5_n_0),
        .I5(SL_WR_N_i_6_n_0),
        .O(sl_wr_n_reg_i_1_n_0));
  LUT6 #(
    .INIT(64'h8808BB3BBB0BBB0B)) 
    sl_wr_n_reg_i_2
       (.I0(\SL_DT_O[31]_i_5_n_0 ),
        .I1(SL_WR_N_i_7_n_0),
        .I2(f2u_rd_data[33]),
        .I3(sl_pktend_n_reg_i_4_n_0),
        .I4(sl_wr_n_reg),
        .I5(f2u_rd_empty),
        .O(sl_wr_n_reg_i_2_n_0));
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b1)) 
    sl_wr_n_reg_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .D(sl_wr_n_reg_i_1_n_0),
        .PRE(u_cu2f_i_1_n_0),
        .Q(sl_wr_n_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEAEE)) 
    \state[0]_i_1 
       (.I0(\state[0]_i_2_n_0 ),
        .I1(\state[0]_i_3_n_0 ),
        .I2(\state[0]_i_4_n_0 ),
        .I3(\state[0]_i_5_n_0 ),
        .I4(\state[0]_i_6_n_0 ),
        .I5(\state[0]_i_7_n_0 ),
        .O(\state[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h4000)) 
    \state[0]_i_10 
       (.I0(SL_PRE_FULL_N),
        .I1(SL_FULL_N),
        .I2(state[0]),
        .I3(state[1]),
        .O(\state[0]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000BF1F)) 
    \state[0]_i_11 
       (.I0(sl_mode_reg[1]),
        .I1(sl_mode_reg[0]),
        .I2(state[0]),
        .I3(mask[1]),
        .I4(SL_RD_N_i_3_n_0),
        .I5(\state[0]_i_13_n_0 ),
        .O(\state[0]_i_11_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \state[0]_i_12 
       (.I0(ctl_cmd[2]),
        .I1(ctl_cmd[3]),
        .I2(ctl_cmd[1]),
        .O(\state[0]_i_12_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \state[0]_i_13 
       (.I0(state[1]),
        .I1(sl_mode_reg[0]),
        .I2(mask[0]),
        .O(\state[0]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hF200F200F2000000)) 
    \state[0]_i_2 
       (.I0(\state[0]_i_8_n_0 ),
        .I1(\state[0]_i_9_n_0 ),
        .I2(\state[0]_i_10_n_0 ),
        .I3(\state[2]_i_5_n_0 ),
        .I4(state[2]),
        .I5(\state[4]_i_12_n_0 ),
        .O(\state[0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \state[0]_i_3 
       (.I0(state[3]),
        .I1(state[4]),
        .O(\state[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000305555)) 
    \state[0]_i_4 
       (.I0(\state[0]_i_11_n_0 ),
        .I1(\state[1]_i_11_n_0 ),
        .I2(\state[0]_i_12_n_0 ),
        .I3(state[1]),
        .I4(state[2]),
        .I5(state[0]),
        .O(\state[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0C2EFFFFFFFFFFFF)) 
    \state[0]_i_5 
       (.I0(SL_PRE_EMPTY_N),
        .I1(\cnt[14]_i_11_n_0 ),
        .I2(sl_mode_reg[1]),
        .I3(sl_pktend_n_reg_i_4_n_0),
        .I4(\state[4]_i_12_n_0 ),
        .I5(state[2]),
        .O(\state[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008000000)) 
    \state[0]_i_6 
       (.I0(\state[1]_i_9_n_0 ),
        .I1(state[4]),
        .I2(state[3]),
        .I3(state[0]),
        .I4(state[2]),
        .I5(state[1]),
        .O(\state[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hA2AA80AAA2888088)) 
    \state[0]_i_7 
       (.I0(\state[3]_i_18_n_0 ),
        .I1(state[1]),
        .I2(\state[4]_i_14_n_0 ),
        .I3(state[0]),
        .I4(f2u_rd_empty),
        .I5(SL_FULL_N),
        .O(\state[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h01111111FFFFFFFF)) 
    \state[0]_i_8 
       (.I0(state[1]),
        .I1(\SL_DT_O[24]_i_3_n_0 ),
        .I2(\state[4]_i_17_n_0 ),
        .I3(sl_mode_reg[1]),
        .I4(sl_mode_reg[0]),
        .I5(state[0]),
        .O(\state[0]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h80AA80008A8A8A8A)) 
    \state[0]_i_9 
       (.I0(\state[3]_i_15_n_0 ),
        .I1(\state[4]_i_17_n_0 ),
        .I2(sl_mode_reg[1]),
        .I3(f2u_rd_empty),
        .I4(SL_PRE_FULL_N),
        .I5(SL_FULL_N),
        .O(\state[0]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFD0FFD0FFFFFFD0)) 
    \state[1]_i_1 
       (.I0(\state[1]_i_2_n_0 ),
        .I1(\state[1]_i_3_n_0 ),
        .I2(\state[4]_i_5_n_0 ),
        .I3(\state[1]_i_4_n_0 ),
        .I4(\state[1]_i_5_n_0 ),
        .I5(\state[1]_i_6_n_0 ),
        .O(\state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000400040004)) 
    \state[1]_i_10 
       (.I0(state[4]),
        .I1(state[3]),
        .I2(\state[1]_i_13_n_0 ),
        .I3(state[2]),
        .I4(state[0]),
        .I5(state[1]),
        .O(\state[1]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \state[1]_i_11 
       (.I0(ctl_cmd[0]),
        .I1(\cnt[15]_i_6_n_0 ),
        .O(\state[1]_i_11_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \state[1]_i_12 
       (.I0(state[1]),
        .I1(state[0]),
        .O(\state[1]_i_12_n_0 ));
  LUT5 #(
    .INIT(32'h00101111)) 
    \state[1]_i_13 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(sl_mode_reg[0]),
        .I3(SL_EMPTY_N),
        .I4(\state[1]_i_14_n_0 ),
        .O(\state[1]_i_13_n_0 ));
  LUT4 #(
    .INIT(16'hA8FF)) 
    \state[1]_i_14 
       (.I0(timeout[2]),
        .I1(timeout[0]),
        .I2(timeout[1]),
        .I3(SL_EMPTY_N),
        .O(\state[1]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF8FFFFFFF)) 
    \state[1]_i_2 
       (.I0(timeout[1]),
        .I1(timeout[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(SL_FULL_N),
        .I5(SL_PRE_FULL_N),
        .O(\state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2222222220222020)) 
    \state[1]_i_3 
       (.I0(\state[1]_i_7_n_0 ),
        .I1(\state[1]_i_8_n_0 ),
        .I2(f2u_rd_empty),
        .I3(SL_PRE_FULL_N),
        .I4(state[1]),
        .I5(\state[1]_i_9_n_0 ),
        .O(\state[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF3440000)) 
    \state[1]_i_4 
       (.I0(\cnt[15]_i_8_n_0 ),
        .I1(state[0]),
        .I2(\state[4]_i_14_n_0 ),
        .I3(state[1]),
        .I4(\state[3]_i_18_n_0 ),
        .I5(\state[1]_i_10_n_0 ),
        .O(\state[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00000040FFFFFFFF)) 
    \state[1]_i_5 
       (.I0(\state[1]_i_11_n_0 ),
        .I1(state[2]),
        .I2(ctl_cmd[1]),
        .I3(ctl_cmd[2]),
        .I4(ctl_cmd[3]),
        .I5(\state[1]_i_12_n_0 ),
        .O(\state[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF00FF40FF00FF)) 
    \state[1]_i_6 
       (.I0(\cnt[14]_i_11_n_0 ),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(state[2]),
        .I3(\state[0]_i_3_n_0 ),
        .I4(state[1]),
        .I5(state[0]),
        .O(\state[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h5CDC5CDCFFFF5CDC)) 
    \state[1]_i_7 
       (.I0(\state[4]_i_17_n_0 ),
        .I1(state[1]),
        .I2(sl_mode_reg[1]),
        .I3(sl_mode_reg[0]),
        .I4(SL_FULL_N),
        .I5(f2u_rd_empty),
        .O(\state[1]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF00800080FFFF)) 
    \state[1]_i_8 
       (.I0(f2u_rd_empty),
        .I1(SL_FULL_N),
        .I2(SL_PRE_FULL_N),
        .I3(sl_mode_reg[1]),
        .I4(state[0]),
        .I5(state[1]),
        .O(\state[1]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \state[1]_i_9 
       (.I0(SL_FULL_N),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .O(\state[1]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF7500)) 
    \state[2]_i_1 
       (.I0(\state[2]_i_2_n_0 ),
        .I1(\state[2]_i_3_n_0 ),
        .I2(\state[2]_i_4_n_0 ),
        .I3(\state[2]_i_5_n_0 ),
        .I4(\state[2]_i_6_n_0 ),
        .I5(\state[2]_i_7_n_0 ),
        .O(\state[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h4000)) 
    \state[2]_i_10 
       (.I0(sl_mode_reg[1]),
        .I1(SL_PRE_FULL_N),
        .I2(SL_FULL_N),
        .I3(f2u_rd_empty),
        .O(\state[2]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h55FD000055FD55FD)) 
    \state[2]_i_11 
       (.I0(state[0]),
        .I1(\cnt[15]_i_8_n_0 ),
        .I2(SL_PRE_FULL_N),
        .I3(\state[2]_i_14_n_0 ),
        .I4(\state[2]_i_15_n_0 ),
        .I5(\state[2]_i_16_n_0 ),
        .O(\state[2]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h0151)) 
    \state[2]_i_12 
       (.I0(state[0]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(\cnt[14]_i_11_n_0 ),
        .I3(sl_mode_reg[1]),
        .O(\state[2]_i_12_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \state[2]_i_13 
       (.I0(timeout[2]),
        .I1(timeout[1]),
        .O(\state[2]_i_13_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \state[2]_i_14 
       (.I0(f2u_rd_empty),
        .I1(state[2]),
        .O(\state[2]_i_14_n_0 ));
  LUT3 #(
    .INIT(8'h54)) 
    \state[2]_i_15 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(SL_FULL_N),
        .O(\state[2]_i_15_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \state[2]_i_16 
       (.I0(state[1]),
        .I1(state[2]),
        .O(\state[2]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hFF1FFFFFFF1FFF00)) 
    \state[2]_i_2 
       (.I0(timeout[1]),
        .I1(timeout[0]),
        .I2(timeout[2]),
        .I3(\state[2]_i_8_n_0 ),
        .I4(SL_EMPTY_N),
        .I5(sl_mode_reg[0]),
        .O(\state[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA8A8AAA8AAA8AAA8)) 
    \state[2]_i_3 
       (.I0(\state[2]_i_9_n_0 ),
        .I1(state[0]),
        .I2(\state[2]_i_10_n_0 ),
        .I3(\state[3]_i_8_n_0 ),
        .I4(\state[4]_i_11_n_0 ),
        .I5(SL_FULL_N),
        .O(\state[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAA20AAAAAAAAAAAA)) 
    \state[2]_i_4 
       (.I0(state[2]),
        .I1(f2u_rd_empty),
        .I2(SL_FULL_N),
        .I3(state[1]),
        .I4(state[0]),
        .I5(\state[3]_i_8_n_0 ),
        .O(\state[2]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \state[2]_i_5 
       (.I0(state[3]),
        .I1(state[4]),
        .O(\state[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFE00FE00FE00)) 
    \state[2]_i_6 
       (.I0(\state[4]_i_12_n_0 ),
        .I1(state[2]),
        .I2(\state[2]_i_11_n_0 ),
        .I3(\SL_AD[1]_i_2_n_0 ),
        .I4(\control_flit[31]_i_1_n_0 ),
        .I5(\control_flit[31]_i_3_n_0 ),
        .O(\state[2]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h0000FE0E)) 
    \state[2]_i_7 
       (.I0(\cnt[15]_i_3_n_0 ),
        .I1(state[0]),
        .I2(state[1]),
        .I3(\state[2]_i_12_n_0 ),
        .I4(\cnt[15]_i_2_n_0 ),
        .O(\state[2]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \state[2]_i_8 
       (.I0(state[0]),
        .I1(state[2]),
        .I2(state[1]),
        .O(\state[2]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA2AAAAA)) 
    \state[2]_i_9 
       (.I0(state[1]),
        .I1(state[2]),
        .I2(state[0]),
        .I3(SL_PRE_FULL_N),
        .I4(SL_FULL_N),
        .I5(\state[2]_i_13_n_0 ),
        .O(\state[2]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF44F4)) 
    \state[3]_i_1 
       (.I0(\state[3]_i_2_n_0 ),
        .I1(\state[4]_i_5_n_0 ),
        .I2(\state[3]_i_3_n_0 ),
        .I3(\state[3]_i_4_n_0 ),
        .I4(\state[3]_i_5_n_0 ),
        .I5(\state[3]_i_6_n_0 ),
        .O(\state[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00B0FFFF)) 
    \state[3]_i_10 
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(state[3]),
        .I2(SL_PRE_FULL_N),
        .I3(f2u_rd_empty),
        .I4(SL_FULL_N),
        .O(\state[3]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \state[3]_i_11 
       (.I0(\state[4]_i_17_n_0 ),
        .I1(sl_mode_reg[0]),
        .O(\state[3]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'hAA80)) 
    \state[3]_i_12 
       (.I0(\state[3]_i_21_n_0 ),
        .I1(mask[1]),
        .I2(sl_mode_reg[1]),
        .I3(state[3]),
        .O(\state[3]_i_12_n_0 ));
  LUT3 #(
    .INIT(8'hFB)) 
    \state[3]_i_13 
       (.I0(state[0]),
        .I1(state[2]),
        .I2(state[1]),
        .O(\state[3]_i_13_n_0 ));
  LUT5 #(
    .INIT(32'h01400100)) 
    \state[3]_i_14 
       (.I0(ctl_cmd[1]),
        .I1(ctl_cmd[0]),
        .I2(ctl_cmd[2]),
        .I3(ctl_cmd[3]),
        .I4(\cnt[15]_i_6_n_0 ),
        .O(\state[3]_i_14_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \state[3]_i_15 
       (.I0(state[1]),
        .I1(state[2]),
        .O(\state[3]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFCFFFC88)) 
    \state[3]_i_16 
       (.I0(SL_PRE_EMPTY_N),
        .I1(state[3]),
        .I2(sl_mode_reg[1]),
        .I3(\cnt[14]_i_11_n_0 ),
        .I4(sl_pktend_n_reg_i_4_n_0),
        .I5(state[0]),
        .O(\state[3]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'h0110011100000000)) 
    \state[3]_i_17 
       (.I0(state[4]),
        .I1(state[2]),
        .I2(state[0]),
        .I3(state[1]),
        .I4(\state[3]_i_22_n_0 ),
        .I5(state[3]),
        .O(\state[3]_i_17_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \state[3]_i_18 
       (.I0(state[3]),
        .I1(state[4]),
        .I2(state[2]),
        .O(\state[3]_i_18_n_0 ));
  LUT3 #(
    .INIT(8'h4F)) 
    \state[3]_i_19 
       (.I0(\cnt[15]_i_8_n_0 ),
        .I1(SL_PRE_FULL_N),
        .I2(state[0]),
        .O(\state[3]_i_19_n_0 ));
  LUT6 #(
    .INIT(64'h00000000BFBF8FBF)) 
    \state[3]_i_2 
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(\SL_DT_O[24]_i_3_n_0 ),
        .I2(\state[3]_i_7_n_0 ),
        .I3(state[3]),
        .I4(\state[3]_i_8_n_0 ),
        .I5(\state[3]_i_9_n_0 ),
        .O(\state[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \state[3]_i_20 
       (.I0(ctl_cmd[1]),
        .I1(ctl_cmd[2]),
        .I2(ctl_cmd[0]),
        .O(\state[3]_i_20_n_0 ));
  LUT6 #(
    .INIT(64'h000000003323FFEF)) 
    \state[3]_i_21 
       (.I0(sl_mode_reg[1]),
        .I1(sl_mode_reg[0]),
        .I2(SL_EMPTY_N),
        .I3(cmd_wr_fullN),
        .I4(mask[0]),
        .I5(\state[2]_i_8_n_0 ),
        .O(\state[3]_i_21_n_0 ));
  LUT6 #(
    .INIT(64'hE0FFE0FFE000E0FF)) 
    \state[3]_i_22 
       (.I0(timeout[1]),
        .I1(timeout[0]),
        .I2(timeout[2]),
        .I3(SL_EMPTY_N),
        .I4(sl_mode_reg[0]),
        .I5(sl_mode_reg[1]),
        .O(\state[3]_i_22_n_0 ));
  LUT6 #(
    .INIT(64'h7730753030307530)) 
    \state[3]_i_3 
       (.I0(SL_FULL_N),
        .I1(\state[3]_i_10_n_0 ),
        .I2(\state[4]_i_11_n_0 ),
        .I3(state[3]),
        .I4(sl_mode_reg[1]),
        .I5(\state[3]_i_11_n_0 ),
        .O(\state[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    \state[3]_i_4 
       (.I0(state[2]),
        .I1(state[4]),
        .I2(state[3]),
        .I3(state[1]),
        .I4(state[0]),
        .O(\state[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA8A888A888A88)) 
    \state[3]_i_5 
       (.I0(\state[0]_i_3_n_0 ),
        .I1(\state[3]_i_12_n_0 ),
        .I2(\state[3]_i_13_n_0 ),
        .I3(\state[3]_i_14_n_0 ),
        .I4(\state[3]_i_15_n_0 ),
        .I5(\state[3]_i_16_n_0 ),
        .O(\state[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAEEEAEEAAAAAAAAA)) 
    \state[3]_i_6 
       (.I0(\state[3]_i_17_n_0 ),
        .I1(\state[3]_i_18_n_0 ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(SL_FULL_N),
        .I5(\state[3]_i_19_n_0 ),
        .O(\state[3]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \state[3]_i_7 
       (.I0(state[0]),
        .I1(state[1]),
        .O(\state[3]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'h8A)) 
    \state[3]_i_8 
       (.I0(sl_mode_reg[1]),
        .I1(sl_mode_reg[0]),
        .I2(\state[4]_i_17_n_0 ),
        .O(\state[3]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h0111FFFF01110111)) 
    \state[3]_i_9 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(ctl_cmd[3]),
        .I3(\state[3]_i_20_n_0 ),
        .I4(\state[1]_i_2_n_0 ),
        .I5(state[3]),
        .O(\state[3]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFE00FFFFFE00FE00)) 
    \state[4]_i_1 
       (.I0(\state[4]_i_2_n_0 ),
        .I1(\state[4]_i_3_n_0 ),
        .I2(\state[4]_i_4_n_0 ),
        .I3(\state[4]_i_5_n_0 ),
        .I4(\state[4]_i_6_n_0 ),
        .I5(state[4]),
        .O(\state[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h4FFF)) 
    \state[4]_i_10 
       (.I0(sl_mode_reg[0]),
        .I1(state[4]),
        .I2(\state[4]_i_17_n_0 ),
        .I3(sl_mode_reg[1]),
        .O(\state[4]_i_10_n_0 ));
  LUT3 #(
    .INIT(8'h1F)) 
    \state[4]_i_11 
       (.I0(sl_mode_reg[1]),
        .I1(SL_PRE_FULL_N),
        .I2(f2u_rd_empty),
        .O(\state[4]_i_11_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \state[4]_i_12 
       (.I0(state[1]),
        .I1(state[0]),
        .O(\state[4]_i_12_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \state[4]_i_13 
       (.I0(state[1]),
        .I1(state[0]),
        .O(\state[4]_i_13_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \state[4]_i_14 
       (.I0(\state[4]_i_18_n_0 ),
        .I1(\state[4]_i_19_n_0 ),
        .I2(cnt[2]),
        .I3(cnt[3]),
        .O(\state[4]_i_14_n_0 ));
  LUT4 #(
    .INIT(16'h40FF)) 
    \state[4]_i_15 
       (.I0(state[1]),
        .I1(state[2]),
        .I2(state[0]),
        .I3(state[4]),
        .O(\state[4]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'hEEFEFFFEEEFEEEFE)) 
    \state[4]_i_16 
       (.I0(state[2]),
        .I1(state[1]),
        .I2(SL_FULL_N),
        .I3(state[0]),
        .I4(\cnt[15]_i_8_n_0 ),
        .I5(SL_PRE_FULL_N),
        .O(\state[4]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    \state[4]_i_17 
       (.I0(cnt[1]),
        .I1(cnt[0]),
        .I2(\state[4]_i_20_n_0 ),
        .I3(\state[4]_i_19_n_0 ),
        .I4(\state[4]_i_21_n_0 ),
        .I5(\state[4]_i_22_n_0 ),
        .O(\state[4]_i_17_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \state[4]_i_18 
       (.I0(cnt[10]),
        .I1(cnt[11]),
        .I2(cnt[8]),
        .I3(cnt[9]),
        .I4(\state[4]_i_21_n_0 ),
        .O(\state[4]_i_18_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \state[4]_i_19 
       (.I0(cnt[7]),
        .I1(cnt[6]),
        .I2(cnt[5]),
        .I3(cnt[4]),
        .O(\state[4]_i_19_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000BF8F)) 
    \state[4]_i_2 
       (.I0(sl_pktend_n_reg_i_4_n_0),
        .I1(\SL_DT_O[24]_i_3_n_0 ),
        .I2(state[0]),
        .I3(\state[4]_i_7_n_0 ),
        .I4(\state[4]_i_8_n_0 ),
        .I5(state[1]),
        .O(\state[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \state[4]_i_20 
       (.I0(cnt[2]),
        .I1(cnt[3]),
        .O(\state[4]_i_20_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \state[4]_i_21 
       (.I0(cnt[14]),
        .I1(cnt[15]),
        .I2(cnt[13]),
        .I3(cnt[12]),
        .O(\state[4]_i_21_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \state[4]_i_22 
       (.I0(cnt[9]),
        .I1(cnt[8]),
        .I2(cnt[11]),
        .I3(cnt[10]),
        .O(\state[4]_i_22_n_0 ));
  LUT6 #(
    .INIT(64'hAE00AE00AE000000)) 
    \state[4]_i_3 
       (.I0(\state[4]_i_9_n_0 ),
        .I1(\state[4]_i_10_n_0 ),
        .I2(\state[4]_i_11_n_0 ),
        .I3(\state[4]_i_12_n_0 ),
        .I4(SL_FULL_N),
        .I5(\state[4]_i_7_n_0 ),
        .O(\state[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAA8AAA8AAA8AA)) 
    \state[4]_i_4 
       (.I0(\state[4]_i_13_n_0 ),
        .I1(state[4]),
        .I2(SL_PRE_FULL_N),
        .I3(SL_FULL_N),
        .I4(timeout[1]),
        .I5(timeout[2]),
        .O(\state[4]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \state[4]_i_5 
       (.I0(state[3]),
        .I1(state[2]),
        .I2(state[4]),
        .O(\state[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAAAABFFFAAAAAAAA)) 
    \state[4]_i_6 
       (.I0(state[3]),
        .I1(\state[4]_i_13_n_0 ),
        .I2(\cnt[15]_i_9_n_0 ),
        .I3(\state[4]_i_14_n_0 ),
        .I4(\state[4]_i_15_n_0 ),
        .I5(\state[4]_i_16_n_0 ),
        .O(\state[4]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h7F50)) 
    \state[4]_i_7 
       (.I0(\state[4]_i_17_n_0 ),
        .I1(sl_mode_reg[0]),
        .I2(sl_mode_reg[1]),
        .I3(state[4]),
        .O(\state[4]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'h55555551)) 
    \state[4]_i_8 
       (.I0(state[0]),
        .I1(ctl_cmd[3]),
        .I2(ctl_cmd[1]),
        .I3(ctl_cmd[2]),
        .I4(ctl_cmd[0]),
        .O(\state[4]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h00E0FFFF)) 
    \state[4]_i_9 
       (.I0(state[4]),
        .I1(sl_pktend_n_reg_i_4_n_0),
        .I2(SL_PRE_FULL_N),
        .I3(f2u_rd_empty),
        .I4(SL_FULL_N),
        .O(\state[4]_i_9_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[0] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\state[0]_i_1_n_0 ),
        .Q(state[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\state[1]_i_1_n_0 ),
        .Q(state[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[2] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\state[2]_i_1_n_0 ),
        .Q(state[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[3] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\state[3]_i_1_n_0 ),
        .Q(state[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[4] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\state[4]_i_1_n_0 ),
        .Q(state[4]));
  LUT6 #(
    .INIT(64'h00D7FFFF00D70000)) 
    \timeout[0]_i_1 
       (.I0(\timeout[2]_i_2_n_0 ),
        .I1(timeout[0]),
        .I2(\timeout[1]_i_2_n_0 ),
        .I3(\timeout[0]_i_2_n_0 ),
        .I4(g0_b0__0_n_0),
        .I5(timeout[0]),
        .O(\timeout[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \timeout[0]_i_2 
       (.I0(state[4]),
        .I1(state[2]),
        .I2(state[3]),
        .O(\timeout[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA208FFFFA2080000)) 
    \timeout[1]_i_1 
       (.I0(\timeout[2]_i_2_n_0 ),
        .I1(timeout[0]),
        .I2(\timeout[1]_i_2_n_0 ),
        .I3(timeout[1]),
        .I4(g0_b0__0_n_0),
        .I5(timeout[1]),
        .O(\timeout[1]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \timeout[1]_i_2 
       (.I0(state[2]),
        .I1(state[0]),
        .O(\timeout[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2A80FFFF2A800000)) 
    \timeout[2]_i_1 
       (.I0(\timeout[2]_i_2_n_0 ),
        .I1(\timeout[2]_i_3_n_0 ),
        .I2(timeout[1]),
        .I3(timeout[2]),
        .I4(g0_b0__0_n_0),
        .I5(timeout[2]),
        .O(\timeout[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAA80AAAAAA)) 
    \timeout[2]_i_2 
       (.I0(\state[2]_i_5_n_0 ),
        .I1(sl_mode_reg[1]),
        .I2(f2u_rd_empty),
        .I3(\timeout[2]_i_4_n_0 ),
        .I4(state[2]),
        .I5(state[0]),
        .O(\timeout[2]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h8A)) 
    \timeout[2]_i_3 
       (.I0(timeout[0]),
        .I1(state[0]),
        .I2(state[2]),
        .O(\timeout[2]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \timeout[2]_i_4 
       (.I0(SL_FULL_N),
        .I1(SL_PRE_FULL_N),
        .O(\timeout[2]_i_4_n_0 ));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \timeout_reg[0] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\timeout[0]_i_1_n_0 ),
        .Q(timeout[0]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \timeout_reg[1] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\timeout[1]_i_1_n_0 ),
        .Q(timeout[1]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \timeout_reg[2] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\timeout[2]_i_1_n_0 ),
        .Q(timeout[2]));
  LUT2 #(
    .INIT(4'h2)) 
    \u2f_wr_data[31]_i_1 
       (.I0(fifo_sel[0]),
        .I1(fifo_sel[1]),
        .O(\u2f_wr_data[31]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[0] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[0]),
        .Q(u2f_wr_data[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[10] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[10]),
        .Q(u2f_wr_data[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[11] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[11]),
        .Q(u2f_wr_data[11]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[12] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[12]),
        .Q(u2f_wr_data[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[13] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[13]),
        .Q(u2f_wr_data[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[14] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[14]),
        .Q(u2f_wr_data[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[15] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[15]),
        .Q(u2f_wr_data[15]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[16] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[16]),
        .Q(u2f_wr_data[16]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[17] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[17]),
        .Q(u2f_wr_data[17]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[18] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[18]),
        .Q(u2f_wr_data[18]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[19] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[19]),
        .Q(u2f_wr_data[19]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[1] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[1]),
        .Q(u2f_wr_data[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[20] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[20]),
        .Q(u2f_wr_data[20]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[21] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[21]),
        .Q(u2f_wr_data[21]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[22] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[22]),
        .Q(u2f_wr_data[22]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[23] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[23]),
        .Q(u2f_wr_data[23]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[24] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[24]),
        .Q(u2f_wr_data[24]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[25] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[25]),
        .Q(u2f_wr_data[25]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[26] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[26]),
        .Q(u2f_wr_data[26]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[27] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[27]),
        .Q(u2f_wr_data[27]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[28] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[28]),
        .Q(u2f_wr_data[28]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[29] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[29]),
        .Q(u2f_wr_data[29]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[2] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[2]),
        .Q(u2f_wr_data[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[30] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[30]),
        .Q(u2f_wr_data[30]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[31] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[31]),
        .Q(u2f_wr_data[31]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[3] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[3]),
        .Q(u2f_wr_data[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[4] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[4]),
        .Q(u2f_wr_data[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[5] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[5]),
        .Q(u2f_wr_data[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[6] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[6]),
        .Q(u2f_wr_data[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[7] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[7]),
        .Q(u2f_wr_data[7]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[8] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[8]),
        .Q(u2f_wr_data[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \u2f_wr_data_reg[9] 
       (.C(f2u_rd_clk),
        .CE(\u2f_wr_data[31]_i_1_n_0 ),
        .CLR(cmd_wr_valid_i_2_n_0),
        .D(SL_DT_I[9]),
        .Q(u2f_wr_data[9]));
  LUT3 #(
    .INIT(8'h04)) 
    u2f_wr_valid_i_1
       (.I0(fifo_sel[1]),
        .I1(fifo_sel[0]),
        .I2(SL_RD_N1),
        .O(u2f_wr_valid_i_1_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    u2f_wr_valid_reg
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(u2f_wr_valid_i_1_n_0),
        .Q(u2f_wr_valid));
  (* DEPTH_FIFO = "512" *) 
  (* WIDTH_FIFO = "32" *) 
  gpif2mst_gpif2mst_async__xdcDup__1 u_cu2f
       (.empty(cmd_rd_empty),
        .emptyN(NLW_u_cu2f_emptyN_UNCONNECTED),
        .full(cmd_wr_full),
        .fullN(cmd_wr_fullN),
        .items(cmd_rd_items),
        .rd_clk(cmd_rd_clk),
        .rd_data(cmd_rd_data),
        .rd_ready(cmd_rd_ready),
        .rd_valid(cmd_rd_valid),
        .rooms(cmd_wr_rooms),
        .rst(u_cu2f_i_1_n_0),
        .wr_clk(cmd_wr_clk),
        .wr_data(cmd_wr_data),
        .wr_ready(cmd_wr_ready),
        .wr_valid(cmd_wr_valid));
  LUT1 #(
    .INIT(2'h1)) 
    u_cu2f_i_1
       (.I0(SYS_RST_N),
        .O(u_cu2f_i_1_n_0));
  (* DEPTH_FIFO = "512" *) 
  (* WIDTH_FIFO = "34" *) 
  gpif2mst_gpif2mst_async__parameterized0 u_df2u
       (.empty(f2u_rd_empty),
        .emptyN(f2u_rd_emptyN),
        .full(f2u_wr_full),
        .fullN(NLW_u_df2u_fullN_UNCONNECTED),
        .items(f2u_rd_items),
        .rd_clk(f2u_rd_clk),
        .rd_data(f2u_rd_data),
        .rd_ready(f2u_rd_ready),
        .rd_valid(f2u_rd_valid),
        .rooms(f2u_wr_rooms),
        .rst(u_cu2f_i_1_n_0),
        .wr_clk(f2u_wr_clk),
        .wr_data(f2u_wr_data),
        .wr_ready(f2u_wr_ready),
        .wr_valid(f2u_wr_valid));
  (* DEPTH_FIFO = "512" *) 
  (* WIDTH_FIFO = "32" *) 
  gpif2mst_gpif2mst_async u_du2f
       (.empty(u2f_rd_empty),
        .emptyN(NLW_u_du2f_emptyN_UNCONNECTED),
        .full(u2f_wr_full),
        .fullN(u2f_wr_fullN),
        .items(u2f_rd_items),
        .rd_clk(u2f_rd_clk),
        .rd_data(u2f_rd_data),
        .rd_ready(u2f_rd_ready),
        .rd_valid(u2f_rd_valid),
        .rooms(u2f_wr_rooms),
        .rst(u_cu2f_i_1_n_0),
        .wr_clk(u2f_wr_clk),
        .wr_data(u2f_wr_data),
        .wr_ready(u2f_wr_ready),
        .wr_valid(u2f_wr_valid));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \written[0]_i_1 
       (.I0(\written[15]_i_3_n_0 ),
        .I1(\written_reg[3]_i_2_n_7 ),
        .O(\written[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \written[10]_i_1 
       (.I0(\written[15]_i_3_n_0 ),
        .I1(\written_reg[11]_i_2_n_5 ),
        .O(\written[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \written[11]_i_1 
       (.I0(\written_reg[11]_i_2_n_4 ),
        .I1(\written[15]_i_3_n_0 ),
        .O(\written[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \written[12]_i_1 
       (.I0(\written[15]_i_3_n_0 ),
        .I1(\written_reg[15]_i_2_n_7 ),
        .O(\written[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \written[13]_i_1 
       (.I0(\written_reg[15]_i_2_n_6 ),
        .I1(\written[15]_i_3_n_0 ),
        .O(\written[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \written[14]_i_1 
       (.I0(\written[15]_i_3_n_0 ),
        .I1(\written_reg[15]_i_2_n_5 ),
        .O(\written[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \written[15]_i_1 
       (.I0(\written_reg[15]_i_2_n_4 ),
        .I1(\written[15]_i_3_n_0 ),
        .O(\written[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000001FFFFFFFF)) 
    \written[15]_i_3 
       (.I0(state[0]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[3]),
        .I4(state[4]),
        .I5(sl_pktend_n_reg),
        .O(\written[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \written[1]_i_1 
       (.I0(\written_reg[3]_i_2_n_6 ),
        .I1(\written[15]_i_3_n_0 ),
        .O(\written[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \written[2]_i_1 
       (.I0(\written[15]_i_3_n_0 ),
        .I1(\written_reg[3]_i_2_n_5 ),
        .O(\written[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \written[3]_i_1 
       (.I0(\written_reg[3]_i_2_n_4 ),
        .I1(\written[15]_i_3_n_0 ),
        .O(\written[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \written[3]_i_3 
       (.I0(written[0]),
        .I1(sl_wr_n_reg),
        .O(\written[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \written[4]_i_1 
       (.I0(\written[15]_i_3_n_0 ),
        .I1(\written_reg[7]_i_2_n_7 ),
        .O(\written[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \written[5]_i_1 
       (.I0(\written_reg[7]_i_2_n_6 ),
        .I1(\written[15]_i_3_n_0 ),
        .O(\written[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \written[6]_i_1 
       (.I0(\written[15]_i_3_n_0 ),
        .I1(\written_reg[7]_i_2_n_5 ),
        .O(\written[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \written[7]_i_1 
       (.I0(\written_reg[7]_i_2_n_4 ),
        .I1(\written[15]_i_3_n_0 ),
        .O(\written[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \written[8]_i_1 
       (.I0(\written[15]_i_3_n_0 ),
        .I1(\written_reg[11]_i_2_n_7 ),
        .O(\written[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \written[9]_i_1 
       (.I0(\written_reg[11]_i_2_n_6 ),
        .I1(\written[15]_i_3_n_0 ),
        .O(\written[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[0] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[0]_i_1_n_0 ),
        .Q(written[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[10] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[10]_i_1_n_0 ),
        .Q(written[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[11] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[11]_i_1_n_0 ),
        .Q(written[11]));
  CARRY4 \written_reg[11]_i_2 
       (.CI(\written_reg[7]_i_2_n_0 ),
        .CO({\written_reg[11]_i_2_n_0 ,\written_reg[11]_i_2_n_1 ,\written_reg[11]_i_2_n_2 ,\written_reg[11]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\written_reg[11]_i_2_n_4 ,\written_reg[11]_i_2_n_5 ,\written_reg[11]_i_2_n_6 ,\written_reg[11]_i_2_n_7 }),
        .S(written[11:8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[12] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[12]_i_1_n_0 ),
        .Q(written[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[13] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[13]_i_1_n_0 ),
        .Q(written[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[14] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[14]_i_1_n_0 ),
        .Q(written[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[15] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[15]_i_1_n_0 ),
        .Q(written[15]));
  CARRY4 \written_reg[15]_i_2 
       (.CI(\written_reg[11]_i_2_n_0 ),
        .CO({\NLW_written_reg[15]_i_2_CO_UNCONNECTED [3],\written_reg[15]_i_2_n_1 ,\written_reg[15]_i_2_n_2 ,\written_reg[15]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\written_reg[15]_i_2_n_4 ,\written_reg[15]_i_2_n_5 ,\written_reg[15]_i_2_n_6 ,\written_reg[15]_i_2_n_7 }),
        .S(written[15:12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[1] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[1]_i_1_n_0 ),
        .Q(written[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[2] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[2]_i_1_n_0 ),
        .Q(written[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[3] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[3]_i_1_n_0 ),
        .Q(written[3]));
  CARRY4 \written_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\written_reg[3]_i_2_n_0 ,\written_reg[3]_i_2_n_1 ,\written_reg[3]_i_2_n_2 ,\written_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,written[0]}),
        .O({\written_reg[3]_i_2_n_4 ,\written_reg[3]_i_2_n_5 ,\written_reg[3]_i_2_n_6 ,\written_reg[3]_i_2_n_7 }),
        .S({written[3:1],\written[3]_i_3_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[4] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[4]_i_1_n_0 ),
        .Q(written[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[5] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[5]_i_1_n_0 ),
        .Q(written[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[6] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[6]_i_1_n_0 ),
        .Q(written[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[7] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[7]_i_1_n_0 ),
        .Q(written[7]));
  CARRY4 \written_reg[7]_i_2 
       (.CI(\written_reg[3]_i_2_n_0 ),
        .CO({\written_reg[7]_i_2_n_0 ,\written_reg[7]_i_2_n_1 ,\written_reg[7]_i_2_n_2 ,\written_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\written_reg[7]_i_2_n_4 ,\written_reg[7]_i_2_n_5 ,\written_reg[7]_i_2_n_6 ,\written_reg[7]_i_2_n_7 }),
        .S(written[7:4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[8] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[8]_i_1_n_0 ),
        .Q(written[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \written_reg[9] 
       (.C(f2u_rd_clk),
        .CE(1'b1),
        .CLR(u_cu2f_i_1_n_0),
        .D(\written[9]_i_1_n_0 ),
        .Q(written[9]));
endmodule

(* CHECK_LICENSE_TYPE = "gpif2mst_async_32x512,fifo_generator_v13_2_1,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "fifo_generator_v13_2_1,Vivado 2017.4" *) 
module gpif2mst_async_32x512
   (m_aclk,
    s_aclk,
    s_aresetn,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_prog_full,
    axis_prog_empty);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 master_aclk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME master_aclk, ASSOCIATED_BUSIF M_AXIS:M_AXI, FREQ_HZ 100000000, PHASE 0.000" *) input m_aclk;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 slave_aclk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME slave_aclk, ASSOCIATED_BUSIF S_AXIS:S_AXI, ASSOCIATED_RESET s_aresetn, FREQ_HZ 100000000, PHASE 0.000" *) input s_aclk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 slave_aresetn RST" *) (* x_interface_parameter = "XIL_INTERFACENAME slave_aresetn, POLARITY ACTIVE_LOW" *) input s_aresetn;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S_AXIS TVALID" *) (* x_interface_parameter = "XIL_INTERFACENAME S_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 100000000, PHASE 0.000, LAYERED_METADATA undef" *) input s_axis_tvalid;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S_AXIS TREADY" *) output s_axis_tready;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S_AXIS TDATA" *) input [31:0]s_axis_tdata;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M_AXIS TVALID" *) (* x_interface_parameter = "XIL_INTERFACENAME M_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 100000000, PHASE 0.000, LAYERED_METADATA undef" *) output m_axis_tvalid;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M_AXIS TREADY" *) input m_axis_tready;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M_AXIS TDATA" *) output [31:0]m_axis_tdata;
  output [9:0]axis_wr_data_count;
  output [9:0]axis_rd_data_count;
  output axis_prog_full;
  output axis_prog_empty;

  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_empty_UNCONNECTED;
  wire NLW_U0_full_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_data_count_UNCONNECTED;
  wire [17:0]NLW_U0_dout_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [9:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [9:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "32" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "1" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "10" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "18" *) 
  (* C_DIN_WIDTH_AXIS = "32" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "18" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "0" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "1" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "11" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "12" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "11" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "12" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "11" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "12" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "1" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "4kx4" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "13" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1021" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "13" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1021" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "13" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "1" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "508" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "1" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "10" *) 
  (* C_RD_DEPTH = "1024" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "10" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "10" *) 
  (* C_WR_DEPTH = "1024" *) 
  (* C_WR_DEPTH_AXIS = "512" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "10" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "9" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  gpif2mst_async_32x512_fifo_generator_v13_2_1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[9:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(axis_prog_empty),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(axis_prog_full),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(axis_wr_data_count),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[9:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dout(NLW_U0_dout_UNCONNECTED[17:0]),
        .empty(NLW_U0_empty_UNCONNECTED),
        .full(NLW_U0_full_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(m_aclk),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(m_axis_tready),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[0]),
        .m_axis_tvalid(m_axis_tvalid),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[9:0]),
        .rd_en(1'b0),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(1'b0),
        .s_aclk(s_aclk),
        .s_aclk_en(1'b0),
        .s_aresetn(s_aresetn),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(1'b0),
        .s_axis_tready(s_axis_tready),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser(1'b0),
        .s_axis_tvalid(s_axis_tvalid),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[9:0]),
        .wr_en(1'b0),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "9" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module gpif2mst_async_32x512_xpm_cdc_gray
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [8:0]src_in_bin;
  input dest_clk;
  output [8:0]dest_out_bin;

  wire [8:0]async_path;
  wire [7:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[1] ;
  wire [8:0]dest_out_bin;
  wire \dest_out_bin_ff[0]_i_2_n_0 ;
  wire \dest_out_bin_ff[1]_i_2_n_0 ;
  wire [7:0]gray_enc;
  wire src_clk;
  wire [8:0]src_in_bin;

  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [0]),
        .I2(\dest_out_bin_ff[0]_i_2_n_0 ),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [8]),
        .I5(\dest_graysync_ff[1] [2]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_2 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [6]),
        .O(\dest_out_bin_ff[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_out_bin_ff[1]_i_2_n_0 ),
        .I3(binval[7]),
        .I4(\dest_graysync_ff[1] [2]),
        .I5(\dest_graysync_ff[1] [1]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[1]_i_2 
       (.I0(\dest_graysync_ff[1] [6]),
        .I1(\dest_graysync_ff[1] [5]),
        .O(\dest_out_bin_ff[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(binval[7]),
        .I2(\dest_graysync_ff[1] [6]),
        .I3(\dest_graysync_ff[1] [5]),
        .I4(\dest_graysync_ff[1] [4]),
        .I5(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [7]),
        .I1(\dest_graysync_ff[1] [8]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [6]),
        .I5(\dest_graysync_ff[1] [5]),
        .O(binval[3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[4]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [5]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [6]),
        .O(binval[4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[5]_i_1 
       (.I0(\dest_graysync_ff[1] [7]),
        .I1(\dest_graysync_ff[1] [8]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [6]),
        .O(binval[5]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[6]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [6]),
        .I2(\dest_graysync_ff[1] [7]),
        .O(binval[6]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[7]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [7]),
        .O(binval[7]));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[5]),
        .Q(dest_out_bin[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[6]),
        .Q(dest_out_bin[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[7]),
        .Q(dest_out_bin[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(dest_out_bin[8]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[0]),
        .I1(src_in_bin[1]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[2]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[3]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[4]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[5]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[6]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[7]),
        .O(gray_enc[6]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[8]),
        .O(gray_enc[7]));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[8]),
        .Q(async_path[8]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "9" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module gpif2mst_async_32x512_xpm_cdc_gray__1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [8:0]src_in_bin;
  input dest_clk;
  output [8:0]dest_out_bin;

  wire [8:0]async_path;
  wire [7:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[1] ;
  wire [8:0]dest_out_bin;
  wire \dest_out_bin_ff[0]_i_2_n_0 ;
  wire \dest_out_bin_ff[1]_i_2_n_0 ;
  wire [7:0]gray_enc;
  wire src_clk;
  wire [8:0]src_in_bin;

  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [0]),
        .I2(\dest_out_bin_ff[0]_i_2_n_0 ),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [8]),
        .I5(\dest_graysync_ff[1] [2]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_2 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [6]),
        .O(\dest_out_bin_ff[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_out_bin_ff[1]_i_2_n_0 ),
        .I3(binval[7]),
        .I4(\dest_graysync_ff[1] [2]),
        .I5(\dest_graysync_ff[1] [1]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[1]_i_2 
       (.I0(\dest_graysync_ff[1] [6]),
        .I1(\dest_graysync_ff[1] [5]),
        .O(\dest_out_bin_ff[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(binval[7]),
        .I2(\dest_graysync_ff[1] [6]),
        .I3(\dest_graysync_ff[1] [5]),
        .I4(\dest_graysync_ff[1] [4]),
        .I5(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [7]),
        .I1(\dest_graysync_ff[1] [8]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [6]),
        .I5(\dest_graysync_ff[1] [5]),
        .O(binval[3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[4]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [5]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [6]),
        .O(binval[4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[5]_i_1 
       (.I0(\dest_graysync_ff[1] [7]),
        .I1(\dest_graysync_ff[1] [8]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [6]),
        .O(binval[5]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[6]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [6]),
        .I2(\dest_graysync_ff[1] [7]),
        .O(binval[6]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[7]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [7]),
        .O(binval[7]));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[5]),
        .Q(dest_out_bin[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[6]),
        .Q(dest_out_bin[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[7]),
        .Q(dest_out_bin[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(dest_out_bin[8]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[0]),
        .I1(src_in_bin[1]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[2]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[3]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[4]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[5]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[6]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[7]),
        .O(gray_enc[6]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[8]),
        .O(gray_enc[7]));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[8]),
        .Q(async_path[8]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module gpif2mst_async_32x512_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module gpif2mst_async_32x512_xpm_cdc_single__1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module gpif2mst_async_32x512_xpm_cdc_sync_rst
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module gpif2mst_async_32x512_xpm_cdc_sync_rst__1
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* CHECK_LICENSE_TYPE = "gpif2mst_async_34x512,fifo_generator_v13_2_1,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "fifo_generator_v13_2_1,Vivado 2017.4" *) 
module gpif2mst_async_34x512
   (m_aclk,
    s_aclk,
    s_aresetn,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tuser,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_prog_full,
    axis_prog_empty);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 master_aclk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME master_aclk, ASSOCIATED_BUSIF M_AXIS:M_AXI, FREQ_HZ 100000000, PHASE 0.000" *) input m_aclk;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 slave_aclk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME slave_aclk, ASSOCIATED_BUSIF S_AXIS:S_AXI, ASSOCIATED_RESET s_aresetn, FREQ_HZ 100000000, PHASE 0.000" *) input s_aclk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 slave_aresetn RST" *) (* x_interface_parameter = "XIL_INTERFACENAME slave_aresetn, POLARITY ACTIVE_LOW" *) input s_aresetn;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S_AXIS TVALID" *) (* x_interface_parameter = "XIL_INTERFACENAME S_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 2, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 100000000, PHASE 0.000, LAYERED_METADATA undef" *) input s_axis_tvalid;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S_AXIS TREADY" *) output s_axis_tready;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S_AXIS TDATA" *) input [31:0]s_axis_tdata;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 S_AXIS TUSER" *) input [1:0]s_axis_tuser;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M_AXIS TVALID" *) (* x_interface_parameter = "XIL_INTERFACENAME M_AXIS, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 2, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 100000000, PHASE 0.000, LAYERED_METADATA undef" *) output m_axis_tvalid;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M_AXIS TREADY" *) input m_axis_tready;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M_AXIS TDATA" *) output [31:0]m_axis_tdata;
  (* x_interface_info = "xilinx.com:interface:axis:1.0 M_AXIS TUSER" *) output [1:0]m_axis_tuser;
  output [9:0]axis_wr_data_count;
  output [9:0]axis_rd_data_count;
  output axis_prog_full;
  output axis_prog_empty;

  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tready;
  wire [1:0]m_axis_tuser;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_almost_full_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_empty_UNCONNECTED;
  wire NLW_U0_full_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_valid_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [9:0]NLW_U0_data_count_UNCONNECTED;
  wire [17:0]NLW_U0_dout_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [9:0]NLW_U0_rd_data_count_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;
  wire [9:0]NLW_U0_wr_data_count_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "32" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "4" *) 
  (* C_AXIS_TSTRB_WIDTH = "4" *) 
  (* C_AXIS_TUSER_WIDTH = "2" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "10" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "18" *) 
  (* C_DIN_WIDTH_AXIS = "34" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "32" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "18" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "0" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "1" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "0" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "0" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "0" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "0" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "11" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "12" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "11" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "12" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "11" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "12" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "1" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "1" *) 
  (* C_PRELOAD_REGS = "0" *) 
  (* C_PRIM_FIFO_TYPE = "4kx4" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "13" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1021" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "13" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1021" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "13" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "1" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "508" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "1" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "10" *) 
  (* C_RD_DEPTH = "1024" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "10" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "0" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "10" *) 
  (* C_WR_DEPTH = "1024" *) 
  (* C_WR_DEPTH_AXIS = "512" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "10" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "9" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  gpif2mst_async_34x512_fifo_generator_v13_2_1 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(NLW_U0_almost_full_UNCONNECTED),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[9:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(axis_prog_empty),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(axis_prog_full),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(axis_wr_data_count),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[9:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dout(NLW_U0_dout_UNCONNECTED[17:0]),
        .empty(NLW_U0_empty_UNCONNECTED),
        .full(NLW_U0_full_UNCONNECTED),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(m_aclk),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[3:0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(m_axis_tready),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[3:0]),
        .m_axis_tuser(m_axis_tuser),
        .m_axis_tvalid(m_axis_tvalid),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(1'b0),
        .rd_data_count(NLW_U0_rd_data_count_UNCONNECTED[9:0]),
        .rd_en(1'b0),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(1'b0),
        .s_aclk(s_aclk),
        .s_aclk_en(1'b0),
        .s_aresetn(s_aresetn),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tlast(1'b0),
        .s_axis_tready(s_axis_tready),
        .s_axis_tstrb({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(NLW_U0_valid_UNCONNECTED),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(1'b0),
        .wr_data_count(NLW_U0_wr_data_count_UNCONNECTED[9:0]),
        .wr_en(1'b0),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "9" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module gpif2mst_async_34x512_xpm_cdc_gray
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [8:0]src_in_bin;
  input dest_clk;
  output [8:0]dest_out_bin;

  wire [8:0]async_path;
  wire [7:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[1] ;
  wire [8:0]dest_out_bin;
  wire \dest_out_bin_ff[0]_i_2_n_0 ;
  wire \dest_out_bin_ff[1]_i_2_n_0 ;
  wire [7:0]gray_enc;
  wire src_clk;
  wire [8:0]src_in_bin;

  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [0]),
        .I2(\dest_out_bin_ff[0]_i_2_n_0 ),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [8]),
        .I5(\dest_graysync_ff[1] [2]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_2 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [6]),
        .O(\dest_out_bin_ff[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_out_bin_ff[1]_i_2_n_0 ),
        .I3(binval[7]),
        .I4(\dest_graysync_ff[1] [2]),
        .I5(\dest_graysync_ff[1] [1]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[1]_i_2 
       (.I0(\dest_graysync_ff[1] [6]),
        .I1(\dest_graysync_ff[1] [5]),
        .O(\dest_out_bin_ff[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(binval[7]),
        .I2(\dest_graysync_ff[1] [6]),
        .I3(\dest_graysync_ff[1] [5]),
        .I4(\dest_graysync_ff[1] [4]),
        .I5(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [7]),
        .I1(\dest_graysync_ff[1] [8]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [6]),
        .I5(\dest_graysync_ff[1] [5]),
        .O(binval[3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[4]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [5]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [6]),
        .O(binval[4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[5]_i_1 
       (.I0(\dest_graysync_ff[1] [7]),
        .I1(\dest_graysync_ff[1] [8]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [6]),
        .O(binval[5]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[6]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [6]),
        .I2(\dest_graysync_ff[1] [7]),
        .O(binval[6]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[7]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [7]),
        .O(binval[7]));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[5]),
        .Q(dest_out_bin[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[6]),
        .Q(dest_out_bin[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[7]),
        .Q(dest_out_bin[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(dest_out_bin[8]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[0]),
        .I1(src_in_bin[1]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[2]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[3]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[4]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[5]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[6]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[7]),
        .O(gray_enc[6]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[8]),
        .O(gray_enc[7]));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[8]),
        .Q(async_path[8]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "9" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module gpif2mst_async_34x512_xpm_cdc_gray__1
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [8:0]src_in_bin;
  input dest_clk;
  output [8:0]dest_out_bin;

  wire [8:0]async_path;
  wire [7:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [8:0]\dest_graysync_ff[1] ;
  wire [8:0]dest_out_bin;
  wire \dest_out_bin_ff[0]_i_2_n_0 ;
  wire \dest_out_bin_ff[1]_i_2_n_0 ;
  wire [7:0]gray_enc;
  wire src_clk;
  wire [8:0]src_in_bin;

  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[4]),
        .Q(\dest_graysync_ff[0] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[5]),
        .Q(\dest_graysync_ff[0] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[6]),
        .Q(\dest_graysync_ff[0] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[7]),
        .Q(\dest_graysync_ff[0] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[8]),
        .Q(\dest_graysync_ff[0] [8]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [4]),
        .Q(\dest_graysync_ff[1] [4]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [5]),
        .Q(\dest_graysync_ff[1] [5]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [6]),
        .Q(\dest_graysync_ff[1] [6]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [7]),
        .Q(\dest_graysync_ff[1] [7]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [8]),
        .Q(\dest_graysync_ff[1] [8]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [0]),
        .I2(\dest_out_bin_ff[0]_i_2_n_0 ),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [8]),
        .I5(\dest_graysync_ff[1] [2]),
        .O(binval[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_2 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [6]),
        .O(\dest_out_bin_ff[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [3]),
        .I1(\dest_graysync_ff[1] [4]),
        .I2(\dest_out_bin_ff[1]_i_2_n_0 ),
        .I3(binval[7]),
        .I4(\dest_graysync_ff[1] [2]),
        .I5(\dest_graysync_ff[1] [1]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[1]_i_2 
       (.I0(\dest_graysync_ff[1] [6]),
        .I1(\dest_graysync_ff[1] [5]),
        .O(\dest_out_bin_ff[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(binval[7]),
        .I2(\dest_graysync_ff[1] [6]),
        .I3(\dest_graysync_ff[1] [5]),
        .I4(\dest_graysync_ff[1] [4]),
        .I5(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \dest_out_bin_ff[3]_i_1 
       (.I0(\dest_graysync_ff[1] [7]),
        .I1(\dest_graysync_ff[1] [8]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [3]),
        .I4(\dest_graysync_ff[1] [6]),
        .I5(\dest_graysync_ff[1] [5]),
        .O(binval[3]));
  LUT5 #(
    .INIT(32'h96696996)) 
    \dest_out_bin_ff[4]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [5]),
        .I2(\dest_graysync_ff[1] [4]),
        .I3(\dest_graysync_ff[1] [7]),
        .I4(\dest_graysync_ff[1] [6]),
        .O(binval[4]));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[5]_i_1 
       (.I0(\dest_graysync_ff[1] [7]),
        .I1(\dest_graysync_ff[1] [8]),
        .I2(\dest_graysync_ff[1] [5]),
        .I3(\dest_graysync_ff[1] [6]),
        .O(binval[5]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[6]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [6]),
        .I2(\dest_graysync_ff[1] [7]),
        .O(binval[6]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[7]_i_1 
       (.I0(\dest_graysync_ff[1] [8]),
        .I1(\dest_graysync_ff[1] [7]),
        .O(binval[7]));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[4]),
        .Q(dest_out_bin[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[5] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[5]),
        .Q(dest_out_bin[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[6] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[6]),
        .Q(dest_out_bin[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[7] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[7]),
        .Q(dest_out_bin[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[8] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [8]),
        .Q(dest_out_bin[8]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[0]),
        .I1(src_in_bin[1]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[2]),
        .O(gray_enc[1]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[3]),
        .O(gray_enc[2]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[3]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[4]),
        .O(gray_enc[3]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[4]_i_1 
       (.I0(src_in_bin[4]),
        .I1(src_in_bin[5]),
        .O(gray_enc[4]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[5]_i_1 
       (.I0(src_in_bin[5]),
        .I1(src_in_bin[6]),
        .O(gray_enc[5]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[6]_i_1 
       (.I0(src_in_bin[6]),
        .I1(src_in_bin[7]),
        .O(gray_enc[6]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[7]_i_1 
       (.I0(src_in_bin[7]),
        .I1(src_in_bin[8]),
        .O(gray_enc[7]));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[3]),
        .Q(async_path[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[4] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[4]),
        .Q(async_path[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[5] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[5]),
        .Q(async_path[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[6] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[6]),
        .Q(async_path[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[7] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[7]),
        .Q(async_path[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[8] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[8]),
        .Q(async_path[8]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module gpif2mst_async_34x512_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "5" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module gpif2mst_async_34x512_xpm_cdc_single__1
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [4:0]syncstages_ff;

  assign dest_out = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module gpif2mst_async_34x512_xpm_cdc_sync_rst
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b1" *) (* DEST_SYNC_FF = "5" *) (* INIT = "1" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SYNC_RST" *) 
module gpif2mst_async_34x512_xpm_cdc_sync_rst__1
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [4:0]syncstages_ff;

  assign dest_rst = syncstages_ff[4];
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b1)) 
    \syncstages_ff_reg[4] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[3]),
        .Q(syncstages_ff[4]),
        .R(1'b0));
endmodule

(* DEPTH_FIFO = "512" *) (* WIDTH_FIFO = "32" *) 
module gpif2mst_gpif2mst_async
   (rst,
    wr_clk,
    wr_ready,
    wr_valid,
    wr_data,
    rd_clk,
    rd_ready,
    rd_valid,
    rd_data,
    emptyN,
    fullN,
    empty,
    full,
    items,
    rooms);
  input rst;
  input wr_clk;
  output wr_ready;
  input wr_valid;
  input [31:0]wr_data;
  input rd_clk;
  input rd_ready;
  output rd_valid;
  output [31:0]rd_data;
  output emptyN;
  output fullN;
  output empty;
  output full;
  output [15:0]items;
  output [15:0]rooms;

  wire \<const0> ;
  wire \WIDTH_32.BLK_512.u_fifo0 ;
  wire empty;
  wire emptyN;
  wire full;
  wire fullN;
  wire [9:0]\^items ;
  wire rd_clk;
  wire [31:0]rd_data;
  wire rd_ready;
  wire rd_valid;
  wire [10:0]\^rooms ;
  wire \rooms[10]_INST_0_i_1_n_0 ;
  wire rst;
  wire [9:1]witems;
  wire wr_clk;
  wire [31:0]wr_data;
  wire wr_ready;
  wire wr_valid;

  assign items[15] = \<const0> ;
  assign items[14] = \<const0> ;
  assign items[13] = \<const0> ;
  assign items[12] = \<const0> ;
  assign items[11] = \<const0> ;
  assign items[10] = \<const0> ;
  assign items[9:0] = \^items [9:0];
  assign rooms[15] = \^rooms [10];
  assign rooms[14] = \^rooms [10];
  assign rooms[13] = \^rooms [10];
  assign rooms[12] = \^rooms [10];
  assign rooms[11] = \^rooms [10];
  assign rooms[10:0] = \^rooms [10:0];
  GND GND
       (.G(\<const0> ));
  (* black_box_pad_pin = "m_aclk,s_aclk,s_aresetn,s_axis_tvalid,s_axis_tready,s_axis_tdata[31:0],m_axis_tvalid,m_axis_tready,m_axis_tdata[31:0],axis_wr_data_count[9:0],axis_rd_data_count[9:0],axis_prog_full,axis_prog_empty" *) 
  (* syn_black_box = "1" *) 
  (* x_core_info = "fifo_generator_v13_2_1,Vivado 2017.4" *) 
  gpif2mst_async_32x512 \WIDTH_32.BLK_512.u_fifo 
       (.axis_prog_empty(emptyN),
        .axis_prog_full(fullN),
        .axis_rd_data_count(\^items ),
        .axis_wr_data_count({witems,\^rooms [0]}),
        .m_aclk(rd_clk),
        .m_axis_tdata(rd_data),
        .m_axis_tready(rd_ready),
        .m_axis_tvalid(rd_valid),
        .s_aclk(wr_clk),
        .s_aresetn(\WIDTH_32.BLK_512.u_fifo0 ),
        .s_axis_tdata(wr_data),
        .s_axis_tready(wr_ready),
        .s_axis_tvalid(wr_valid));
  LUT1 #(
    .INIT(2'h1)) 
    \WIDTH_32.BLK_512.u_fifo_i_1 
       (.I0(rst),
        .O(\WIDTH_32.BLK_512.u_fifo0 ));
  LUT1 #(
    .INIT(2'h1)) 
    empty_INST_0
       (.I0(rd_valid),
        .O(empty));
  LUT1 #(
    .INIT(2'h1)) 
    full_INST_0
       (.I0(wr_ready),
        .O(full));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'hFFEF0000)) 
    \rooms[10]_INST_0 
       (.I0(witems[8]),
        .I1(witems[6]),
        .I2(\rooms[10]_INST_0_i_1_n_0 ),
        .I3(witems[7]),
        .I4(witems[9]),
        .O(\^rooms [10]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \rooms[10]_INST_0_i_1 
       (.I0(witems[4]),
        .I1(witems[2]),
        .I2(witems[1]),
        .I3(\^rooms [0]),
        .I4(witems[3]),
        .I5(witems[5]),
        .O(\rooms[10]_INST_0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rooms[1]_INST_0 
       (.I0(\^rooms [0]),
        .I1(witems[1]),
        .O(\^rooms [1]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'h1E)) 
    \rooms[2]_INST_0 
       (.I0(\^rooms [0]),
        .I1(witems[1]),
        .I2(witems[2]),
        .O(\^rooms [2]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h5556)) 
    \rooms[3]_INST_0 
       (.I0(witems[3]),
        .I1(\^rooms [0]),
        .I2(witems[1]),
        .I3(witems[2]),
        .O(\^rooms [3]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'h0001FFFE)) 
    \rooms[4]_INST_0 
       (.I0(witems[3]),
        .I1(\^rooms [0]),
        .I2(witems[1]),
        .I3(witems[2]),
        .I4(witems[4]),
        .O(\^rooms [4]));
  LUT6 #(
    .INIT(64'h00000001FFFFFFFE)) 
    \rooms[5]_INST_0 
       (.I0(witems[4]),
        .I1(witems[2]),
        .I2(witems[1]),
        .I3(\^rooms [0]),
        .I4(witems[3]),
        .I5(witems[5]),
        .O(\^rooms [5]));
  LUT2 #(
    .INIT(4'h9)) 
    \rooms[6]_INST_0 
       (.I0(\rooms[10]_INST_0_i_1_n_0 ),
        .I1(witems[6]),
        .O(\^rooms [6]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h59)) 
    \rooms[7]_INST_0 
       (.I0(witems[7]),
        .I1(\rooms[10]_INST_0_i_1_n_0 ),
        .I2(witems[6]),
        .O(\^rooms [7]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h04FB)) 
    \rooms[8]_INST_0 
       (.I0(witems[7]),
        .I1(\rooms[10]_INST_0_i_1_n_0 ),
        .I2(witems[6]),
        .I3(witems[8]),
        .O(\^rooms [8]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'hFFEF0010)) 
    \rooms[9]_INST_0 
       (.I0(witems[8]),
        .I1(witems[6]),
        .I2(\rooms[10]_INST_0_i_1_n_0 ),
        .I3(witems[7]),
        .I4(witems[9]),
        .O(\^rooms [9]));
endmodule

(* DEPTH_FIFO = "512" *) (* ORIG_REF_NAME = "gpif2mst_gpif2mst_async" *) (* WIDTH_FIFO = "34" *) 
module gpif2mst_gpif2mst_async__parameterized0
   (rst,
    wr_clk,
    wr_ready,
    wr_valid,
    wr_data,
    rd_clk,
    rd_ready,
    rd_valid,
    rd_data,
    emptyN,
    fullN,
    empty,
    full,
    items,
    rooms);
  input rst;
  input wr_clk;
  output wr_ready;
  input wr_valid;
  input [33:0]wr_data;
  input rd_clk;
  input rd_ready;
  output rd_valid;
  output [33:0]rd_data;
  output emptyN;
  output fullN;
  output empty;
  output full;
  output [15:0]items;
  output [15:0]rooms;

  wire \<const0> ;
  wire \WIDTH_34.BLK_512.u_fifo0 ;
  wire empty;
  wire emptyN;
  wire full;
  wire fullN;
  wire [9:0]\^items ;
  wire rd_clk;
  wire [33:0]rd_data;
  wire rd_ready;
  wire rd_valid;
  wire [10:0]\^rooms ;
  wire \rooms[10]_INST_0_i_1_n_0 ;
  wire rst;
  wire [9:1]witems;
  wire wr_clk;
  wire [33:0]wr_data;
  wire wr_ready;
  wire wr_valid;

  assign items[15] = \<const0> ;
  assign items[14] = \<const0> ;
  assign items[13] = \<const0> ;
  assign items[12] = \<const0> ;
  assign items[11] = \<const0> ;
  assign items[10] = \<const0> ;
  assign items[9:0] = \^items [9:0];
  assign rooms[15] = \^rooms [10];
  assign rooms[14] = \^rooms [10];
  assign rooms[13] = \^rooms [10];
  assign rooms[12] = \^rooms [10];
  assign rooms[11] = \^rooms [10];
  assign rooms[10:0] = \^rooms [10:0];
  GND GND
       (.G(\<const0> ));
  (* black_box_pad_pin = "m_aclk,s_aclk,s_aresetn,s_axis_tvalid,s_axis_tready,s_axis_tdata[31:0],s_axis_tuser[1:0],m_axis_tvalid,m_axis_tready,m_axis_tdata[31:0],m_axis_tuser[1:0],axis_wr_data_count[9:0],axis_rd_data_count[9:0],axis_prog_full,axis_prog_empty" *) 
  (* syn_black_box = "1" *) 
  (* x_core_info = "fifo_generator_v13_2_1,Vivado 2017.4" *) 
  gpif2mst_async_34x512 \WIDTH_34.BLK_512.u_fifo 
       (.axis_prog_empty(emptyN),
        .axis_prog_full(fullN),
        .axis_rd_data_count(\^items ),
        .axis_wr_data_count({witems,\^rooms [0]}),
        .m_aclk(rd_clk),
        .m_axis_tdata(rd_data[31:0]),
        .m_axis_tready(rd_ready),
        .m_axis_tuser(rd_data[33:32]),
        .m_axis_tvalid(rd_valid),
        .s_aclk(wr_clk),
        .s_aresetn(\WIDTH_34.BLK_512.u_fifo0 ),
        .s_axis_tdata(wr_data[31:0]),
        .s_axis_tready(wr_ready),
        .s_axis_tuser(wr_data[33:32]),
        .s_axis_tvalid(wr_valid));
  LUT1 #(
    .INIT(2'h1)) 
    \WIDTH_34.BLK_512.u_fifo_i_1 
       (.I0(rst),
        .O(\WIDTH_34.BLK_512.u_fifo0 ));
  LUT1 #(
    .INIT(2'h1)) 
    empty_INST_0
       (.I0(rd_valid),
        .O(empty));
  LUT1 #(
    .INIT(2'h1)) 
    full_INST_0
       (.I0(wr_ready),
        .O(full));
  LUT5 #(
    .INIT(32'hAAAAA8AA)) 
    \rooms[10]_INST_0 
       (.I0(witems[9]),
        .I1(witems[8]),
        .I2(witems[6]),
        .I3(\rooms[10]_INST_0_i_1_n_0 ),
        .I4(witems[7]),
        .O(\^rooms [10]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \rooms[10]_INST_0_i_1 
       (.I0(witems[4]),
        .I1(witems[2]),
        .I2(witems[1]),
        .I3(\^rooms [0]),
        .I4(witems[3]),
        .I5(witems[5]),
        .O(\rooms[10]_INST_0_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \rooms[1]_INST_0 
       (.I0(\^rooms [0]),
        .I1(witems[1]),
        .O(\^rooms [1]));
  LUT3 #(
    .INIT(8'h1E)) 
    \rooms[2]_INST_0 
       (.I0(\^rooms [0]),
        .I1(witems[1]),
        .I2(witems[2]),
        .O(\^rooms [2]));
  LUT4 #(
    .INIT(16'h01FE)) 
    \rooms[3]_INST_0 
       (.I0(witems[2]),
        .I1(witems[1]),
        .I2(\^rooms [0]),
        .I3(witems[3]),
        .O(\^rooms [3]));
  LUT5 #(
    .INIT(32'h0001FFFE)) 
    \rooms[4]_INST_0 
       (.I0(witems[3]),
        .I1(\^rooms [0]),
        .I2(witems[1]),
        .I3(witems[2]),
        .I4(witems[4]),
        .O(\^rooms [4]));
  LUT6 #(
    .INIT(64'h00000001FFFFFFFE)) 
    \rooms[5]_INST_0 
       (.I0(witems[4]),
        .I1(witems[2]),
        .I2(witems[1]),
        .I3(\^rooms [0]),
        .I4(witems[3]),
        .I5(witems[5]),
        .O(\^rooms [5]));
  LUT2 #(
    .INIT(4'h9)) 
    \rooms[6]_INST_0 
       (.I0(\rooms[10]_INST_0_i_1_n_0 ),
        .I1(witems[6]),
        .O(\^rooms [6]));
  LUT3 #(
    .INIT(8'h4B)) 
    \rooms[7]_INST_0 
       (.I0(witems[6]),
        .I1(\rooms[10]_INST_0_i_1_n_0 ),
        .I2(witems[7]),
        .O(\^rooms [7]));
  LUT4 #(
    .INIT(16'h04FB)) 
    \rooms[8]_INST_0 
       (.I0(witems[7]),
        .I1(\rooms[10]_INST_0_i_1_n_0 ),
        .I2(witems[6]),
        .I3(witems[8]),
        .O(\^rooms [8]));
  LUT5 #(
    .INIT(32'hFFEF0010)) 
    \rooms[9]_INST_0 
       (.I0(witems[8]),
        .I1(witems[6]),
        .I2(\rooms[10]_INST_0_i_1_n_0 ),
        .I3(witems[7]),
        .I4(witems[9]),
        .O(\^rooms [9]));
endmodule

(* DEPTH_FIFO = "512" *) (* ORIG_REF_NAME = "gpif2mst_gpif2mst_async" *) (* WIDTH_FIFO = "32" *) 
module gpif2mst_gpif2mst_async__xdcDup__1
   (rst,
    wr_clk,
    wr_ready,
    wr_valid,
    wr_data,
    rd_clk,
    rd_ready,
    rd_valid,
    rd_data,
    emptyN,
    fullN,
    empty,
    full,
    items,
    rooms);
  input rst;
  input wr_clk;
  output wr_ready;
  input wr_valid;
  input [31:0]wr_data;
  input rd_clk;
  input rd_ready;
  output rd_valid;
  output [31:0]rd_data;
  output emptyN;
  output fullN;
  output empty;
  output full;
  output [15:0]items;
  output [15:0]rooms;

  wire \<const0> ;
  wire \WIDTH_32.BLK_512.u_fifo0 ;
  wire empty;
  wire emptyN;
  wire full;
  wire fullN;
  wire [9:0]\^items ;
  wire rd_clk;
  wire [31:0]rd_data;
  wire rd_ready;
  wire rd_valid;
  wire [10:0]\^rooms ;
  wire \rooms[10]_INST_0_i_1_n_0 ;
  wire rst;
  wire [9:1]witems;
  wire wr_clk;
  wire [31:0]wr_data;
  wire wr_ready;
  wire wr_valid;

  assign items[15] = \<const0> ;
  assign items[14] = \<const0> ;
  assign items[13] = \<const0> ;
  assign items[12] = \<const0> ;
  assign items[11] = \<const0> ;
  assign items[10] = \<const0> ;
  assign items[9:0] = \^items [9:0];
  assign rooms[15] = \^rooms [10];
  assign rooms[14] = \^rooms [10];
  assign rooms[13] = \^rooms [10];
  assign rooms[12] = \^rooms [10];
  assign rooms[11] = \^rooms [10];
  assign rooms[10:0] = \^rooms [10:0];
  GND GND
       (.G(\<const0> ));
  (* black_box_pad_pin = "m_aclk,s_aclk,s_aresetn,s_axis_tvalid,s_axis_tready,s_axis_tdata[31:0],m_axis_tvalid,m_axis_tready,m_axis_tdata[31:0],axis_wr_data_count[9:0],axis_rd_data_count[9:0],axis_prog_full,axis_prog_empty" *) 
  (* syn_black_box = "1" *) 
  (* x_core_info = "fifo_generator_v13_2_1,Vivado 2017.4" *) 
  gpif2mst_async_32x512 \WIDTH_32.BLK_512.u_fifo 
       (.axis_prog_empty(emptyN),
        .axis_prog_full(fullN),
        .axis_rd_data_count(\^items ),
        .axis_wr_data_count({witems,\^rooms [0]}),
        .m_aclk(rd_clk),
        .m_axis_tdata(rd_data),
        .m_axis_tready(rd_ready),
        .m_axis_tvalid(rd_valid),
        .s_aclk(wr_clk),
        .s_aresetn(\WIDTH_32.BLK_512.u_fifo0 ),
        .s_axis_tdata(wr_data),
        .s_axis_tready(wr_ready),
        .s_axis_tvalid(wr_valid));
  LUT1 #(
    .INIT(2'h1)) 
    \WIDTH_32.BLK_512.u_fifo_i_1 
       (.I0(rst),
        .O(\WIDTH_32.BLK_512.u_fifo0 ));
  LUT1 #(
    .INIT(2'h1)) 
    empty_INST_0
       (.I0(rd_valid),
        .O(empty));
  LUT1 #(
    .INIT(2'h1)) 
    full_INST_0
       (.I0(wr_ready),
        .O(full));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'hFFEF0000)) 
    \rooms[10]_INST_0 
       (.I0(witems[8]),
        .I1(witems[6]),
        .I2(\rooms[10]_INST_0_i_1_n_0 ),
        .I3(witems[7]),
        .I4(witems[9]),
        .O(\^rooms [10]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \rooms[10]_INST_0_i_1 
       (.I0(witems[4]),
        .I1(witems[2]),
        .I2(witems[1]),
        .I3(\^rooms [0]),
        .I4(witems[3]),
        .I5(witems[5]),
        .O(\rooms[10]_INST_0_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \rooms[1]_INST_0 
       (.I0(\^rooms [0]),
        .I1(witems[1]),
        .O(\^rooms [1]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h1E)) 
    \rooms[2]_INST_0 
       (.I0(\^rooms [0]),
        .I1(witems[1]),
        .I2(witems[2]),
        .O(\^rooms [2]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h5556)) 
    \rooms[3]_INST_0 
       (.I0(witems[3]),
        .I1(\^rooms [0]),
        .I2(witems[1]),
        .I3(witems[2]),
        .O(\^rooms [3]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h0001FFFE)) 
    \rooms[4]_INST_0 
       (.I0(witems[3]),
        .I1(\^rooms [0]),
        .I2(witems[1]),
        .I3(witems[2]),
        .I4(witems[4]),
        .O(\^rooms [4]));
  LUT6 #(
    .INIT(64'h00000001FFFFFFFE)) 
    \rooms[5]_INST_0 
       (.I0(witems[4]),
        .I1(witems[2]),
        .I2(witems[1]),
        .I3(\^rooms [0]),
        .I4(witems[3]),
        .I5(witems[5]),
        .O(\^rooms [5]));
  LUT2 #(
    .INIT(4'h9)) 
    \rooms[6]_INST_0 
       (.I0(\rooms[10]_INST_0_i_1_n_0 ),
        .I1(witems[6]),
        .O(\^rooms [6]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h59)) 
    \rooms[7]_INST_0 
       (.I0(witems[7]),
        .I1(\rooms[10]_INST_0_i_1_n_0 ),
        .I2(witems[6]),
        .O(\^rooms [7]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h04FB)) 
    \rooms[8]_INST_0 
       (.I0(witems[7]),
        .I1(\rooms[10]_INST_0_i_1_n_0 ),
        .I2(witems[6]),
        .I3(witems[8]),
        .O(\^rooms [8]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'hFFEF0010)) 
    \rooms[9]_INST_0 
       (.I0(witems[8]),
        .I1(witems[6]),
        .I2(\rooms[10]_INST_0_i_1_n_0 ),
        .I3(witems[7]),
        .I4(witems[9]),
        .O(\^rooms [9]));
endmodule

(* SC_CMD = "1" *) (* SC_IDLE = "0" *) (* SC_RD_WAIT = "3" *) 
(* SC_WR_WAIT = "2" *) (* SR_ARB = "1" *) (* SR_IDLE = "0" *) 
(* SR_RD0 = "2" *) (* SR_RD1 = "3" *) (* SR_RD2 = "4" *) 
(* SR_RD3 = "5" *) (* SR_RD4 = "6" *) (* SR_RD5 = "7" *) 
(* SR_RD6 = "8" *) (* SW_ARB = "1" *) (* SW_IDLE = "0" *) 
(* SW_WR0 = "2" *) (* SW_WR1 = "3" *) (* SW_WR2 = "4" *) 
(* TRANSACTOR_ID = "4'b0000" *) 
module trx_ahb
   (HRESETn,
    HCLK,
    HBUSREQ,
    HGRANT,
    HADDR,
    HPROT,
    HTRANS,
    HLOCK,
    HWRITE,
    HSIZE,
    HBURST,
    HWDATA,
    HRDATA,
    HRESP,
    HREADY,
    IRQ,
    FIQ,
    GPOUT,
    GPIN,
    transactor_sel,
    cmd_ready,
    cmd_valid,
    cmd_data,
    cmd_items,
    u2f_ready,
    u2f_valid,
    u2f_data,
    u2f_items,
    f2u_ready,
    f2u_valid,
    f2u_data,
    f2u_rooms);
  input HRESETn;
  input HCLK;
  (* mark_debug = "true" *) output HBUSREQ;
  (* mark_debug = "true" *) input HGRANT;
  (* mark_debug = "true" *) output [31:0]HADDR;
  (* mark_debug = "true" *) output [3:0]HPROT;
  (* mark_debug = "true" *) output [1:0]HTRANS;
  (* mark_debug = "true" *) output HLOCK;
  (* mark_debug = "true" *) output HWRITE;
  (* mark_debug = "true" *) output [2:0]HSIZE;
  (* mark_debug = "true" *) output [2:0]HBURST;
  (* mark_debug = "true" *) output [31:0]HWDATA;
  (* mark_debug = "true" *) input [31:0]HRDATA;
  (* mark_debug = "true" *) input [1:0]HRESP;
  (* mark_debug = "true" *) input HREADY;
  (* mark_debug = "true" *) input IRQ;
  (* mark_debug = "true" *) input FIQ;
  (* mark_debug = "true" *) output [15:0]GPOUT;
  (* mark_debug = "true" *) input [15:0]GPIN;
  (* mark_debug = "true" *) input [3:0]transactor_sel;
  (* mark_debug = "true" *) output cmd_ready;
  (* mark_debug = "true" *) input cmd_valid;
  (* mark_debug = "true" *) input [31:0]cmd_data;
  (* mark_debug = "true" *) input [15:0]cmd_items;
  (* mark_debug = "true" *) output u2f_ready;
  (* mark_debug = "true" *) input u2f_valid;
  (* mark_debug = "true" *) input [31:0]u2f_data;
  (* mark_debug = "true" *) input [15:0]u2f_items;
  (* mark_debug = "true" *) input f2u_ready;
  (* mark_debug = "true" *) output f2u_valid;
  (* mark_debug = "true" *) output [33:0]f2u_data;
  (* mark_debug = "true" *) input [15:0]f2u_rooms;

  wire \<const0> ;
  (* MARK_DEBUG *) wire [31:0]CADDR;
  wire \CADDR[0]_i_1_n_0 ;
  wire \CADDR[10]_i_1_n_0 ;
  wire \CADDR[11]_i_1_n_0 ;
  wire \CADDR[12]_i_1_n_0 ;
  wire \CADDR[13]_i_1_n_0 ;
  wire \CADDR[14]_i_1_n_0 ;
  wire \CADDR[15]_i_1_n_0 ;
  wire \CADDR[16]_i_1_n_0 ;
  wire \CADDR[17]_i_1_n_0 ;
  wire \CADDR[18]_i_1_n_0 ;
  wire \CADDR[19]_i_1_n_0 ;
  wire \CADDR[1]_i_1_n_0 ;
  wire \CADDR[20]_i_1_n_0 ;
  wire \CADDR[21]_i_1_n_0 ;
  wire \CADDR[22]_i_1_n_0 ;
  wire \CADDR[23]_i_1_n_0 ;
  wire \CADDR[24]_i_1_n_0 ;
  wire \CADDR[25]_i_1_n_0 ;
  wire \CADDR[26]_i_1_n_0 ;
  wire \CADDR[27]_i_1_n_0 ;
  wire \CADDR[28]_i_1_n_0 ;
  wire \CADDR[29]_i_1_n_0 ;
  wire \CADDR[2]_i_1_n_0 ;
  wire \CADDR[30]_i_1_n_0 ;
  wire \CADDR[31]_i_1_n_0 ;
  wire \CADDR[31]_i_2_n_0 ;
  wire \CADDR[3]_i_1_n_0 ;
  wire \CADDR[4]_i_1_n_0 ;
  wire \CADDR[5]_i_1_n_0 ;
  wire \CADDR[6]_i_1_n_0 ;
  wire \CADDR[7]_i_1_n_0 ;
  wire \CADDR[8]_i_1_n_0 ;
  wire \CADDR[9]_i_1_n_0 ;
  (* MARK_DEBUG *) wire [2:0]CBURST;
  (* MARK_DEBUG *) wire CEI;
  (* MARK_DEBUG *) wire [11:0]CLENGTH;
  (* MARK_DEBUG *) wire [1:0]CLOCK;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [31:0]CMD;
  wire CMD1;
  wire \CMD[0]_i_1_n_0 ;
  wire \CMD[10]_i_1_n_0 ;
  wire \CMD[11]_i_1_n_0 ;
  wire \CMD[12]_i_1_n_0 ;
  wire \CMD[13]_i_1_n_0 ;
  wire \CMD[14]_i_1_n_0 ;
  wire \CMD[15]_i_1_n_0 ;
  wire \CMD[16]_i_1_n_0 ;
  wire \CMD[17]_i_1_n_0 ;
  wire \CMD[18]_i_1_n_0 ;
  wire \CMD[18]_i_2_n_0 ;
  wire \CMD[18]_i_3_n_0 ;
  wire \CMD[18]_i_4_n_0 ;
  wire \CMD[18]_i_5_n_0 ;
  wire \CMD[18]_i_6_n_0 ;
  wire \CMD[18]_i_7_n_0 ;
  wire \CMD[19]_i_1_n_0 ;
  wire \CMD[1]_i_1_n_0 ;
  wire \CMD[20]_i_1_n_0 ;
  wire \CMD[21]_i_1_n_0 ;
  wire \CMD[22]_i_1_n_0 ;
  wire \CMD[23]_i_1_n_0 ;
  wire \CMD[24]_i_1_n_0 ;
  wire \CMD[25]_i_1_n_0 ;
  wire \CMD[26]_i_1_n_0 ;
  wire \CMD[27]_i_1_n_0 ;
  wire \CMD[28]_i_1_n_0 ;
  wire \CMD[29]_i_1_n_0 ;
  wire \CMD[2]_i_1_n_0 ;
  wire \CMD[30]_i_1_n_0 ;
  wire \CMD[31]_i_1_n_0 ;
  wire \CMD[3]_i_1_n_0 ;
  wire \CMD[4]_i_1_n_0 ;
  wire \CMD[5]_i_1_n_0 ;
  wire \CMD[6]_i_1_n_0 ;
  wire \CMD[7]_i_1_n_0 ;
  wire \CMD[8]_i_1_n_0 ;
  wire \CMD[9]_i_1_n_0 ;
  (* MARK_DEBUG *) wire [3:0]CPROT;
  (* MARK_DEBUG *) wire [1:0]CSIZE;
  (* MARK_DEBUG *) wire CWRITE;
  (* MARK_DEBUG *) wire FIQ;
  (* MARK_DEBUG *) wire [15:0]GPIN;
  (* MARK_DEBUG *) wire [15:0]GPOUT;
  wire \GPOUT[0]_i_1_n_0 ;
  wire \GPOUT[10]_i_1_n_0 ;
  wire \GPOUT[11]_i_1_n_0 ;
  wire \GPOUT[12]_i_1_n_0 ;
  wire \GPOUT[13]_i_1_n_0 ;
  wire \GPOUT[14]_i_1_n_0 ;
  wire \GPOUT[15]_i_1_n_0 ;
  wire \GPOUT[1]_i_1_n_0 ;
  wire \GPOUT[2]_i_1_n_0 ;
  wire \GPOUT[3]_i_1_n_0 ;
  wire \GPOUT[4]_i_1_n_0 ;
  wire \GPOUT[5]_i_1_n_0 ;
  wire \GPOUT[6]_i_1_n_0 ;
  wire \GPOUT[7]_i_1_n_0 ;
  wire \GPOUT[8]_i_1_n_0 ;
  wire \GPOUT[9]_i_1_n_0 ;
  (* MARK_DEBUG *) wire [31:0]HADDR;
  (* MARK_DEBUG *) wire [2:0]HBURST;
  (* MARK_DEBUG *) wire HBUSREQ;
  wire HCLK;
  (* MARK_DEBUG *) wire HGRANT;
  (* MARK_DEBUG *) wire [3:0]HPROT;
  (* MARK_DEBUG *) wire [31:0]HRDATA;
  (* MARK_DEBUG *) wire HREADY;
  wire HRESETn;
  (* MARK_DEBUG *) wire [1:0]HRESP;
  (* MARK_DEBUG *) wire [2:0]HSIZE;
  (* MARK_DEBUG *) wire [1:0]HTRANS;
  (* MARK_DEBUG *) wire [31:0]HWDATA;
  wire HWDATA1;
  wire \HWDATA[0]_i_1_n_0 ;
  wire \HWDATA[10]_i_1_n_0 ;
  wire \HWDATA[11]_i_1_n_0 ;
  wire \HWDATA[12]_i_1_n_0 ;
  wire \HWDATA[13]_i_1_n_0 ;
  wire \HWDATA[14]_i_1_n_0 ;
  wire \HWDATA[15]_i_1_n_0 ;
  wire \HWDATA[15]_i_2_n_0 ;
  wire \HWDATA[15]_i_3_n_0 ;
  wire \HWDATA[16]_i_1_n_0 ;
  wire \HWDATA[17]_i_1_n_0 ;
  wire \HWDATA[18]_i_1_n_0 ;
  wire \HWDATA[19]_i_1_n_0 ;
  wire \HWDATA[1]_i_1_n_0 ;
  wire \HWDATA[20]_i_1_n_0 ;
  wire \HWDATA[21]_i_1_n_0 ;
  wire \HWDATA[22]_i_1_n_0 ;
  wire \HWDATA[23]_i_1_n_0 ;
  wire \HWDATA[23]_i_2_n_0 ;
  wire \HWDATA[23]_i_4_n_0 ;
  wire \HWDATA[23]_i_5_n_0 ;
  wire \HWDATA[24]_i_1_n_0 ;
  wire \HWDATA[24]_i_2_n_0 ;
  wire \HWDATA[25]_i_1_n_0 ;
  wire \HWDATA[25]_i_2_n_0 ;
  wire \HWDATA[26]_i_1_n_0 ;
  wire \HWDATA[26]_i_2_n_0 ;
  wire \HWDATA[27]_i_1_n_0 ;
  wire \HWDATA[27]_i_2_n_0 ;
  wire \HWDATA[28]_i_1_n_0 ;
  wire \HWDATA[28]_i_2_n_0 ;
  wire \HWDATA[29]_i_1_n_0 ;
  wire \HWDATA[29]_i_2_n_0 ;
  wire \HWDATA[2]_i_1_n_0 ;
  wire \HWDATA[30]_i_1_n_0 ;
  wire \HWDATA[30]_i_2_n_0 ;
  wire \HWDATA[31]_i_2_n_0 ;
  wire \HWDATA[31]_i_3_n_0 ;
  wire \HWDATA[31]_i_4_n_0 ;
  wire \HWDATA[31]_i_5_n_0 ;
  wire \HWDATA[3]_i_1_n_0 ;
  wire \HWDATA[4]_i_1_n_0 ;
  wire \HWDATA[5]_i_1_n_0 ;
  wire \HWDATA[6]_i_1_n_0 ;
  wire \HWDATA[7]_i_1_n_0 ;
  wire \HWDATA[7]_i_2_n_0 ;
  wire \HWDATA[8]_i_1_n_0 ;
  wire \HWDATA[9]_i_1_n_0 ;
  wire HWDATA_reg0;
  (* MARK_DEBUG *) wire HWRITE;
  (* MARK_DEBUG *) wire IRQ;
  (* MARK_DEBUG *) wire [31:0]cmd_data;
  (* MARK_DEBUG *) wire [15:0]cmd_items;
  (* MARK_DEBUG *) wire cmd_ready;
  wire cmd_ready_i_1_n_0;
  wire cmd_ready_i_2_n_0;
  wire cmd_ready_i_3_n_0;
  (* MARK_DEBUG *) wire cmd_valid;
  (* MARK_DEBUG *) wire [33:0]f2u_data;
  wire \f2u_data[0]_i_1_n_0 ;
  wire \f2u_data[0]_i_2_n_0 ;
  wire \f2u_data[0]_i_3_n_0 ;
  wire \f2u_data[10]_i_1_n_0 ;
  wire \f2u_data[10]_i_2_n_0 ;
  wire \f2u_data[11]_i_1_n_0 ;
  wire \f2u_data[11]_i_2_n_0 ;
  wire \f2u_data[12]_i_1_n_0 ;
  wire \f2u_data[12]_i_2_n_0 ;
  wire \f2u_data[13]_i_1_n_0 ;
  wire \f2u_data[13]_i_2_n_0 ;
  wire \f2u_data[14]_i_1_n_0 ;
  wire \f2u_data[14]_i_2_n_0 ;
  wire \f2u_data[15]_i_1_n_0 ;
  wire \f2u_data[15]_i_2_n_0 ;
  wire \f2u_data[15]_i_3_n_0 ;
  wire \f2u_data[15]_i_4_n_0 ;
  wire \f2u_data[15]_i_5_n_0 ;
  wire \f2u_data[15]_i_6_n_0 ;
  wire \f2u_data[16]_i_1_n_0 ;
  wire \f2u_data[17]_i_1_n_0 ;
  wire \f2u_data[17]_i_2_n_0 ;
  wire \f2u_data[17]_i_3_n_0 ;
  wire \f2u_data[17]_i_4_n_0 ;
  wire \f2u_data[18]_i_1_n_0 ;
  wire \f2u_data[19]_i_1_n_0 ;
  wire \f2u_data[1]_i_1_n_0 ;
  wire \f2u_data[1]_i_2_n_0 ;
  wire \f2u_data[1]_i_3_n_0 ;
  wire \f2u_data[20]_i_1_n_0 ;
  wire \f2u_data[21]_i_1_n_0 ;
  wire \f2u_data[22]_i_1_n_0 ;
  wire \f2u_data[23]_i_1_n_0 ;
  wire \f2u_data[24]_i_1_n_0 ;
  wire \f2u_data[25]_i_1_n_0 ;
  wire \f2u_data[26]_i_1_n_0 ;
  wire \f2u_data[27]_i_1_n_0 ;
  wire \f2u_data[28]_i_1_n_0 ;
  wire \f2u_data[29]_i_1_n_0 ;
  wire \f2u_data[29]_i_2_n_0 ;
  wire \f2u_data[2]_i_1_n_0 ;
  wire \f2u_data[2]_i_2_n_0 ;
  wire \f2u_data[2]_i_3_n_0 ;
  wire \f2u_data[30]_i_1_n_0 ;
  wire \f2u_data[31]_i_1_n_0 ;
  wire \f2u_data[31]_i_2_n_0 ;
  wire \f2u_data[31]_i_3_n_0 ;
  wire \f2u_data[32]_i_1_n_0 ;
  wire \f2u_data[33]_i_1_n_0 ;
  wire \f2u_data[3]_i_1_n_0 ;
  wire \f2u_data[3]_i_2_n_0 ;
  wire \f2u_data[3]_i_3_n_0 ;
  wire \f2u_data[4]_i_1_n_0 ;
  wire \f2u_data[4]_i_2_n_0 ;
  wire \f2u_data[4]_i_3_n_0 ;
  wire \f2u_data[5]_i_1_n_0 ;
  wire \f2u_data[5]_i_2_n_0 ;
  wire \f2u_data[5]_i_3_n_0 ;
  wire \f2u_data[6]_i_1_n_0 ;
  wire \f2u_data[6]_i_2_n_0 ;
  wire \f2u_data[6]_i_3_n_0 ;
  wire \f2u_data[7]_i_1_n_0 ;
  wire \f2u_data[7]_i_2_n_0 ;
  wire \f2u_data[7]_i_3_n_0 ;
  wire \f2u_data[7]_i_4_n_0 ;
  wire \f2u_data[7]_i_5_n_0 ;
  wire \f2u_data[7]_i_6_n_0 ;
  wire \f2u_data[7]_i_7_n_0 ;
  wire \f2u_data[8]_i_1_n_0 ;
  wire \f2u_data[8]_i_2_n_0 ;
  wire \f2u_data[9]_i_1_n_0 ;
  wire \f2u_data[9]_i_2_n_0 ;
  (* MARK_DEBUG *) wire f2u_ready;
  (* MARK_DEBUG *) wire [15:0]f2u_rooms;
  (* MARK_DEBUG *) wire f2u_valid;
  wire f2u_valid_i_1_n_0;
  wire f2u_valid_i_2_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [15:0]rd_cnt;
  wire \rd_cnt[0]_i_1_n_0 ;
  wire \rd_cnt[10]_i_1_n_0 ;
  wire \rd_cnt[11]_i_1_n_0 ;
  wire \rd_cnt[12]_i_1_n_0 ;
  wire \rd_cnt[13]_i_1_n_0 ;
  wire \rd_cnt[14]_i_1_n_0 ;
  wire \rd_cnt[15]_i_1_n_0 ;
  wire \rd_cnt[15]_i_3_n_0 ;
  wire \rd_cnt[1]_i_1_n_0 ;
  wire \rd_cnt[2]_i_1_n_0 ;
  wire \rd_cnt[3]_i_1_n_0 ;
  wire \rd_cnt[3]_i_3_n_0 ;
  wire \rd_cnt[4]_i_1_n_0 ;
  wire \rd_cnt[5]_i_1_n_0 ;
  wire \rd_cnt[6]_i_1_n_0 ;
  wire \rd_cnt[7]_i_1_n_0 ;
  wire \rd_cnt[8]_i_1_n_0 ;
  wire \rd_cnt[9]_i_1_n_0 ;
  wire \rd_cnt_reg[11]_i_2_n_0 ;
  wire \rd_cnt_reg[11]_i_2_n_1 ;
  wire \rd_cnt_reg[11]_i_2_n_2 ;
  wire \rd_cnt_reg[11]_i_2_n_3 ;
  wire \rd_cnt_reg[11]_i_2_n_4 ;
  wire \rd_cnt_reg[11]_i_2_n_5 ;
  wire \rd_cnt_reg[11]_i_2_n_6 ;
  wire \rd_cnt_reg[11]_i_2_n_7 ;
  wire \rd_cnt_reg[15]_i_2_n_1 ;
  wire \rd_cnt_reg[15]_i_2_n_2 ;
  wire \rd_cnt_reg[15]_i_2_n_3 ;
  wire \rd_cnt_reg[15]_i_2_n_4 ;
  wire \rd_cnt_reg[15]_i_2_n_5 ;
  wire \rd_cnt_reg[15]_i_2_n_6 ;
  wire \rd_cnt_reg[15]_i_2_n_7 ;
  wire \rd_cnt_reg[3]_i_2_n_0 ;
  wire \rd_cnt_reg[3]_i_2_n_1 ;
  wire \rd_cnt_reg[3]_i_2_n_2 ;
  wire \rd_cnt_reg[3]_i_2_n_3 ;
  wire \rd_cnt_reg[3]_i_2_n_4 ;
  wire \rd_cnt_reg[3]_i_2_n_5 ;
  wire \rd_cnt_reg[3]_i_2_n_6 ;
  wire \rd_cnt_reg[3]_i_2_n_7 ;
  wire \rd_cnt_reg[7]_i_2_n_0 ;
  wire \rd_cnt_reg[7]_i_2_n_1 ;
  wire \rd_cnt_reg[7]_i_2_n_2 ;
  wire \rd_cnt_reg[7]_i_2_n_3 ;
  wire \rd_cnt_reg[7]_i_2_n_4 ;
  wire \rd_cnt_reg[7]_i_2_n_5 ;
  wire \rd_cnt_reg[7]_i_2_n_6 ;
  wire \rd_cnt_reg[7]_i_2_n_7 ;
  (* MARK_DEBUG *) wire [31:0]read_HADDR;
  wire \read_HADDR[0]_i_1_n_0 ;
  wire \read_HADDR[10]_i_1_n_0 ;
  wire \read_HADDR[11]_i_1_n_0 ;
  wire \read_HADDR[12]_i_1_n_0 ;
  wire \read_HADDR[13]_i_1_n_0 ;
  wire \read_HADDR[14]_i_1_n_0 ;
  wire \read_HADDR[15]_i_1_n_0 ;
  wire \read_HADDR[16]_i_1_n_0 ;
  wire \read_HADDR[17]_i_1_n_0 ;
  wire \read_HADDR[18]_i_1_n_0 ;
  wire \read_HADDR[19]_i_1_n_0 ;
  wire \read_HADDR[1]_i_1_n_0 ;
  wire \read_HADDR[20]_i_1_n_0 ;
  wire \read_HADDR[21]_i_1_n_0 ;
  wire \read_HADDR[22]_i_1_n_0 ;
  wire \read_HADDR[23]_i_1_n_0 ;
  wire \read_HADDR[24]_i_1_n_0 ;
  wire \read_HADDR[25]_i_1_n_0 ;
  wire \read_HADDR[26]_i_1_n_0 ;
  wire \read_HADDR[27]_i_1_n_0 ;
  wire \read_HADDR[28]_i_1_n_0 ;
  wire \read_HADDR[29]_i_1_n_0 ;
  wire \read_HADDR[2]_i_1_n_0 ;
  wire \read_HADDR[30]_i_1_n_0 ;
  wire \read_HADDR[31]_i_1_n_0 ;
  wire \read_HADDR[31]_i_2_n_0 ;
  wire \read_HADDR[31]_i_3_n_0 ;
  wire \read_HADDR[31]_i_5_n_0 ;
  wire \read_HADDR[31]_i_6_n_0 ;
  wire \read_HADDR[31]_i_7_n_0 ;
  wire \read_HADDR[31]_i_8_n_0 ;
  wire \read_HADDR[3]_i_1_n_0 ;
  wire \read_HADDR[3]_i_3_n_0 ;
  wire \read_HADDR[3]_i_4_n_0 ;
  wire \read_HADDR[3]_i_5_n_0 ;
  wire \read_HADDR[4]_i_1_n_0 ;
  wire \read_HADDR[5]_i_1_n_0 ;
  wire \read_HADDR[6]_i_1_n_0 ;
  wire \read_HADDR[7]_i_1_n_0 ;
  wire \read_HADDR[8]_i_1_n_0 ;
  wire \read_HADDR[9]_i_1_n_0 ;
  wire \read_HADDR_reg[11]_i_2_n_0 ;
  wire \read_HADDR_reg[11]_i_2_n_1 ;
  wire \read_HADDR_reg[11]_i_2_n_2 ;
  wire \read_HADDR_reg[11]_i_2_n_3 ;
  wire \read_HADDR_reg[11]_i_2_n_4 ;
  wire \read_HADDR_reg[11]_i_2_n_5 ;
  wire \read_HADDR_reg[11]_i_2_n_6 ;
  wire \read_HADDR_reg[11]_i_2_n_7 ;
  wire \read_HADDR_reg[15]_i_2_n_0 ;
  wire \read_HADDR_reg[15]_i_2_n_1 ;
  wire \read_HADDR_reg[15]_i_2_n_2 ;
  wire \read_HADDR_reg[15]_i_2_n_3 ;
  wire \read_HADDR_reg[15]_i_2_n_4 ;
  wire \read_HADDR_reg[15]_i_2_n_5 ;
  wire \read_HADDR_reg[15]_i_2_n_6 ;
  wire \read_HADDR_reg[15]_i_2_n_7 ;
  wire \read_HADDR_reg[19]_i_2_n_0 ;
  wire \read_HADDR_reg[19]_i_2_n_1 ;
  wire \read_HADDR_reg[19]_i_2_n_2 ;
  wire \read_HADDR_reg[19]_i_2_n_3 ;
  wire \read_HADDR_reg[19]_i_2_n_4 ;
  wire \read_HADDR_reg[19]_i_2_n_5 ;
  wire \read_HADDR_reg[19]_i_2_n_6 ;
  wire \read_HADDR_reg[19]_i_2_n_7 ;
  wire \read_HADDR_reg[23]_i_2_n_0 ;
  wire \read_HADDR_reg[23]_i_2_n_1 ;
  wire \read_HADDR_reg[23]_i_2_n_2 ;
  wire \read_HADDR_reg[23]_i_2_n_3 ;
  wire \read_HADDR_reg[23]_i_2_n_4 ;
  wire \read_HADDR_reg[23]_i_2_n_5 ;
  wire \read_HADDR_reg[23]_i_2_n_6 ;
  wire \read_HADDR_reg[23]_i_2_n_7 ;
  wire \read_HADDR_reg[27]_i_2_n_0 ;
  wire \read_HADDR_reg[27]_i_2_n_1 ;
  wire \read_HADDR_reg[27]_i_2_n_2 ;
  wire \read_HADDR_reg[27]_i_2_n_3 ;
  wire \read_HADDR_reg[27]_i_2_n_4 ;
  wire \read_HADDR_reg[27]_i_2_n_5 ;
  wire \read_HADDR_reg[27]_i_2_n_6 ;
  wire \read_HADDR_reg[27]_i_2_n_7 ;
  wire \read_HADDR_reg[31]_i_4_n_1 ;
  wire \read_HADDR_reg[31]_i_4_n_2 ;
  wire \read_HADDR_reg[31]_i_4_n_3 ;
  wire \read_HADDR_reg[31]_i_4_n_4 ;
  wire \read_HADDR_reg[31]_i_4_n_5 ;
  wire \read_HADDR_reg[31]_i_4_n_6 ;
  wire \read_HADDR_reg[31]_i_4_n_7 ;
  wire \read_HADDR_reg[3]_i_2_n_0 ;
  wire \read_HADDR_reg[3]_i_2_n_1 ;
  wire \read_HADDR_reg[3]_i_2_n_2 ;
  wire \read_HADDR_reg[3]_i_2_n_3 ;
  wire \read_HADDR_reg[3]_i_2_n_4 ;
  wire \read_HADDR_reg[3]_i_2_n_5 ;
  wire \read_HADDR_reg[3]_i_2_n_6 ;
  wire \read_HADDR_reg[3]_i_2_n_7 ;
  wire \read_HADDR_reg[7]_i_2_n_0 ;
  wire \read_HADDR_reg[7]_i_2_n_1 ;
  wire \read_HADDR_reg[7]_i_2_n_2 ;
  wire \read_HADDR_reg[7]_i_2_n_3 ;
  wire \read_HADDR_reg[7]_i_2_n_4 ;
  wire \read_HADDR_reg[7]_i_2_n_5 ;
  wire \read_HADDR_reg[7]_i_2_n_6 ;
  wire \read_HADDR_reg[7]_i_2_n_7 ;
  (* MARK_DEBUG *) wire [2:0]read_HBURST;
  wire \read_HBURST[0]_i_1_n_0 ;
  wire \read_HBURST[1]_i_1_n_0 ;
  wire \read_HBURST[2]_i_1_n_0 ;
  (* MARK_DEBUG *) wire read_HBUSREQ;
  wire read_HBUSREQ1;
  wire read_HBUSREQ2;
  wire read_HBUSREQ30_in;
  wire read_HBUSREQ_i_1_n_0;
  wire read_HBUSREQ_i_2_n_0;
  wire read_HBUSREQ_i_3_n_0;
  wire read_HBUSREQ_i_4_n_0;
  wire read_HBUSREQ_i_5_n_0;
  wire read_HBUSREQ_i_6_n_0;
  wire read_HBUSREQ_i_7_n_0;
  wire read_HBUSREQ_i_8_n_0;
  (* MARK_DEBUG *) wire [3:0]read_HPROT;
  wire \read_HPROT[0]_i_1_n_0 ;
  wire \read_HPROT[1]_i_1_n_0 ;
  wire \read_HPROT[2]_i_1_n_0 ;
  wire \read_HPROT[3]_i_1_n_0 ;
  wire \read_HPROT[3]_i_2_n_0 ;
  (* MARK_DEBUG *) wire [2:0]read_HSIZE;
  wire \read_HSIZE[0]_i_1_n_0 ;
  wire \read_HSIZE[1]_i_1_n_0 ;
  wire \read_HSIZE[2]_i_1_n_0 ;
  (* MARK_DEBUG *) wire [1:0]read_HTRANS;
  wire \read_HTRANS[0]_i_1_n_0 ;
  wire \read_HTRANS[0]_i_2_n_0 ;
  wire \read_HTRANS[0]_i_3_n_0 ;
  wire \read_HTRANS[0]_i_4_n_0 ;
  wire \read_HTRANS[1]_i_1_n_0 ;
  wire \read_HTRANS[1]_i_2_n_0 ;
  wire \read_HTRANS[1]_i_3_n_0 ;
  wire \read_HTRANS[1]_i_4_n_0 ;
  wire \read_HTRANS[1]_i_5_n_0 ;
  wire \read_HTRANS[1]_i_6_n_0 ;
  wire \read_HTRANS[1]_i_7_n_0 ;
  (* MARK_DEBUG *) wire read_HWRITE;
  wire read_HWRITE_i_1_n_0;
  wire read_HWRITE_i_3_n_0;
  wire read_HWRITE_i_4_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [12:0]read_beats;
  wire \read_beats[0]_i_1_n_0 ;
  wire \read_beats[10]_i_1_n_0 ;
  wire \read_beats[11]_i_1_n_0 ;
  wire \read_beats[12]_i_10_n_0 ;
  wire \read_beats[12]_i_11_n_0 ;
  wire \read_beats[12]_i_12_n_0 ;
  wire \read_beats[12]_i_1_n_0 ;
  wire \read_beats[12]_i_2_n_0 ;
  wire \read_beats[12]_i_4_n_0 ;
  wire \read_beats[12]_i_6_n_0 ;
  wire \read_beats[12]_i_7_n_0 ;
  wire \read_beats[12]_i_8_n_0 ;
  wire \read_beats[12]_i_9_n_0 ;
  wire \read_beats[1]_i_1_n_0 ;
  wire \read_beats[2]_i_1_n_0 ;
  wire \read_beats[2]_i_2_n_0 ;
  wire \read_beats[3]_i_1_n_0 ;
  wire \read_beats[3]_i_2_n_0 ;
  wire \read_beats[3]_i_3_n_0 ;
  wire \read_beats[4]_i_1_n_0 ;
  wire \read_beats[4]_i_3_n_0 ;
  wire \read_beats[4]_i_4_n_0 ;
  wire \read_beats[4]_i_5_n_0 ;
  wire \read_beats[4]_i_6_n_0 ;
  wire \read_beats[4]_i_7_n_0 ;
  wire \read_beats[5]_i_1_n_0 ;
  wire \read_beats[6]_i_1_n_0 ;
  wire \read_beats[7]_i_1_n_0 ;
  wire \read_beats[8]_i_1_n_0 ;
  wire \read_beats[8]_i_4_n_0 ;
  wire \read_beats[8]_i_5_n_0 ;
  wire \read_beats[8]_i_6_n_0 ;
  wire \read_beats[8]_i_7_n_0 ;
  wire \read_beats[9]_i_1_n_0 ;
  wire \read_beats_reg[12]_i_3_n_0 ;
  wire \read_beats_reg[12]_i_3_n_2 ;
  wire \read_beats_reg[12]_i_3_n_3 ;
  wire \read_beats_reg[12]_i_3_n_5 ;
  wire \read_beats_reg[12]_i_3_n_6 ;
  wire \read_beats_reg[12]_i_3_n_7 ;
  wire \read_beats_reg[12]_i_5_n_1 ;
  wire \read_beats_reg[12]_i_5_n_2 ;
  wire \read_beats_reg[12]_i_5_n_3 ;
  wire \read_beats_reg[12]_i_5_n_4 ;
  wire \read_beats_reg[12]_i_5_n_5 ;
  wire \read_beats_reg[12]_i_5_n_6 ;
  wire \read_beats_reg[12]_i_5_n_7 ;
  wire \read_beats_reg[1]_i_2_n_0 ;
  wire \read_beats_reg[1]_i_2_n_1 ;
  wire \read_beats_reg[1]_i_2_n_2 ;
  wire \read_beats_reg[1]_i_2_n_3 ;
  wire \read_beats_reg[1]_i_2_n_4 ;
  wire \read_beats_reg[1]_i_2_n_5 ;
  wire \read_beats_reg[1]_i_2_n_6 ;
  wire \read_beats_reg[1]_i_2_n_7 ;
  wire \read_beats_reg[4]_i_2_n_0 ;
  wire \read_beats_reg[4]_i_2_n_1 ;
  wire \read_beats_reg[4]_i_2_n_2 ;
  wire \read_beats_reg[4]_i_2_n_3 ;
  wire \read_beats_reg[4]_i_2_n_4 ;
  wire \read_beats_reg[4]_i_2_n_5 ;
  wire \read_beats_reg[4]_i_2_n_6 ;
  wire \read_beats_reg[4]_i_2_n_7 ;
  wire \read_beats_reg[8]_i_2_n_0 ;
  wire \read_beats_reg[8]_i_2_n_1 ;
  wire \read_beats_reg[8]_i_2_n_2 ;
  wire \read_beats_reg[8]_i_2_n_3 ;
  wire \read_beats_reg[8]_i_2_n_4 ;
  wire \read_beats_reg[8]_i_2_n_5 ;
  wire \read_beats_reg[8]_i_2_n_6 ;
  wire \read_beats_reg[8]_i_2_n_7 ;
  wire \read_beats_reg[8]_i_3_n_0 ;
  wire \read_beats_reg[8]_i_3_n_1 ;
  wire \read_beats_reg[8]_i_3_n_2 ;
  wire \read_beats_reg[8]_i_3_n_3 ;
  wire \read_beats_reg[8]_i_3_n_4 ;
  wire \read_beats_reg[8]_i_3_n_5 ;
  wire \read_beats_reg[8]_i_3_n_6 ;
  wire \read_beats_reg[8]_i_3_n_7 ;
  (* MARK_DEBUG *) wire [2:0]read_bnum;
  wire \read_bnum[0]_i_1_n_0 ;
  wire \read_bnum[1]_i_1_n_0 ;
  wire \read_bnum[2]_i_1_n_0 ;
  wire \read_bnum[2]_i_2_n_0 ;
  wire \read_bnum[2]_i_3_n_0 ;
  (* MARK_DEBUG *) wire read_done;
  wire read_done_i_1_n_0;
  wire read_done_i_2_n_0;
  wire read_done_i_3_n_0;
  wire read_done_i_4_n_0;
  wire read_done_i_5_n_0;
  (* MARK_DEBUG *) wire read_go;
  wire read_go_i_1_n_0;
  wire read_go_i_2_n_0;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [12:0]read_parts;
  wire \read_parts[0]_i_1_n_0 ;
  wire \read_parts[0]_i_2_n_0 ;
  wire \read_parts[0]_i_3_n_0 ;
  wire \read_parts[0]_i_4_n_0 ;
  wire \read_parts[10]_i_1_n_0 ;
  wire \read_parts[10]_i_2_n_0 ;
  wire \read_parts[10]_i_3_n_0 ;
  wire \read_parts[10]_i_4_n_0 ;
  wire \read_parts[10]_i_5_n_0 ;
  wire \read_parts[11]_i_1_n_0 ;
  wire \read_parts[11]_i_2_n_0 ;
  wire \read_parts[11]_i_3_n_0 ;
  wire \read_parts[11]_i_4_n_0 ;
  wire \read_parts[11]_i_5_n_0 ;
  wire \read_parts[12]_i_11_n_0 ;
  wire \read_parts[12]_i_14_n_0 ;
  wire \read_parts[12]_i_15_n_0 ;
  wire \read_parts[12]_i_17_n_0 ;
  wire \read_parts[12]_i_18_n_0 ;
  wire \read_parts[12]_i_19_n_0 ;
  wire \read_parts[12]_i_1_n_0 ;
  wire \read_parts[12]_i_20_n_0 ;
  wire \read_parts[12]_i_21_n_0 ;
  wire \read_parts[12]_i_22_n_0 ;
  wire \read_parts[12]_i_23_n_0 ;
  wire \read_parts[12]_i_24_n_0 ;
  wire \read_parts[12]_i_25_n_0 ;
  wire \read_parts[12]_i_26_n_0 ;
  wire \read_parts[12]_i_27_n_0 ;
  wire \read_parts[12]_i_28_n_0 ;
  wire \read_parts[12]_i_29_n_0 ;
  wire \read_parts[12]_i_2_n_0 ;
  wire \read_parts[12]_i_30_n_0 ;
  wire \read_parts[12]_i_31_n_0 ;
  wire \read_parts[12]_i_32_n_0 ;
  wire \read_parts[12]_i_33_n_0 ;
  wire \read_parts[12]_i_34_n_0 ;
  wire \read_parts[12]_i_35_n_0 ;
  wire \read_parts[12]_i_36_n_0 ;
  wire \read_parts[12]_i_37_n_0 ;
  wire \read_parts[12]_i_38_n_0 ;
  wire \read_parts[12]_i_39_n_0 ;
  wire \read_parts[12]_i_3_n_0 ;
  wire \read_parts[12]_i_40_n_0 ;
  wire \read_parts[12]_i_4_n_0 ;
  wire \read_parts[12]_i_5_n_0 ;
  wire \read_parts[12]_i_6_n_0 ;
  wire \read_parts[12]_i_7_n_0 ;
  wire \read_parts[12]_i_8_n_0 ;
  wire \read_parts[12]_i_9_n_0 ;
  wire \read_parts[1]_i_1_n_0 ;
  wire \read_parts[1]_i_2_n_0 ;
  wire \read_parts[1]_i_3_n_0 ;
  wire \read_parts[1]_i_4_n_0 ;
  wire \read_parts[2]_i_1_n_0 ;
  wire \read_parts[2]_i_2_n_0 ;
  wire \read_parts[2]_i_3_n_0 ;
  wire \read_parts[2]_i_4_n_0 ;
  wire \read_parts[3]_i_1_n_0 ;
  wire \read_parts[3]_i_2_n_0 ;
  wire \read_parts[3]_i_3_n_0 ;
  wire \read_parts[3]_i_4_n_0 ;
  wire \read_parts[3]_i_5_n_0 ;
  wire \read_parts[3]_i_6_n_0 ;
  wire \read_parts[4]_i_10_n_0 ;
  wire \read_parts[4]_i_11_n_0 ;
  wire \read_parts[4]_i_12_n_0 ;
  wire \read_parts[4]_i_13_n_0 ;
  wire \read_parts[4]_i_14_n_0 ;
  wire \read_parts[4]_i_15_n_0 ;
  wire \read_parts[4]_i_1_n_0 ;
  wire \read_parts[4]_i_2_n_0 ;
  wire \read_parts[4]_i_3_n_0 ;
  wire \read_parts[4]_i_4_n_0 ;
  wire \read_parts[4]_i_5_n_0 ;
  wire \read_parts[4]_i_8_n_0 ;
  wire \read_parts[4]_i_9_n_0 ;
  wire \read_parts[5]_i_1_n_0 ;
  wire \read_parts[5]_i_2_n_0 ;
  wire \read_parts[5]_i_3_n_0 ;
  wire \read_parts[5]_i_4_n_0 ;
  wire \read_parts[5]_i_5_n_0 ;
  wire \read_parts[6]_i_1_n_0 ;
  wire \read_parts[6]_i_2_n_0 ;
  wire \read_parts[6]_i_3_n_0 ;
  wire \read_parts[6]_i_4_n_0 ;
  wire \read_parts[6]_i_5_n_0 ;
  wire \read_parts[7]_i_1_n_0 ;
  wire \read_parts[7]_i_2_n_0 ;
  wire \read_parts[7]_i_3_n_0 ;
  wire \read_parts[7]_i_4_n_0 ;
  wire \read_parts[7]_i_5_n_0 ;
  wire \read_parts[8]_i_10_n_0 ;
  wire \read_parts[8]_i_11_n_0 ;
  wire \read_parts[8]_i_12_n_0 ;
  wire \read_parts[8]_i_13_n_0 ;
  wire \read_parts[8]_i_14_n_0 ;
  wire \read_parts[8]_i_15_n_0 ;
  wire \read_parts[8]_i_1_n_0 ;
  wire \read_parts[8]_i_2_n_0 ;
  wire \read_parts[8]_i_3_n_0 ;
  wire \read_parts[8]_i_4_n_0 ;
  wire \read_parts[8]_i_5_n_0 ;
  wire \read_parts[8]_i_8_n_0 ;
  wire \read_parts[8]_i_9_n_0 ;
  wire \read_parts[9]_i_1_n_0 ;
  wire \read_parts[9]_i_2_n_0 ;
  wire \read_parts[9]_i_3_n_0 ;
  wire \read_parts[9]_i_4_n_0 ;
  wire \read_parts[9]_i_5_n_0 ;
  wire \read_parts_reg[12]_i_10_n_1 ;
  wire \read_parts_reg[12]_i_10_n_2 ;
  wire \read_parts_reg[12]_i_10_n_3 ;
  wire \read_parts_reg[12]_i_12_n_1 ;
  wire \read_parts_reg[12]_i_12_n_2 ;
  wire \read_parts_reg[12]_i_12_n_3 ;
  wire \read_parts_reg[12]_i_12_n_4 ;
  wire \read_parts_reg[12]_i_12_n_5 ;
  wire \read_parts_reg[12]_i_12_n_6 ;
  wire \read_parts_reg[12]_i_12_n_7 ;
  wire \read_parts_reg[12]_i_13_n_1 ;
  wire \read_parts_reg[12]_i_13_n_2 ;
  wire \read_parts_reg[12]_i_13_n_3 ;
  wire \read_parts_reg[12]_i_13_n_4 ;
  wire \read_parts_reg[12]_i_13_n_5 ;
  wire \read_parts_reg[12]_i_13_n_6 ;
  wire \read_parts_reg[12]_i_13_n_7 ;
  wire \read_parts_reg[12]_i_16_n_0 ;
  wire \read_parts_reg[12]_i_16_n_1 ;
  wire \read_parts_reg[12]_i_16_n_2 ;
  wire \read_parts_reg[12]_i_16_n_3 ;
  wire \read_parts_reg[4]_i_6_n_0 ;
  wire \read_parts_reg[4]_i_6_n_1 ;
  wire \read_parts_reg[4]_i_6_n_2 ;
  wire \read_parts_reg[4]_i_6_n_3 ;
  wire \read_parts_reg[4]_i_6_n_4 ;
  wire \read_parts_reg[4]_i_6_n_5 ;
  wire \read_parts_reg[4]_i_6_n_6 ;
  wire \read_parts_reg[4]_i_6_n_7 ;
  wire \read_parts_reg[4]_i_7_n_0 ;
  wire \read_parts_reg[4]_i_7_n_1 ;
  wire \read_parts_reg[4]_i_7_n_2 ;
  wire \read_parts_reg[4]_i_7_n_3 ;
  wire \read_parts_reg[4]_i_7_n_4 ;
  wire \read_parts_reg[4]_i_7_n_5 ;
  wire \read_parts_reg[4]_i_7_n_6 ;
  wire \read_parts_reg[4]_i_7_n_7 ;
  wire \read_parts_reg[8]_i_6_n_0 ;
  wire \read_parts_reg[8]_i_6_n_1 ;
  wire \read_parts_reg[8]_i_6_n_2 ;
  wire \read_parts_reg[8]_i_6_n_3 ;
  wire \read_parts_reg[8]_i_6_n_4 ;
  wire \read_parts_reg[8]_i_6_n_5 ;
  wire \read_parts_reg[8]_i_6_n_6 ;
  wire \read_parts_reg[8]_i_6_n_7 ;
  wire \read_parts_reg[8]_i_7_n_0 ;
  wire \read_parts_reg[8]_i_7_n_1 ;
  wire \read_parts_reg[8]_i_7_n_2 ;
  wire \read_parts_reg[8]_i_7_n_3 ;
  wire \read_parts_reg[8]_i_7_n_4 ;
  wire \read_parts_reg[8]_i_7_n_5 ;
  wire \read_parts_reg[8]_i_7_n_6 ;
  wire \read_parts_reg[8]_i_7_n_7 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [1:0]state_cmd;
  wire \state_cmd[0]_i_1_n_0 ;
  wire \state_cmd[0]_i_2_n_0 ;
  wire \state_cmd[1]_i_1_n_0 ;
  wire \state_cmd[1]_i_2_n_0 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [3:0]state_read;
  wire \state_read[0]_i_1_n_0 ;
  wire \state_read[0]_i_2_n_0 ;
  wire \state_read[0]_i_3_n_0 ;
  wire \state_read[0]_i_4_n_0 ;
  wire \state_read[0]_i_5_n_0 ;
  wire \state_read[0]_i_6_n_0 ;
  wire \state_read[1]_i_1_n_0 ;
  wire \state_read[1]_i_2_n_0 ;
  wire \state_read[1]_i_3_n_0 ;
  wire \state_read[1]_i_4_n_0 ;
  wire \state_read[1]_i_5_n_0 ;
  wire \state_read[1]_i_6_n_0 ;
  wire \state_read[2]_i_10_n_0 ;
  wire \state_read[2]_i_11_n_0 ;
  wire \state_read[2]_i_12_n_0 ;
  wire \state_read[2]_i_13_n_0 ;
  wire \state_read[2]_i_1_n_0 ;
  wire \state_read[2]_i_2_n_0 ;
  wire \state_read[2]_i_3_n_0 ;
  wire \state_read[2]_i_4_n_0 ;
  wire \state_read[2]_i_5_n_0 ;
  wire \state_read[2]_i_6_n_0 ;
  wire \state_read[2]_i_7_n_0 ;
  wire \state_read[2]_i_8_n_0 ;
  wire \state_read[2]_i_9_n_0 ;
  wire \state_read[3]_i_1_n_0 ;
  wire \state_read[3]_i_3_n_0 ;
  wire \state_read[3]_i_4_n_0 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [2:0]state_write;
  wire \state_write[0]_i_1_n_0 ;
  wire \state_write[0]_i_2_n_0 ;
  wire \state_write[0]_i_3_n_0 ;
  wire \state_write[0]_i_4_n_0 ;
  wire \state_write[0]_i_5_n_0 ;
  wire \state_write[1]_i_1_n_0 ;
  wire \state_write[1]_i_2_n_0 ;
  wire \state_write[2]_i_1_n_0 ;
  (* MARK_DEBUG *) wire [3:0]transactor_sel;
  (* MARK_DEBUG *) wire [31:0]u2f_data;
  (* MARK_DEBUG *) wire [15:0]u2f_items;
  (* MARK_DEBUG *) wire u2f_ready;
  (* MARK_DEBUG *) wire u2f_valid;
  (* MARK_DEBUG *) wire [31:0]write_HADDR;
  wire \write_HADDR[0]_i_1_n_0 ;
  wire \write_HADDR[10]_i_1_n_0 ;
  wire \write_HADDR[11]_i_1_n_0 ;
  wire \write_HADDR[12]_i_1_n_0 ;
  wire \write_HADDR[13]_i_1_n_0 ;
  wire \write_HADDR[14]_i_1_n_0 ;
  wire \write_HADDR[15]_i_1_n_0 ;
  wire \write_HADDR[16]_i_1_n_0 ;
  wire \write_HADDR[17]_i_1_n_0 ;
  wire \write_HADDR[18]_i_1_n_0 ;
  wire \write_HADDR[19]_i_1_n_0 ;
  wire \write_HADDR[1]_i_1_n_0 ;
  wire \write_HADDR[20]_i_1_n_0 ;
  wire \write_HADDR[21]_i_1_n_0 ;
  wire \write_HADDR[22]_i_1_n_0 ;
  wire \write_HADDR[23]_i_1_n_0 ;
  wire \write_HADDR[24]_i_1_n_0 ;
  wire \write_HADDR[25]_i_1_n_0 ;
  wire \write_HADDR[26]_i_1_n_0 ;
  wire \write_HADDR[27]_i_1_n_0 ;
  wire \write_HADDR[28]_i_1_n_0 ;
  wire \write_HADDR[29]_i_1_n_0 ;
  wire \write_HADDR[2]_i_1_n_0 ;
  wire \write_HADDR[30]_i_1_n_0 ;
  wire \write_HADDR[31]_i_1_n_0 ;
  wire \write_HADDR[31]_i_2_n_0 ;
  wire \write_HADDR[31]_i_3_n_0 ;
  wire \write_HADDR[31]_i_5_n_0 ;
  wire \write_HADDR[3]_i_1_n_0 ;
  wire \write_HADDR[3]_i_3_n_0 ;
  wire \write_HADDR[3]_i_4_n_0 ;
  wire \write_HADDR[3]_i_5_n_0 ;
  wire \write_HADDR[4]_i_1_n_0 ;
  wire \write_HADDR[5]_i_1_n_0 ;
  wire \write_HADDR[6]_i_1_n_0 ;
  wire \write_HADDR[7]_i_1_n_0 ;
  wire \write_HADDR[8]_i_1_n_0 ;
  wire \write_HADDR[9]_i_1_n_0 ;
  wire \write_HADDR_reg[11]_i_2_n_0 ;
  wire \write_HADDR_reg[11]_i_2_n_1 ;
  wire \write_HADDR_reg[11]_i_2_n_2 ;
  wire \write_HADDR_reg[11]_i_2_n_3 ;
  wire \write_HADDR_reg[11]_i_2_n_4 ;
  wire \write_HADDR_reg[11]_i_2_n_5 ;
  wire \write_HADDR_reg[11]_i_2_n_6 ;
  wire \write_HADDR_reg[11]_i_2_n_7 ;
  wire \write_HADDR_reg[15]_i_2_n_0 ;
  wire \write_HADDR_reg[15]_i_2_n_1 ;
  wire \write_HADDR_reg[15]_i_2_n_2 ;
  wire \write_HADDR_reg[15]_i_2_n_3 ;
  wire \write_HADDR_reg[15]_i_2_n_4 ;
  wire \write_HADDR_reg[15]_i_2_n_5 ;
  wire \write_HADDR_reg[15]_i_2_n_6 ;
  wire \write_HADDR_reg[15]_i_2_n_7 ;
  wire \write_HADDR_reg[19]_i_2_n_0 ;
  wire \write_HADDR_reg[19]_i_2_n_1 ;
  wire \write_HADDR_reg[19]_i_2_n_2 ;
  wire \write_HADDR_reg[19]_i_2_n_3 ;
  wire \write_HADDR_reg[19]_i_2_n_4 ;
  wire \write_HADDR_reg[19]_i_2_n_5 ;
  wire \write_HADDR_reg[19]_i_2_n_6 ;
  wire \write_HADDR_reg[19]_i_2_n_7 ;
  wire \write_HADDR_reg[23]_i_2_n_0 ;
  wire \write_HADDR_reg[23]_i_2_n_1 ;
  wire \write_HADDR_reg[23]_i_2_n_2 ;
  wire \write_HADDR_reg[23]_i_2_n_3 ;
  wire \write_HADDR_reg[23]_i_2_n_4 ;
  wire \write_HADDR_reg[23]_i_2_n_5 ;
  wire \write_HADDR_reg[23]_i_2_n_6 ;
  wire \write_HADDR_reg[23]_i_2_n_7 ;
  wire \write_HADDR_reg[27]_i_2_n_0 ;
  wire \write_HADDR_reg[27]_i_2_n_1 ;
  wire \write_HADDR_reg[27]_i_2_n_2 ;
  wire \write_HADDR_reg[27]_i_2_n_3 ;
  wire \write_HADDR_reg[27]_i_2_n_4 ;
  wire \write_HADDR_reg[27]_i_2_n_5 ;
  wire \write_HADDR_reg[27]_i_2_n_6 ;
  wire \write_HADDR_reg[27]_i_2_n_7 ;
  wire \write_HADDR_reg[31]_i_4_n_1 ;
  wire \write_HADDR_reg[31]_i_4_n_2 ;
  wire \write_HADDR_reg[31]_i_4_n_3 ;
  wire \write_HADDR_reg[31]_i_4_n_4 ;
  wire \write_HADDR_reg[31]_i_4_n_5 ;
  wire \write_HADDR_reg[31]_i_4_n_6 ;
  wire \write_HADDR_reg[31]_i_4_n_7 ;
  wire \write_HADDR_reg[3]_i_2_n_0 ;
  wire \write_HADDR_reg[3]_i_2_n_1 ;
  wire \write_HADDR_reg[3]_i_2_n_2 ;
  wire \write_HADDR_reg[3]_i_2_n_3 ;
  wire \write_HADDR_reg[3]_i_2_n_4 ;
  wire \write_HADDR_reg[3]_i_2_n_5 ;
  wire \write_HADDR_reg[3]_i_2_n_6 ;
  wire \write_HADDR_reg[3]_i_2_n_7 ;
  wire \write_HADDR_reg[7]_i_2_n_0 ;
  wire \write_HADDR_reg[7]_i_2_n_1 ;
  wire \write_HADDR_reg[7]_i_2_n_2 ;
  wire \write_HADDR_reg[7]_i_2_n_3 ;
  wire \write_HADDR_reg[7]_i_2_n_4 ;
  wire \write_HADDR_reg[7]_i_2_n_5 ;
  wire \write_HADDR_reg[7]_i_2_n_6 ;
  wire \write_HADDR_reg[7]_i_2_n_7 ;
  (* MARK_DEBUG *) wire [2:0]write_HBURST;
  wire \write_HBURST[0]_i_1_n_0 ;
  wire \write_HBURST[1]_i_1_n_0 ;
  wire \write_HBURST[2]_i_1_n_0 ;
  (* MARK_DEBUG *) wire write_HBUSREQ;
  wire write_HBUSREQ119_out;
  wire write_HBUSREQ32_in;
  wire write_HBUSREQ_i_1_n_0;
  wire write_HBUSREQ_i_2_n_0;
  wire write_HBUSREQ_i_3_n_0;
  wire write_HBUSREQ_i_4_n_0;
  wire write_HBUSREQ_i_5_n_0;
  wire write_HBUSREQ_i_6_n_0;
  wire write_HBUSREQ_i_7_n_0;
  wire write_HBUSREQ_i_8_n_0;
  (* MARK_DEBUG *) wire [3:0]write_HPROT;
  wire \write_HPROT[0]_i_1_n_0 ;
  wire \write_HPROT[1]_i_1_n_0 ;
  wire \write_HPROT[2]_i_1_n_0 ;
  wire \write_HPROT[3]_i_1_n_0 ;
  (* MARK_DEBUG *) wire [2:0]write_HSIZE;
  wire \write_HSIZE[0]_i_1_n_0 ;
  wire \write_HSIZE[1]_i_1_n_0 ;
  wire \write_HSIZE[2]_i_10_n_0 ;
  wire \write_HSIZE[2]_i_11_n_0 ;
  wire \write_HSIZE[2]_i_12_n_0 ;
  wire \write_HSIZE[2]_i_13_n_0 ;
  wire \write_HSIZE[2]_i_14_n_0 ;
  wire \write_HSIZE[2]_i_15_n_0 ;
  wire \write_HSIZE[2]_i_16_n_0 ;
  wire \write_HSIZE[2]_i_17_n_0 ;
  wire \write_HSIZE[2]_i_18_n_0 ;
  wire \write_HSIZE[2]_i_19_n_0 ;
  wire \write_HSIZE[2]_i_1_n_0 ;
  wire \write_HSIZE[2]_i_20_n_0 ;
  wire \write_HSIZE[2]_i_21_n_0 ;
  wire \write_HSIZE[2]_i_22_n_0 ;
  wire \write_HSIZE[2]_i_23_n_0 ;
  wire \write_HSIZE[2]_i_24_n_0 ;
  wire \write_HSIZE[2]_i_3_n_0 ;
  wire \write_HSIZE[2]_i_4_n_0 ;
  wire \write_HSIZE[2]_i_5_n_0 ;
  wire \write_HSIZE[2]_i_7_n_0 ;
  wire \write_HSIZE[2]_i_9_n_0 ;
  wire \write_HSIZE_reg[2]_i_6_n_1 ;
  wire \write_HSIZE_reg[2]_i_6_n_2 ;
  wire \write_HSIZE_reg[2]_i_6_n_3 ;
  wire \write_HSIZE_reg[2]_i_8_n_0 ;
  wire \write_HSIZE_reg[2]_i_8_n_1 ;
  wire \write_HSIZE_reg[2]_i_8_n_2 ;
  wire \write_HSIZE_reg[2]_i_8_n_3 ;
  (* MARK_DEBUG *) wire [1:0]write_HTRANS;
  (* MARK_DEBUG *) wire write_HWRITE;
  wire write_HWRITE_i_1_n_0;
  (* MARK_DEBUG *) wire [12:0]write_beats;
  wire \write_beats[0]_i_1_n_0 ;
  wire \write_beats[10]_i_1_n_0 ;
  wire \write_beats[11]_i_1_n_0 ;
  wire \write_beats[11]_i_3_n_0 ;
  wire \write_beats[11]_i_4_n_0 ;
  wire \write_beats[11]_i_5_n_0 ;
  wire \write_beats[11]_i_6_n_0 ;
  wire \write_beats[12]_i_1_n_0 ;
  wire \write_beats[12]_i_2_n_0 ;
  wire \write_beats[12]_i_3_n_0 ;
  wire \write_beats[12]_i_4_n_0 ;
  wire \write_beats[12]_i_6_n_0 ;
  wire \write_beats[12]_i_7_n_0 ;
  wire \write_beats[12]_i_8_n_0 ;
  wire \write_beats[1]_i_1_n_0 ;
  wire \write_beats[2]_i_1_n_0 ;
  wire \write_beats[3]_i_1_n_0 ;
  wire \write_beats[3]_i_3_n_0 ;
  wire \write_beats[3]_i_4_n_0 ;
  wire \write_beats[3]_i_5_n_0 ;
  wire \write_beats[3]_i_6_n_0 ;
  wire \write_beats[4]_i_1_n_0 ;
  wire \write_beats[4]_i_2_n_0 ;
  wire \write_beats[4]_i_3_n_0 ;
  wire \write_beats[5]_i_1_n_0 ;
  wire \write_beats[6]_i_1_n_0 ;
  wire \write_beats[7]_i_1_n_0 ;
  wire \write_beats[7]_i_3_n_0 ;
  wire \write_beats[7]_i_4_n_0 ;
  wire \write_beats[7]_i_5_n_0 ;
  wire \write_beats[7]_i_6_n_0 ;
  wire \write_beats[8]_i_1_n_0 ;
  wire \write_beats[9]_i_1_n_0 ;
  wire \write_beats_reg[11]_i_2_n_0 ;
  wire \write_beats_reg[11]_i_2_n_1 ;
  wire \write_beats_reg[11]_i_2_n_2 ;
  wire \write_beats_reg[11]_i_2_n_3 ;
  wire \write_beats_reg[11]_i_2_n_4 ;
  wire \write_beats_reg[11]_i_2_n_5 ;
  wire \write_beats_reg[11]_i_2_n_6 ;
  wire \write_beats_reg[11]_i_2_n_7 ;
  wire \write_beats_reg[12]_i_5_n_7 ;
  wire \write_beats_reg[3]_i_2_n_0 ;
  wire \write_beats_reg[3]_i_2_n_1 ;
  wire \write_beats_reg[3]_i_2_n_2 ;
  wire \write_beats_reg[3]_i_2_n_3 ;
  wire \write_beats_reg[3]_i_2_n_4 ;
  wire \write_beats_reg[3]_i_2_n_5 ;
  wire \write_beats_reg[3]_i_2_n_6 ;
  wire \write_beats_reg[3]_i_2_n_7 ;
  wire \write_beats_reg[7]_i_2_n_0 ;
  wire \write_beats_reg[7]_i_2_n_1 ;
  wire \write_beats_reg[7]_i_2_n_2 ;
  wire \write_beats_reg[7]_i_2_n_3 ;
  wire \write_beats_reg[7]_i_2_n_4 ;
  wire \write_beats_reg[7]_i_2_n_5 ;
  wire \write_beats_reg[7]_i_2_n_6 ;
  wire \write_beats_reg[7]_i_2_n_7 ;
  (* MARK_DEBUG *) wire [2:0]write_bnum;
  wire \write_bnum[0]_i_1_n_0 ;
  wire \write_bnum[1]_i_1_n_0 ;
  wire \write_bnum[2]_i_1_n_0 ;
  (* MARK_DEBUG *) wire write_done;
  wire write_done_i_1_n_0;
  (* MARK_DEBUG *) wire write_first;
  wire write_first_i_1_n_0;
  wire write_first_i_2_n_0;
  (* MARK_DEBUG *) wire write_go;
  wire write_go_i_1_n_0;
  wire write_go_i_2_n_0;
  wire [3:3]\NLW_rd_cnt_reg[15]_i_2_CO_UNCONNECTED ;
  wire [3:3]\NLW_read_HADDR_reg[31]_i_4_CO_UNCONNECTED ;
  wire [2:2]\NLW_read_beats_reg[12]_i_3_CO_UNCONNECTED ;
  wire [3:3]\NLW_read_beats_reg[12]_i_3_O_UNCONNECTED ;
  wire [3:3]\NLW_read_beats_reg[12]_i_5_CO_UNCONNECTED ;
  wire [3:0]\NLW_read_parts_reg[12]_i_10_O_UNCONNECTED ;
  wire [3:3]\NLW_read_parts_reg[12]_i_12_CO_UNCONNECTED ;
  wire [3:3]\NLW_read_parts_reg[12]_i_13_CO_UNCONNECTED ;
  wire [3:0]\NLW_read_parts_reg[12]_i_16_O_UNCONNECTED ;
  wire [3:3]\NLW_write_HADDR_reg[31]_i_4_CO_UNCONNECTED ;
  wire [3:0]\NLW_write_HSIZE_reg[2]_i_6_O_UNCONNECTED ;
  wire [3:0]\NLW_write_HSIZE_reg[2]_i_8_O_UNCONNECTED ;
  wire [3:0]\NLW_write_beats_reg[12]_i_5_CO_UNCONNECTED ;
  wire [3:1]\NLW_write_beats_reg[12]_i_5_O_UNCONNECTED ;

  assign HLOCK = \<const0> ;
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[0]_i_1 
       (.I0(cmd_data[0]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[0]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[10]_i_1 
       (.I0(cmd_data[10]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[10]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[10]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[11]_i_1 
       (.I0(cmd_data[11]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[11]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[12]_i_1 
       (.I0(cmd_data[12]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[12]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[13]_i_1 
       (.I0(cmd_data[13]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[13]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[14]_i_1 
       (.I0(cmd_data[14]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[14]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[15]_i_1 
       (.I0(cmd_data[15]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[15]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[16]_i_1 
       (.I0(cmd_data[16]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[16]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[16]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[17]_i_1 
       (.I0(cmd_data[17]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[17]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[18]_i_1 
       (.I0(cmd_data[18]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[18]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[19]_i_1 
       (.I0(cmd_data[19]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[19]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[19]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[1]_i_1 
       (.I0(cmd_data[1]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[1]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[20]_i_1 
       (.I0(cmd_data[20]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[20]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[21]_i_1 
       (.I0(cmd_data[21]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[21]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[22]_i_1 
       (.I0(cmd_data[22]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[22]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[23]_i_1 
       (.I0(cmd_data[23]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[23]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[23]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[24]_i_1 
       (.I0(cmd_data[24]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[24]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[25]_i_1 
       (.I0(cmd_data[25]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[25]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[26]_i_1 
       (.I0(cmd_data[26]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[26]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[27]_i_1 
       (.I0(cmd_data[27]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[27]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[28]_i_1 
       (.I0(cmd_data[28]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[28]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[29]_i_1 
       (.I0(cmd_data[29]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[29]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[29]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[2]_i_1 
       (.I0(cmd_data[2]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[2]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[30]_i_1 
       (.I0(cmd_data[30]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[30]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[30]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[31]_i_1 
       (.I0(cmd_data[31]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[31]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFF7FFFF)) 
    \CADDR[31]_i_2 
       (.I0(cmd_ready),
        .I1(cmd_valid),
        .I2(CEI),
        .I3(state_cmd[1]),
        .I4(state_cmd[0]),
        .O(\CADDR[31]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[3]_i_1 
       (.I0(cmd_data[3]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[3]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[4]_i_1 
       (.I0(cmd_data[4]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[4]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[5]_i_1 
       (.I0(cmd_data[5]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[5]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[6]_i_1 
       (.I0(cmd_data[6]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[6]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[7]_i_1 
       (.I0(cmd_data[7]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[7]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[8]_i_1 
       (.I0(cmd_data[8]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[8]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \CADDR[9]_i_1 
       (.I0(cmd_data[9]),
        .I1(write_go_i_2_n_0),
        .I2(CADDR[9]),
        .I3(\CADDR[31]_i_2_n_0 ),
        .O(\CADDR[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[0]_i_1_n_0 ),
        .Q(CADDR[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[10] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[10]_i_1_n_0 ),
        .Q(CADDR[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[11] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[11]_i_1_n_0 ),
        .Q(CADDR[11]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[12] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[12]_i_1_n_0 ),
        .Q(CADDR[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[13] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[13]_i_1_n_0 ),
        .Q(CADDR[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[14] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[14]_i_1_n_0 ),
        .Q(CADDR[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[15] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[15]_i_1_n_0 ),
        .Q(CADDR[15]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[16] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[16]_i_1_n_0 ),
        .Q(CADDR[16]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[17] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[17]_i_1_n_0 ),
        .Q(CADDR[17]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[18] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[18]_i_1_n_0 ),
        .Q(CADDR[18]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[19] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[19]_i_1_n_0 ),
        .Q(CADDR[19]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[1]_i_1_n_0 ),
        .Q(CADDR[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[20] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[20]_i_1_n_0 ),
        .Q(CADDR[20]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[21] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[21]_i_1_n_0 ),
        .Q(CADDR[21]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[22] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[22]_i_1_n_0 ),
        .Q(CADDR[22]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[23] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[23]_i_1_n_0 ),
        .Q(CADDR[23]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[24] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[24]_i_1_n_0 ),
        .Q(CADDR[24]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[25] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[25]_i_1_n_0 ),
        .Q(CADDR[25]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[26] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[26]_i_1_n_0 ),
        .Q(CADDR[26]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[27] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[27]_i_1_n_0 ),
        .Q(CADDR[27]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[28] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[28]_i_1_n_0 ),
        .Q(CADDR[28]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[29] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[29]_i_1_n_0 ),
        .Q(CADDR[29]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[2]_i_1_n_0 ),
        .Q(CADDR[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[30] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[30]_i_1_n_0 ),
        .Q(CADDR[30]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[31] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[31]_i_1_n_0 ),
        .Q(CADDR[31]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[3]_i_1_n_0 ),
        .Q(CADDR[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[4] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[4]_i_1_n_0 ),
        .Q(CADDR[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[5] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[5]_i_1_n_0 ),
        .Q(CADDR[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[6] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[6]_i_1_n_0 ),
        .Q(CADDR[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[7] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[7]_i_1_n_0 ),
        .Q(CADDR[7]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[8] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[8]_i_1_n_0 ),
        .Q(CADDR[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CADDR_reg[9] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CADDR[9]_i_1_n_0 ),
        .Q(CADDR[9]));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[0]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[0]),
        .I4(CMD[0]),
        .O(\CMD[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[10]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[10]),
        .I4(CMD[10]),
        .O(\CMD[10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[11]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[11]),
        .I4(CMD[11]),
        .O(\CMD[11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[12]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[12]),
        .I4(CMD[12]),
        .O(\CMD[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[13]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[13]),
        .I4(CMD[13]),
        .O(\CMD[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[14]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[14]),
        .I4(CMD[14]),
        .O(\CMD[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[15]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[15]),
        .I4(CMD[15]),
        .O(\CMD[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFE32FE10EE22EE00)) 
    \CMD[16]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(CMD[16]),
        .I4(write_done),
        .I5(cmd_data[16]),
        .O(\CMD[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFE98FE10EE88EE00)) 
    \CMD[17]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(CMD[17]),
        .I4(read_done),
        .I5(cmd_data[17]),
        .O(\CMD[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF32102200)) 
    \CMD[18]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(CMD[18]),
        .I4(cmd_data[18]),
        .I5(\CMD[18]_i_2_n_0 ),
        .O(\CMD[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF4C004C004C00)) 
    \CMD[18]_i_2 
       (.I0(read_done),
        .I1(CMD[18]),
        .I2(state_cmd[1]),
        .I3(state_cmd[0]),
        .I4(\CMD[18]_i_3_n_0 ),
        .I5(\CMD[18]_i_4_n_0 ),
        .O(\CMD[18]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \CMD[18]_i_3 
       (.I0(\CMD[18]_i_5_n_0 ),
        .I1(\CMD[18]_i_6_n_0 ),
        .I2(read_done),
        .I3(rd_cnt[0]),
        .I4(rd_cnt[1]),
        .O(\CMD[18]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \CMD[18]_i_4 
       (.I0(rd_cnt[14]),
        .I1(rd_cnt[15]),
        .I2(state_cmd[0]),
        .I3(state_cmd[1]),
        .I4(\CMD[18]_i_7_n_0 ),
        .O(\CMD[18]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \CMD[18]_i_5 
       (.I0(rd_cnt[9]),
        .I1(rd_cnt[8]),
        .I2(rd_cnt[7]),
        .I3(rd_cnt[6]),
        .O(\CMD[18]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \CMD[18]_i_6 
       (.I0(rd_cnt[5]),
        .I1(rd_cnt[4]),
        .I2(rd_cnt[3]),
        .I3(rd_cnt[2]),
        .O(\CMD[18]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \CMD[18]_i_7 
       (.I0(rd_cnt[13]),
        .I1(rd_cnt[12]),
        .I2(rd_cnt[11]),
        .I3(rd_cnt[10]),
        .O(\CMD[18]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[19]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[19]),
        .I4(CPROT[0]),
        .O(\CMD[19]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[1]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[1]),
        .I4(CMD[1]),
        .O(\CMD[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[20]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[20]),
        .I4(CPROT[1]),
        .O(\CMD[20]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[21]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[21]),
        .I4(CPROT[2]),
        .O(\CMD[21]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[22]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[22]),
        .I4(CPROT[3]),
        .O(\CMD[22]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[23]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[23]),
        .I4(CMD[23]),
        .O(\CMD[23]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[24]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[24]),
        .I4(CMD[24]),
        .O(\CMD[24]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[25]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[25]),
        .I4(CMD[25]),
        .O(\CMD[25]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[26]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[26]),
        .I4(CSIZE[0]),
        .O(\CMD[26]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[27]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[27]),
        .I4(CSIZE[1]),
        .O(\CMD[27]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[28]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[28]),
        .I4(CLOCK[0]),
        .O(\CMD[28]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[29]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[29]),
        .I4(CLOCK[1]),
        .O(\CMD[29]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[2]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[2]),
        .I4(CMD[2]),
        .O(\CMD[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[30]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[30]),
        .I4(CWRITE),
        .O(\CMD[30]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[31]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[31]),
        .I4(CMD[31]),
        .O(\CMD[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[3]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[3]),
        .I4(CMD[3]),
        .O(\CMD[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[4]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[4]),
        .I4(CMD[4]),
        .O(\CMD[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[5]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[5]),
        .I4(CMD[5]),
        .O(\CMD[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[6]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[6]),
        .I4(CMD[6]),
        .O(\CMD[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[7]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[7]),
        .I4(CMD[7]),
        .O(\CMD[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[8]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[8]),
        .I4(CMD[8]),
        .O(\CMD[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFEEE1000)) 
    \CMD[9]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(cmd_data[9]),
        .I4(CMD[9]),
        .O(\CMD[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[0]_i_1_n_0 ),
        .Q(CMD[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[10] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[10]_i_1_n_0 ),
        .Q(CMD[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[11] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[11]_i_1_n_0 ),
        .Q(CMD[11]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[12] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[12]_i_1_n_0 ),
        .Q(CMD[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[13] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[13]_i_1_n_0 ),
        .Q(CMD[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[14] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[14]_i_1_n_0 ),
        .Q(CMD[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[15] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[15]_i_1_n_0 ),
        .Q(CMD[15]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[16] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\CMD[16]_i_1_n_0 ),
        .Q(CMD[16]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[17] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\CMD[17]_i_1_n_0 ),
        .Q(CMD[17]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[18] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[18]_i_1_n_0 ),
        .Q(CMD[18]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[19] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[19]_i_1_n_0 ),
        .Q(CMD[19]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[1]_i_1_n_0 ),
        .Q(CMD[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[20] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[20]_i_1_n_0 ),
        .Q(CMD[20]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[21] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[21]_i_1_n_0 ),
        .Q(CMD[21]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[22] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[22]_i_1_n_0 ),
        .Q(CMD[22]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[23] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\CMD[23]_i_1_n_0 ),
        .Q(CMD[23]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[24] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\CMD[24]_i_1_n_0 ),
        .Q(CMD[24]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[25] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\CMD[25]_i_1_n_0 ),
        .Q(CMD[25]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[26] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\CMD[26]_i_1_n_0 ),
        .Q(CMD[26]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[27] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\CMD[27]_i_1_n_0 ),
        .Q(CMD[27]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[28] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[28]_i_1_n_0 ),
        .Q(CMD[28]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[29] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[29]_i_1_n_0 ),
        .Q(CMD[29]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[2]_i_1_n_0 ),
        .Q(CMD[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[30] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\CMD[30]_i_1_n_0 ),
        .Q(CMD[30]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[31] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\CMD[31]_i_1_n_0 ),
        .Q(CMD[31]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[3]_i_1_n_0 ),
        .Q(CMD[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[4] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[4]_i_1_n_0 ),
        .Q(CMD[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[5] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[5]_i_1_n_0 ),
        .Q(CMD[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[6] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[6]_i_1_n_0 ),
        .Q(CMD[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[7] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[7]_i_1_n_0 ),
        .Q(CMD[7]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[8] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[8]_i_1_n_0 ),
        .Q(CMD[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \CMD_reg[9] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\CMD[9]_i_1_n_0 ),
        .Q(CMD[9]));
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[0]_i_1 
       (.I0(CMD[0]),
        .I1(GPOUT[0]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[10]_i_1 
       (.I0(CMD[10]),
        .I1(GPOUT[10]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[11]_i_1 
       (.I0(CMD[11]),
        .I1(GPOUT[11]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[12]_i_1 
       (.I0(CMD[12]),
        .I1(GPOUT[12]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[13]_i_1 
       (.I0(CMD[13]),
        .I1(GPOUT[13]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[14]_i_1 
       (.I0(CMD[14]),
        .I1(GPOUT[14]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[15]_i_1 
       (.I0(CMD[15]),
        .I1(GPOUT[15]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[1]_i_1 
       (.I0(CMD[1]),
        .I1(GPOUT[1]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[2]_i_1 
       (.I0(CMD[2]),
        .I1(GPOUT[2]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[3]_i_1 
       (.I0(CMD[3]),
        .I1(GPOUT[3]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[4]_i_1 
       (.I0(CMD[4]),
        .I1(GPOUT[4]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[5]_i_1 
       (.I0(CMD[5]),
        .I1(GPOUT[5]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[6]_i_1 
       (.I0(CMD[6]),
        .I1(GPOUT[6]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[7]_i_1 
       (.I0(CMD[7]),
        .I1(GPOUT[7]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[8]_i_1 
       (.I0(CMD[8]),
        .I1(GPOUT[8]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hCCCCACCCCCCCCCCC)) 
    \GPOUT[9]_i_1 
       (.I0(CMD[9]),
        .I1(GPOUT[9]),
        .I2(CEI),
        .I3(CWRITE),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\GPOUT[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[0]_i_1_n_0 ),
        .Q(GPOUT[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[10] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[10]_i_1_n_0 ),
        .Q(GPOUT[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[11] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[11]_i_1_n_0 ),
        .Q(GPOUT[11]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[12] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[12]_i_1_n_0 ),
        .Q(GPOUT[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[13] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[13]_i_1_n_0 ),
        .Q(GPOUT[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[14] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[14]_i_1_n_0 ),
        .Q(GPOUT[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[15] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[15]_i_1_n_0 ),
        .Q(GPOUT[15]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[1]_i_1_n_0 ),
        .Q(GPOUT[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[2]_i_1_n_0 ),
        .Q(GPOUT[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[3]_i_1_n_0 ),
        .Q(GPOUT[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[4] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[4]_i_1_n_0 ),
        .Q(GPOUT[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[5] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[5]_i_1_n_0 ),
        .Q(GPOUT[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[6] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[6]_i_1_n_0 ),
        .Q(GPOUT[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[7] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[7]_i_1_n_0 ),
        .Q(GPOUT[7]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[8] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[8]_i_1_n_0 ),
        .Q(GPOUT[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \GPOUT_reg[9] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\GPOUT[9]_i_1_n_0 ),
        .Q(GPOUT[9]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_1
       (.I0(write_HADDR[31]),
        .I1(CWRITE),
        .I2(read_HADDR[31]),
        .O(HADDR[31]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_10
       (.I0(write_HADDR[22]),
        .I1(CWRITE),
        .I2(read_HADDR[22]),
        .O(HADDR[22]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_11
       (.I0(write_HADDR[21]),
        .I1(CWRITE),
        .I2(read_HADDR[21]),
        .O(HADDR[21]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_12
       (.I0(write_HADDR[20]),
        .I1(CWRITE),
        .I2(read_HADDR[20]),
        .O(HADDR[20]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_13
       (.I0(write_HADDR[19]),
        .I1(CWRITE),
        .I2(read_HADDR[19]),
        .O(HADDR[19]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_14
       (.I0(write_HADDR[18]),
        .I1(CWRITE),
        .I2(read_HADDR[18]),
        .O(HADDR[18]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_15
       (.I0(write_HADDR[17]),
        .I1(CWRITE),
        .I2(read_HADDR[17]),
        .O(HADDR[17]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_16
       (.I0(write_HADDR[16]),
        .I1(CWRITE),
        .I2(read_HADDR[16]),
        .O(HADDR[16]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_17
       (.I0(write_HADDR[15]),
        .I1(CWRITE),
        .I2(read_HADDR[15]),
        .O(HADDR[15]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_18
       (.I0(write_HADDR[14]),
        .I1(CWRITE),
        .I2(read_HADDR[14]),
        .O(HADDR[14]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_19
       (.I0(write_HADDR[13]),
        .I1(CWRITE),
        .I2(read_HADDR[13]),
        .O(HADDR[13]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_2
       (.I0(write_HADDR[30]),
        .I1(CWRITE),
        .I2(read_HADDR[30]),
        .O(HADDR[30]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_20
       (.I0(write_HADDR[12]),
        .I1(CWRITE),
        .I2(read_HADDR[12]),
        .O(HADDR[12]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_21
       (.I0(write_HADDR[11]),
        .I1(CWRITE),
        .I2(read_HADDR[11]),
        .O(HADDR[11]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_22
       (.I0(write_HADDR[10]),
        .I1(CWRITE),
        .I2(read_HADDR[10]),
        .O(HADDR[10]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_23
       (.I0(write_HADDR[9]),
        .I1(CWRITE),
        .I2(read_HADDR[9]),
        .O(HADDR[9]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_24
       (.I0(write_HADDR[8]),
        .I1(CWRITE),
        .I2(read_HADDR[8]),
        .O(HADDR[8]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_25
       (.I0(write_HADDR[7]),
        .I1(CWRITE),
        .I2(read_HADDR[7]),
        .O(HADDR[7]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_26
       (.I0(write_HADDR[6]),
        .I1(CWRITE),
        .I2(read_HADDR[6]),
        .O(HADDR[6]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_27
       (.I0(write_HADDR[5]),
        .I1(CWRITE),
        .I2(read_HADDR[5]),
        .O(HADDR[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_28
       (.I0(write_HADDR[4]),
        .I1(CWRITE),
        .I2(read_HADDR[4]),
        .O(HADDR[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_29
       (.I0(write_HADDR[3]),
        .I1(CWRITE),
        .I2(read_HADDR[3]),
        .O(HADDR[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_3
       (.I0(write_HADDR[29]),
        .I1(CWRITE),
        .I2(read_HADDR[29]),
        .O(HADDR[29]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_30
       (.I0(write_HADDR[2]),
        .I1(CWRITE),
        .I2(read_HADDR[2]),
        .O(HADDR[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_31
       (.I0(write_HADDR[1]),
        .I1(CWRITE),
        .I2(read_HADDR[1]),
        .O(HADDR[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_32
       (.I0(write_HADDR[0]),
        .I1(CWRITE),
        .I2(read_HADDR[0]),
        .O(HADDR[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_4
       (.I0(write_HADDR[28]),
        .I1(CWRITE),
        .I2(read_HADDR[28]),
        .O(HADDR[28]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_5
       (.I0(write_HADDR[27]),
        .I1(CWRITE),
        .I2(read_HADDR[27]),
        .O(HADDR[27]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_6
       (.I0(write_HADDR[26]),
        .I1(CWRITE),
        .I2(read_HADDR[26]),
        .O(HADDR[26]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_7
       (.I0(write_HADDR[25]),
        .I1(CWRITE),
        .I2(read_HADDR[25]),
        .O(HADDR[25]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_8
       (.I0(write_HADDR[24]),
        .I1(CWRITE),
        .I2(read_HADDR[24]),
        .O(HADDR[24]));
  LUT3 #(
    .INIT(8'hB8)) 
    HADDR_inferred_i_9
       (.I0(write_HADDR[23]),
        .I1(CWRITE),
        .I2(read_HADDR[23]),
        .O(HADDR[23]));
  LUT3 #(
    .INIT(8'hB8)) 
    HBURST_inferred_i_1
       (.I0(write_HBURST[2]),
        .I1(CWRITE),
        .I2(read_HBURST[2]),
        .O(HBURST[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    HBURST_inferred_i_2
       (.I0(write_HBURST[1]),
        .I1(CWRITE),
        .I2(read_HBURST[1]),
        .O(HBURST[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    HBURST_inferred_i_3
       (.I0(write_HBURST[0]),
        .I1(CWRITE),
        .I2(read_HBURST[0]),
        .O(HBURST[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    HBUSREQ_inferred_i_1
       (.I0(write_HBUSREQ),
        .I1(CWRITE),
        .I2(read_HBUSREQ),
        .O(HBUSREQ));
  LUT3 #(
    .INIT(8'hB8)) 
    HPROT_inferred_i_1
       (.I0(write_HPROT[3]),
        .I1(CWRITE),
        .I2(read_HPROT[3]),
        .O(HPROT[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    HPROT_inferred_i_2
       (.I0(write_HPROT[2]),
        .I1(CWRITE),
        .I2(read_HPROT[2]),
        .O(HPROT[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    HPROT_inferred_i_3
       (.I0(write_HPROT[1]),
        .I1(CWRITE),
        .I2(read_HPROT[1]),
        .O(HPROT[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    HPROT_inferred_i_4
       (.I0(write_HPROT[0]),
        .I1(CWRITE),
        .I2(read_HPROT[0]),
        .O(HPROT[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    HSIZE_inferred_i_1
       (.I0(write_HSIZE[2]),
        .I1(CWRITE),
        .I2(read_HSIZE[2]),
        .O(HSIZE[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    HSIZE_inferred_i_2
       (.I0(write_HSIZE[1]),
        .I1(CWRITE),
        .I2(read_HSIZE[1]),
        .O(HSIZE[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    HSIZE_inferred_i_3
       (.I0(write_HSIZE[0]),
        .I1(CWRITE),
        .I2(read_HSIZE[0]),
        .O(HSIZE[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    HTRANS_inferred_i_1
       (.I0(write_HTRANS[1]),
        .I1(CWRITE),
        .I2(read_HTRANS[1]),
        .O(HTRANS[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    HTRANS_inferred_i_2
       (.I0(write_HTRANS[0]),
        .I1(CWRITE),
        .I2(read_HTRANS[0]),
        .O(HTRANS[0]));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \HWDATA[0]_i_1 
       (.I0(u2f_data[0]),
        .I1(\HWDATA[7]_i_2_n_0 ),
        .I2(u2f_ready),
        .I3(u2f_valid),
        .I4(HWDATA[0]),
        .O(\HWDATA[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[10]_i_1 
       (.I0(HWDATA[10]),
        .I1(HWDATA1),
        .I2(\HWDATA[15]_i_2_n_0 ),
        .I3(u2f_data[10]),
        .I4(u2f_data[2]),
        .I5(\HWDATA[15]_i_3_n_0 ),
        .O(\HWDATA[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[11]_i_1 
       (.I0(HWDATA[11]),
        .I1(HWDATA1),
        .I2(\HWDATA[15]_i_2_n_0 ),
        .I3(u2f_data[11]),
        .I4(u2f_data[3]),
        .I5(\HWDATA[15]_i_3_n_0 ),
        .O(\HWDATA[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[12]_i_1 
       (.I0(HWDATA[12]),
        .I1(HWDATA1),
        .I2(\HWDATA[15]_i_2_n_0 ),
        .I3(u2f_data[12]),
        .I4(u2f_data[4]),
        .I5(\HWDATA[15]_i_3_n_0 ),
        .O(\HWDATA[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[13]_i_1 
       (.I0(HWDATA[13]),
        .I1(HWDATA1),
        .I2(\HWDATA[15]_i_2_n_0 ),
        .I3(u2f_data[13]),
        .I4(u2f_data[5]),
        .I5(\HWDATA[15]_i_3_n_0 ),
        .O(\HWDATA[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[14]_i_1 
       (.I0(HWDATA[14]),
        .I1(HWDATA1),
        .I2(\HWDATA[15]_i_2_n_0 ),
        .I3(u2f_data[14]),
        .I4(u2f_data[6]),
        .I5(\HWDATA[15]_i_3_n_0 ),
        .O(\HWDATA[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[15]_i_1 
       (.I0(HWDATA[15]),
        .I1(HWDATA1),
        .I2(\HWDATA[15]_i_2_n_0 ),
        .I3(u2f_data[15]),
        .I4(u2f_data[7]),
        .I5(\HWDATA[15]_i_3_n_0 ),
        .O(\HWDATA[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hECFC000000000000)) 
    \HWDATA[15]_i_2 
       (.I0(write_HADDR[0]),
        .I1(CSIZE[1]),
        .I2(CSIZE[0]),
        .I3(write_HADDR[1]),
        .I4(u2f_valid),
        .I5(u2f_ready),
        .O(\HWDATA[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \HWDATA[15]_i_3 
       (.I0(write_HADDR[1]),
        .I1(CSIZE[0]),
        .I2(CSIZE[1]),
        .I3(write_HADDR[0]),
        .I4(u2f_ready),
        .I5(u2f_valid),
        .O(\HWDATA[15]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[16]_i_1 
       (.I0(HWDATA[16]),
        .I1(HWDATA1),
        .I2(\HWDATA[23]_i_4_n_0 ),
        .I3(u2f_data[16]),
        .I4(u2f_data[0]),
        .I5(\HWDATA[23]_i_5_n_0 ),
        .O(\HWDATA[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[17]_i_1 
       (.I0(HWDATA[17]),
        .I1(HWDATA1),
        .I2(\HWDATA[23]_i_4_n_0 ),
        .I3(u2f_data[17]),
        .I4(u2f_data[1]),
        .I5(\HWDATA[23]_i_5_n_0 ),
        .O(\HWDATA[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[18]_i_1 
       (.I0(HWDATA[18]),
        .I1(HWDATA1),
        .I2(\HWDATA[23]_i_4_n_0 ),
        .I3(u2f_data[18]),
        .I4(u2f_data[2]),
        .I5(\HWDATA[23]_i_5_n_0 ),
        .O(\HWDATA[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[19]_i_1 
       (.I0(HWDATA[19]),
        .I1(HWDATA1),
        .I2(\HWDATA[23]_i_4_n_0 ),
        .I3(u2f_data[19]),
        .I4(u2f_data[3]),
        .I5(\HWDATA[23]_i_5_n_0 ),
        .O(\HWDATA[19]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \HWDATA[1]_i_1 
       (.I0(u2f_data[1]),
        .I1(\HWDATA[7]_i_2_n_0 ),
        .I2(u2f_ready),
        .I3(u2f_valid),
        .I4(HWDATA[1]),
        .O(\HWDATA[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[20]_i_1 
       (.I0(HWDATA[20]),
        .I1(HWDATA1),
        .I2(\HWDATA[23]_i_4_n_0 ),
        .I3(u2f_data[20]),
        .I4(u2f_data[4]),
        .I5(\HWDATA[23]_i_5_n_0 ),
        .O(\HWDATA[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[21]_i_1 
       (.I0(HWDATA[21]),
        .I1(HWDATA1),
        .I2(\HWDATA[23]_i_4_n_0 ),
        .I3(u2f_data[21]),
        .I4(u2f_data[5]),
        .I5(\HWDATA[23]_i_5_n_0 ),
        .O(\HWDATA[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[22]_i_1 
       (.I0(HWDATA[22]),
        .I1(HWDATA1),
        .I2(\HWDATA[23]_i_4_n_0 ),
        .I3(u2f_data[22]),
        .I4(u2f_data[6]),
        .I5(\HWDATA[23]_i_5_n_0 ),
        .O(\HWDATA[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[23]_i_1 
       (.I0(HWDATA[23]),
        .I1(HWDATA1),
        .I2(\HWDATA[23]_i_4_n_0 ),
        .I3(u2f_data[23]),
        .I4(u2f_data[7]),
        .I5(\HWDATA[23]_i_5_n_0 ),
        .O(\HWDATA[23]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \HWDATA[23]_i_2 
       (.I0(HRESETn),
        .O(\HWDATA[23]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \HWDATA[23]_i_3 
       (.I0(u2f_ready),
        .I1(u2f_valid),
        .O(HWDATA1));
  LUT5 #(
    .INIT(32'hEA000000)) 
    \HWDATA[23]_i_4 
       (.I0(CSIZE[1]),
        .I1(write_HADDR[0]),
        .I2(CSIZE[0]),
        .I3(u2f_valid),
        .I4(u2f_ready),
        .O(\HWDATA[23]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000080)) 
    \HWDATA[23]_i_5 
       (.I0(write_HADDR[1]),
        .I1(u2f_ready),
        .I2(u2f_valid),
        .I3(CSIZE[1]),
        .I4(write_HADDR[0]),
        .O(\HWDATA[23]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \HWDATA[24]_i_1 
       (.I0(\HWDATA[31]_i_3_n_0 ),
        .I1(u2f_data[0]),
        .I2(\HWDATA[31]_i_4_n_0 ),
        .I3(u2f_data[8]),
        .I4(\HWDATA[24]_i_2_n_0 ),
        .O(\HWDATA[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA888FFFFA8880000)) 
    \HWDATA[24]_i_2 
       (.I0(u2f_data[24]),
        .I1(CSIZE[1]),
        .I2(write_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HWDATA1),
        .I5(HWDATA[24]),
        .O(\HWDATA[24]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \HWDATA[25]_i_1 
       (.I0(\HWDATA[31]_i_3_n_0 ),
        .I1(u2f_data[1]),
        .I2(\HWDATA[31]_i_4_n_0 ),
        .I3(u2f_data[9]),
        .I4(\HWDATA[25]_i_2_n_0 ),
        .O(\HWDATA[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA888FFFFA8880000)) 
    \HWDATA[25]_i_2 
       (.I0(u2f_data[25]),
        .I1(CSIZE[1]),
        .I2(write_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HWDATA1),
        .I5(HWDATA[25]),
        .O(\HWDATA[25]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \HWDATA[26]_i_1 
       (.I0(\HWDATA[31]_i_3_n_0 ),
        .I1(u2f_data[2]),
        .I2(\HWDATA[31]_i_4_n_0 ),
        .I3(u2f_data[10]),
        .I4(\HWDATA[26]_i_2_n_0 ),
        .O(\HWDATA[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA888FFFFA8880000)) 
    \HWDATA[26]_i_2 
       (.I0(u2f_data[26]),
        .I1(CSIZE[1]),
        .I2(write_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HWDATA1),
        .I5(HWDATA[26]),
        .O(\HWDATA[26]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \HWDATA[27]_i_1 
       (.I0(\HWDATA[31]_i_3_n_0 ),
        .I1(u2f_data[3]),
        .I2(\HWDATA[31]_i_4_n_0 ),
        .I3(u2f_data[11]),
        .I4(\HWDATA[27]_i_2_n_0 ),
        .O(\HWDATA[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA888FFFFA8880000)) 
    \HWDATA[27]_i_2 
       (.I0(u2f_data[27]),
        .I1(CSIZE[1]),
        .I2(write_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HWDATA1),
        .I5(HWDATA[27]),
        .O(\HWDATA[27]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \HWDATA[28]_i_1 
       (.I0(\HWDATA[31]_i_3_n_0 ),
        .I1(u2f_data[4]),
        .I2(\HWDATA[31]_i_4_n_0 ),
        .I3(u2f_data[12]),
        .I4(\HWDATA[28]_i_2_n_0 ),
        .O(\HWDATA[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA888FFFFA8880000)) 
    \HWDATA[28]_i_2 
       (.I0(u2f_data[28]),
        .I1(CSIZE[1]),
        .I2(write_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HWDATA1),
        .I5(HWDATA[28]),
        .O(\HWDATA[28]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \HWDATA[29]_i_1 
       (.I0(\HWDATA[31]_i_3_n_0 ),
        .I1(u2f_data[5]),
        .I2(\HWDATA[31]_i_4_n_0 ),
        .I3(u2f_data[13]),
        .I4(\HWDATA[29]_i_2_n_0 ),
        .O(\HWDATA[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA888FFFFA8880000)) 
    \HWDATA[29]_i_2 
       (.I0(u2f_data[29]),
        .I1(CSIZE[1]),
        .I2(write_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HWDATA1),
        .I5(HWDATA[29]),
        .O(\HWDATA[29]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \HWDATA[2]_i_1 
       (.I0(u2f_data[2]),
        .I1(\HWDATA[7]_i_2_n_0 ),
        .I2(u2f_ready),
        .I3(u2f_valid),
        .I4(HWDATA[2]),
        .O(\HWDATA[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \HWDATA[30]_i_1 
       (.I0(\HWDATA[31]_i_3_n_0 ),
        .I1(u2f_data[6]),
        .I2(\HWDATA[31]_i_4_n_0 ),
        .I3(u2f_data[14]),
        .I4(\HWDATA[30]_i_2_n_0 ),
        .O(\HWDATA[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA888FFFFA8880000)) 
    \HWDATA[30]_i_2 
       (.I0(u2f_data[30]),
        .I1(CSIZE[1]),
        .I2(write_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HWDATA1),
        .I5(HWDATA[30]),
        .O(\HWDATA[30]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \HWDATA[31]_i_1 
       (.I0(state_write[1]),
        .I1(state_write[2]),
        .O(HWDATA_reg0));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \HWDATA[31]_i_2 
       (.I0(\HWDATA[31]_i_3_n_0 ),
        .I1(u2f_data[7]),
        .I2(\HWDATA[31]_i_4_n_0 ),
        .I3(u2f_data[15]),
        .I4(\HWDATA[31]_i_5_n_0 ),
        .O(\HWDATA[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    \HWDATA[31]_i_3 
       (.I0(CSIZE[0]),
        .I1(CSIZE[1]),
        .I2(u2f_valid),
        .I3(u2f_ready),
        .I4(write_HADDR[1]),
        .I5(write_HADDR[0]),
        .O(\HWDATA[31]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    \HWDATA[31]_i_4 
       (.I0(write_HADDR[0]),
        .I1(CSIZE[1]),
        .I2(u2f_valid),
        .I3(u2f_ready),
        .I4(write_HADDR[1]),
        .I5(CSIZE[0]),
        .O(\HWDATA[31]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hA888FFFFA8880000)) 
    \HWDATA[31]_i_5 
       (.I0(u2f_data[31]),
        .I1(CSIZE[1]),
        .I2(write_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HWDATA1),
        .I5(HWDATA[31]),
        .O(\HWDATA[31]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \HWDATA[3]_i_1 
       (.I0(u2f_data[3]),
        .I1(\HWDATA[7]_i_2_n_0 ),
        .I2(u2f_ready),
        .I3(u2f_valid),
        .I4(HWDATA[3]),
        .O(\HWDATA[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \HWDATA[4]_i_1 
       (.I0(u2f_data[4]),
        .I1(\HWDATA[7]_i_2_n_0 ),
        .I2(u2f_ready),
        .I3(u2f_valid),
        .I4(HWDATA[4]),
        .O(\HWDATA[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \HWDATA[5]_i_1 
       (.I0(u2f_data[5]),
        .I1(\HWDATA[7]_i_2_n_0 ),
        .I2(u2f_ready),
        .I3(u2f_valid),
        .I4(HWDATA[5]),
        .O(\HWDATA[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \HWDATA[6]_i_1 
       (.I0(u2f_data[6]),
        .I1(\HWDATA[7]_i_2_n_0 ),
        .I2(u2f_ready),
        .I3(u2f_valid),
        .I4(HWDATA[6]),
        .O(\HWDATA[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8FFF8888)) 
    \HWDATA[7]_i_1 
       (.I0(u2f_data[7]),
        .I1(\HWDATA[7]_i_2_n_0 ),
        .I2(u2f_ready),
        .I3(u2f_valid),
        .I4(HWDATA[7]),
        .O(\HWDATA[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF8FB000000000000)) 
    \HWDATA[7]_i_2 
       (.I0(CSIZE[0]),
        .I1(write_HADDR[0]),
        .I2(CSIZE[1]),
        .I3(write_HADDR[1]),
        .I4(u2f_valid),
        .I5(u2f_ready),
        .O(\HWDATA[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[8]_i_1 
       (.I0(HWDATA[8]),
        .I1(HWDATA1),
        .I2(\HWDATA[15]_i_2_n_0 ),
        .I3(u2f_data[8]),
        .I4(u2f_data[0]),
        .I5(\HWDATA[15]_i_3_n_0 ),
        .O(\HWDATA[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \HWDATA[9]_i_1 
       (.I0(HWDATA[9]),
        .I1(HWDATA1),
        .I2(\HWDATA[15]_i_2_n_0 ),
        .I3(u2f_data[9]),
        .I4(u2f_data[1]),
        .I5(\HWDATA[15]_i_3_n_0 ),
        .O(\HWDATA[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[0] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[0]_i_1_n_0 ),
        .Q(HWDATA[0]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[10] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[10]_i_1_n_0 ),
        .Q(HWDATA[10]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[11] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[11]_i_1_n_0 ),
        .Q(HWDATA[11]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[12] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[12]_i_1_n_0 ),
        .Q(HWDATA[12]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[13] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[13]_i_1_n_0 ),
        .Q(HWDATA[13]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[14] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[14]_i_1_n_0 ),
        .Q(HWDATA[14]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[15] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[15]_i_1_n_0 ),
        .Q(HWDATA[15]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[16] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[16]_i_1_n_0 ),
        .Q(HWDATA[16]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[17] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[17]_i_1_n_0 ),
        .Q(HWDATA[17]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[18] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[18]_i_1_n_0 ),
        .Q(HWDATA[18]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[19] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[19]_i_1_n_0 ),
        .Q(HWDATA[19]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[1] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[1]_i_1_n_0 ),
        .Q(HWDATA[1]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[20] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[20]_i_1_n_0 ),
        .Q(HWDATA[20]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[21] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[21]_i_1_n_0 ),
        .Q(HWDATA[21]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[22] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[22]_i_1_n_0 ),
        .Q(HWDATA[22]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[23] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[23]_i_1_n_0 ),
        .Q(HWDATA[23]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[24] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\HWDATA[24]_i_1_n_0 ),
        .Q(HWDATA[24]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[25] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\HWDATA[25]_i_1_n_0 ),
        .Q(HWDATA[25]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[26] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\HWDATA[26]_i_1_n_0 ),
        .Q(HWDATA[26]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[27] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\HWDATA[27]_i_1_n_0 ),
        .Q(HWDATA[27]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[28] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\HWDATA[28]_i_1_n_0 ),
        .Q(HWDATA[28]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[29] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\HWDATA[29]_i_1_n_0 ),
        .Q(HWDATA[29]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[2] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[2]_i_1_n_0 ),
        .Q(HWDATA[2]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[30] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\HWDATA[30]_i_1_n_0 ),
        .Q(HWDATA[30]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[31] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\HWDATA[31]_i_2_n_0 ),
        .Q(HWDATA[31]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[3] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[3]_i_1_n_0 ),
        .Q(HWDATA[3]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[4] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[4]_i_1_n_0 ),
        .Q(HWDATA[4]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[5] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[5]_i_1_n_0 ),
        .Q(HWDATA[5]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[6] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[6]_i_1_n_0 ),
        .Q(HWDATA[6]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[7] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[7]_i_1_n_0 ),
        .Q(HWDATA[7]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[8] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[8]_i_1_n_0 ),
        .Q(HWDATA[8]));
  (* KEEP = "yes" *) 
  (* mark_debug = "true" *) 
  FDCE #(
    .INIT(1'b0)) 
    \HWDATA_reg[9] 
       (.C(HCLK),
        .CE(HWDATA_reg0),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\HWDATA[9]_i_1_n_0 ),
        .Q(HWDATA[9]));
  LUT3 #(
    .INIT(8'hB8)) 
    HWRITE_inferred_i_1
       (.I0(write_HWRITE),
        .I1(CWRITE),
        .I2(read_HWRITE),
        .O(HWRITE));
  LUT6 #(
    .INIT(64'hA8A0A8AFA8AFA8AF)) 
    cmd_ready_i_1
       (.I0(cmd_ready),
        .I1(cmd_ready_i_3_n_0),
        .I2(state_cmd[1]),
        .I3(state_cmd[0]),
        .I4(CMD1),
        .I5(cmd_data[31]),
        .O(cmd_ready_i_1_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    cmd_ready_i_2
       (.I0(HRESETn),
        .O(cmd_ready_i_2_n_0));
  LUT3 #(
    .INIT(8'hBF)) 
    cmd_ready_i_3
       (.I0(CEI),
        .I1(cmd_valid),
        .I2(cmd_ready),
        .O(cmd_ready_i_3_n_0));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    cmd_ready_i_4
       (.I0(transactor_sel[2]),
        .I1(transactor_sel[3]),
        .I2(transactor_sel[0]),
        .I3(transactor_sel[1]),
        .I4(cmd_valid),
        .I5(cmd_ready),
        .O(CMD1));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    cmd_ready_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(cmd_ready_i_1_n_0),
        .Q(cmd_ready));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \f2u_data[0]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[0]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[0]),
        .I4(\f2u_data[0]_i_2_n_0 ),
        .O(\f2u_data[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA808080)) 
    \f2u_data[0]_i_2 
       (.I0(\f2u_data[15]_i_4_n_0 ),
        .I1(HRDATA[8]),
        .I2(\f2u_data[7]_i_3_n_0 ),
        .I3(HRDATA[16]),
        .I4(\f2u_data[7]_i_4_n_0 ),
        .I5(\f2u_data[0]_i_3_n_0 ),
        .O(\f2u_data[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[0]_i_3 
       (.I0(f2u_data[0]),
        .I1(HREADY),
        .I2(\f2u_data[7]_i_6_n_0 ),
        .I3(HRDATA[0]),
        .I4(HRDATA[24]),
        .I5(\f2u_data[7]_i_7_n_0 ),
        .O(\f2u_data[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[10]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[10]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[10]),
        .I4(\f2u_data[10]_i_2_n_0 ),
        .I5(\f2u_data[15]_i_4_n_0 ),
        .O(\f2u_data[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[10]_i_2 
       (.I0(f2u_data[10]),
        .I1(HREADY),
        .I2(\f2u_data[15]_i_5_n_0 ),
        .I3(HRDATA[26]),
        .I4(HRDATA[10]),
        .I5(\f2u_data[15]_i_6_n_0 ),
        .O(\f2u_data[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[11]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[11]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[11]),
        .I4(\f2u_data[11]_i_2_n_0 ),
        .I5(\f2u_data[15]_i_4_n_0 ),
        .O(\f2u_data[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[11]_i_2 
       (.I0(f2u_data[11]),
        .I1(HREADY),
        .I2(\f2u_data[15]_i_5_n_0 ),
        .I3(HRDATA[27]),
        .I4(HRDATA[11]),
        .I5(\f2u_data[15]_i_6_n_0 ),
        .O(\f2u_data[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[12]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[12]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[12]),
        .I4(\f2u_data[12]_i_2_n_0 ),
        .I5(\f2u_data[15]_i_4_n_0 ),
        .O(\f2u_data[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[12]_i_2 
       (.I0(f2u_data[12]),
        .I1(HREADY),
        .I2(\f2u_data[15]_i_5_n_0 ),
        .I3(HRDATA[28]),
        .I4(HRDATA[12]),
        .I5(\f2u_data[15]_i_6_n_0 ),
        .O(\f2u_data[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[13]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[13]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[13]),
        .I4(\f2u_data[13]_i_2_n_0 ),
        .I5(\f2u_data[15]_i_4_n_0 ),
        .O(\f2u_data[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[13]_i_2 
       (.I0(f2u_data[13]),
        .I1(HREADY),
        .I2(\f2u_data[15]_i_5_n_0 ),
        .I3(HRDATA[29]),
        .I4(HRDATA[13]),
        .I5(\f2u_data[15]_i_6_n_0 ),
        .O(\f2u_data[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[14]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[14]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[14]),
        .I4(\f2u_data[14]_i_2_n_0 ),
        .I5(\f2u_data[15]_i_4_n_0 ),
        .O(\f2u_data[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[14]_i_2 
       (.I0(f2u_data[14]),
        .I1(HREADY),
        .I2(\f2u_data[15]_i_5_n_0 ),
        .I3(HRDATA[30]),
        .I4(HRDATA[14]),
        .I5(\f2u_data[15]_i_6_n_0 ),
        .O(\f2u_data[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[15]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[15]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[15]),
        .I4(\f2u_data[15]_i_3_n_0 ),
        .I5(\f2u_data[15]_i_4_n_0 ),
        .O(\f2u_data[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000FFF0F00F7)) 
    \f2u_data[15]_i_2 
       (.I0(read_go),
        .I1(CEI),
        .I2(state_read[1]),
        .I3(state_read[2]),
        .I4(state_read[0]),
        .I5(state_read[3]),
        .O(\f2u_data[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[15]_i_3 
       (.I0(f2u_data[15]),
        .I1(HREADY),
        .I2(\f2u_data[15]_i_5_n_0 ),
        .I3(HRDATA[31]),
        .I4(HRDATA[15]),
        .I5(\f2u_data[15]_i_6_n_0 ),
        .O(\f2u_data[15]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0062)) 
    \f2u_data[15]_i_4 
       (.I0(state_read[2]),
        .I1(state_read[0]),
        .I2(state_read[1]),
        .I3(state_read[3]),
        .O(\f2u_data[15]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00400000)) 
    \f2u_data[15]_i_5 
       (.I0(read_HADDR[0]),
        .I1(read_HADDR[1]),
        .I2(HREADY),
        .I3(CSIZE[1]),
        .I4(CSIZE[0]),
        .O(\f2u_data[15]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFBAA0000)) 
    \f2u_data[15]_i_6 
       (.I0(CSIZE[1]),
        .I1(read_HADDR[1]),
        .I2(read_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HREADY),
        .O(\f2u_data[15]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[16]_i_1 
       (.I0(HRDATA[16]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[16]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hABAAAFAAABAAABAA)) 
    \f2u_data[17]_i_1 
       (.I0(\f2u_data[17]_i_2_n_0 ),
        .I1(HREADY),
        .I2(state_read[3]),
        .I3(f2u_data[17]),
        .I4(\f2u_data[17]_i_3_n_0 ),
        .I5(state_read[0]),
        .O(\f2u_data[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBAAABAAABAAA)) 
    \f2u_data[17]_i_2 
       (.I0(read_done_i_3_n_0),
        .I1(read_done_i_2_n_0),
        .I2(f2u_data[17]),
        .I3(\f2u_data[17]_i_4_n_0 ),
        .I4(HRDATA[17]),
        .I5(\f2u_data[31]_i_2_n_0 ),
        .O(\f2u_data[17]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \f2u_data[17]_i_3 
       (.I0(state_read[1]),
        .I1(state_read[2]),
        .O(\f2u_data[17]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \f2u_data[17]_i_4 
       (.I0(state_read[1]),
        .I1(state_read[3]),
        .O(\f2u_data[17]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[18]_i_1 
       (.I0(HRDATA[18]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[18]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[19]_i_1 
       (.I0(HRDATA[19]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[19]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[19]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \f2u_data[1]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[1]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[1]),
        .I4(\f2u_data[1]_i_2_n_0 ),
        .O(\f2u_data[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA808080)) 
    \f2u_data[1]_i_2 
       (.I0(\f2u_data[15]_i_4_n_0 ),
        .I1(HRDATA[9]),
        .I2(\f2u_data[7]_i_3_n_0 ),
        .I3(HRDATA[17]),
        .I4(\f2u_data[7]_i_4_n_0 ),
        .I5(\f2u_data[1]_i_3_n_0 ),
        .O(\f2u_data[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[1]_i_3 
       (.I0(f2u_data[1]),
        .I1(HREADY),
        .I2(\f2u_data[7]_i_6_n_0 ),
        .I3(HRDATA[1]),
        .I4(HRDATA[25]),
        .I5(\f2u_data[7]_i_7_n_0 ),
        .O(\f2u_data[1]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[20]_i_1 
       (.I0(HRDATA[20]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[20]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[21]_i_1 
       (.I0(HRDATA[21]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[21]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[22]_i_1 
       (.I0(HRDATA[22]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[22]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[23]_i_1 
       (.I0(HRDATA[23]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[23]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[23]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[24]_i_1 
       (.I0(HRDATA[24]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[24]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[25]_i_1 
       (.I0(HRDATA[25]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[25]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[26]_i_1 
       (.I0(HRDATA[26]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[26]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[27]_i_1 
       (.I0(HRDATA[27]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[27]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[28]_i_1 
       (.I0(HRDATA[28]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[28]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \f2u_data[29]_i_1 
       (.I0(HRDATA[29]),
        .I1(\f2u_data[31]_i_2_n_0 ),
        .I2(f2u_data[29]),
        .I3(\f2u_data[29]_i_2_n_0 ),
        .O(\f2u_data[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000FFF5F55FC)) 
    \f2u_data[29]_i_2 
       (.I0(HREADY),
        .I1(\state_read[2]_i_13_n_0 ),
        .I2(state_read[1]),
        .I3(state_read[2]),
        .I4(state_read[0]),
        .I5(state_read[3]),
        .O(\f2u_data[29]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \f2u_data[2]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[2]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[2]),
        .I4(\f2u_data[2]_i_2_n_0 ),
        .O(\f2u_data[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA808080)) 
    \f2u_data[2]_i_2 
       (.I0(\f2u_data[15]_i_4_n_0 ),
        .I1(HRDATA[10]),
        .I2(\f2u_data[7]_i_3_n_0 ),
        .I3(HRDATA[18]),
        .I4(\f2u_data[7]_i_4_n_0 ),
        .I5(\f2u_data[2]_i_3_n_0 ),
        .O(\f2u_data[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[2]_i_3 
       (.I0(f2u_data[2]),
        .I1(HREADY),
        .I2(\f2u_data[7]_i_6_n_0 ),
        .I3(HRDATA[2]),
        .I4(HRDATA[26]),
        .I5(\f2u_data[7]_i_7_n_0 ),
        .O(\f2u_data[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[30]_i_1 
       (.I0(read_done_i_3_n_0),
        .I1(IRQ),
        .I2(\f2u_data[31]_i_2_n_0 ),
        .I3(HRDATA[30]),
        .I4(f2u_data[30]),
        .I5(\f2u_data[31]_i_3_n_0 ),
        .O(\f2u_data[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[31]_i_1 
       (.I0(read_done_i_3_n_0),
        .I1(FIQ),
        .I2(\f2u_data[31]_i_2_n_0 ),
        .I3(HRDATA[31]),
        .I4(f2u_data[31]),
        .I5(\f2u_data[31]_i_3_n_0 ),
        .O(\f2u_data[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAA800000)) 
    \f2u_data[31]_i_2 
       (.I0(HREADY),
        .I1(CSIZE[0]),
        .I2(read_HADDR[0]),
        .I3(CSIZE[1]),
        .I4(\f2u_data[15]_i_4_n_0 ),
        .O(\f2u_data[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF000E)) 
    \f2u_data[31]_i_3 
       (.I0(state_read[0]),
        .I1(state_read[2]),
        .I2(state_read[3]),
        .I3(HREADY),
        .I4(\f2u_data[15]_i_2_n_0 ),
        .O(\f2u_data[31]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h55570000)) 
    \f2u_data[32]_i_1 
       (.I0(state_read[3]),
        .I1(state_read[2]),
        .I2(state_read[0]),
        .I3(state_read[1]),
        .I4(f2u_data[32]),
        .O(\f2u_data[32]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h55570000)) 
    \f2u_data[33]_i_1 
       (.I0(state_read[3]),
        .I1(state_read[2]),
        .I2(state_read[0]),
        .I3(state_read[1]),
        .I4(f2u_data[33]),
        .O(\f2u_data[33]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \f2u_data[3]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[3]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[3]),
        .I4(\f2u_data[3]_i_2_n_0 ),
        .O(\f2u_data[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA808080)) 
    \f2u_data[3]_i_2 
       (.I0(\f2u_data[15]_i_4_n_0 ),
        .I1(HRDATA[11]),
        .I2(\f2u_data[7]_i_3_n_0 ),
        .I3(HRDATA[19]),
        .I4(\f2u_data[7]_i_4_n_0 ),
        .I5(\f2u_data[3]_i_3_n_0 ),
        .O(\f2u_data[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[3]_i_3 
       (.I0(f2u_data[3]),
        .I1(HREADY),
        .I2(\f2u_data[7]_i_6_n_0 ),
        .I3(HRDATA[3]),
        .I4(HRDATA[27]),
        .I5(\f2u_data[7]_i_7_n_0 ),
        .O(\f2u_data[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \f2u_data[4]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[4]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[4]),
        .I4(\f2u_data[4]_i_2_n_0 ),
        .O(\f2u_data[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA808080)) 
    \f2u_data[4]_i_2 
       (.I0(\f2u_data[15]_i_4_n_0 ),
        .I1(HRDATA[12]),
        .I2(\f2u_data[7]_i_3_n_0 ),
        .I3(HRDATA[20]),
        .I4(\f2u_data[7]_i_4_n_0 ),
        .I5(\f2u_data[4]_i_3_n_0 ),
        .O(\f2u_data[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[4]_i_3 
       (.I0(f2u_data[4]),
        .I1(HREADY),
        .I2(\f2u_data[7]_i_6_n_0 ),
        .I3(HRDATA[4]),
        .I4(HRDATA[28]),
        .I5(\f2u_data[7]_i_7_n_0 ),
        .O(\f2u_data[4]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \f2u_data[5]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[5]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[5]),
        .I4(\f2u_data[5]_i_2_n_0 ),
        .O(\f2u_data[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA808080)) 
    \f2u_data[5]_i_2 
       (.I0(\f2u_data[15]_i_4_n_0 ),
        .I1(HRDATA[13]),
        .I2(\f2u_data[7]_i_3_n_0 ),
        .I3(HRDATA[21]),
        .I4(\f2u_data[7]_i_4_n_0 ),
        .I5(\f2u_data[5]_i_3_n_0 ),
        .O(\f2u_data[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[5]_i_3 
       (.I0(f2u_data[5]),
        .I1(HREADY),
        .I2(\f2u_data[7]_i_6_n_0 ),
        .I3(HRDATA[5]),
        .I4(HRDATA[29]),
        .I5(\f2u_data[7]_i_7_n_0 ),
        .O(\f2u_data[5]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \f2u_data[6]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[6]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[6]),
        .I4(\f2u_data[6]_i_2_n_0 ),
        .O(\f2u_data[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA808080)) 
    \f2u_data[6]_i_2 
       (.I0(\f2u_data[15]_i_4_n_0 ),
        .I1(HRDATA[14]),
        .I2(\f2u_data[7]_i_3_n_0 ),
        .I3(HRDATA[22]),
        .I4(\f2u_data[7]_i_4_n_0 ),
        .I5(\f2u_data[6]_i_3_n_0 ),
        .O(\f2u_data[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[6]_i_3 
       (.I0(f2u_data[6]),
        .I1(HREADY),
        .I2(\f2u_data[7]_i_6_n_0 ),
        .I3(HRDATA[6]),
        .I4(HRDATA[30]),
        .I5(\f2u_data[7]_i_7_n_0 ),
        .O(\f2u_data[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \f2u_data[7]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[7]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[7]),
        .I4(\f2u_data[7]_i_2_n_0 ),
        .O(\f2u_data[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA808080)) 
    \f2u_data[7]_i_2 
       (.I0(\f2u_data[15]_i_4_n_0 ),
        .I1(HRDATA[15]),
        .I2(\f2u_data[7]_i_3_n_0 ),
        .I3(HRDATA[23]),
        .I4(\f2u_data[7]_i_4_n_0 ),
        .I5(\f2u_data[7]_i_5_n_0 ),
        .O(\f2u_data[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000008)) 
    \f2u_data[7]_i_3 
       (.I0(HREADY),
        .I1(read_HADDR[0]),
        .I2(CSIZE[1]),
        .I3(CSIZE[0]),
        .I4(read_HADDR[1]),
        .O(\f2u_data[7]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0400)) 
    \f2u_data[7]_i_4 
       (.I0(read_HADDR[0]),
        .I1(read_HADDR[1]),
        .I2(CSIZE[1]),
        .I3(HREADY),
        .O(\f2u_data[7]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[7]_i_5 
       (.I0(f2u_data[7]),
        .I1(HREADY),
        .I2(\f2u_data[7]_i_6_n_0 ),
        .I3(HRDATA[7]),
        .I4(HRDATA[31]),
        .I5(\f2u_data[7]_i_7_n_0 ),
        .O(\f2u_data[7]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFDCD0000)) 
    \f2u_data[7]_i_6 
       (.I0(read_HADDR[1]),
        .I1(CSIZE[1]),
        .I2(read_HADDR[0]),
        .I3(CSIZE[0]),
        .I4(HREADY),
        .O(\f2u_data[7]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h00080000)) 
    \f2u_data[7]_i_7 
       (.I0(HREADY),
        .I1(read_HADDR[0]),
        .I2(CSIZE[1]),
        .I3(CSIZE[0]),
        .I4(read_HADDR[1]),
        .O(\f2u_data[7]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[8]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[8]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[8]),
        .I4(\f2u_data[8]_i_2_n_0 ),
        .I5(\f2u_data[15]_i_4_n_0 ),
        .O(\f2u_data[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[8]_i_2 
       (.I0(f2u_data[8]),
        .I1(HREADY),
        .I2(\f2u_data[15]_i_5_n_0 ),
        .I3(HRDATA[24]),
        .I4(HRDATA[8]),
        .I5(\f2u_data[15]_i_6_n_0 ),
        .O(\f2u_data[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \f2u_data[9]_i_1 
       (.I0(\f2u_data[15]_i_2_n_0 ),
        .I1(f2u_data[9]),
        .I2(read_done_i_3_n_0),
        .I3(GPIN[9]),
        .I4(\f2u_data[9]_i_2_n_0 ),
        .I5(\f2u_data[15]_i_4_n_0 ),
        .O(\f2u_data[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \f2u_data[9]_i_2 
       (.I0(f2u_data[9]),
        .I1(HREADY),
        .I2(\f2u_data[15]_i_5_n_0 ),
        .I3(HRDATA[25]),
        .I4(HRDATA[9]),
        .I5(\f2u_data[15]_i_6_n_0 ),
        .O(\f2u_data[9]_i_2_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[0]_i_1_n_0 ),
        .Q(f2u_data[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[10] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[10]_i_1_n_0 ),
        .Q(f2u_data[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[11] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[11]_i_1_n_0 ),
        .Q(f2u_data[11]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[12] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[12]_i_1_n_0 ),
        .Q(f2u_data[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[13] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[13]_i_1_n_0 ),
        .Q(f2u_data[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[14] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[14]_i_1_n_0 ),
        .Q(f2u_data[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[15] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[15]_i_1_n_0 ),
        .Q(f2u_data[15]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[16] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[16]_i_1_n_0 ),
        .Q(f2u_data[16]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[17] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\f2u_data[17]_i_1_n_0 ),
        .Q(f2u_data[17]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[18] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[18]_i_1_n_0 ),
        .Q(f2u_data[18]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[19] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[19]_i_1_n_0 ),
        .Q(f2u_data[19]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[1]_i_1_n_0 ),
        .Q(f2u_data[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[20] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[20]_i_1_n_0 ),
        .Q(f2u_data[20]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[21] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[21]_i_1_n_0 ),
        .Q(f2u_data[21]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[22] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[22]_i_1_n_0 ),
        .Q(f2u_data[22]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[23] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[23]_i_1_n_0 ),
        .Q(f2u_data[23]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[24] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[24]_i_1_n_0 ),
        .Q(f2u_data[24]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[25] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[25]_i_1_n_0 ),
        .Q(f2u_data[25]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[26] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[26]_i_1_n_0 ),
        .Q(f2u_data[26]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[27] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[27]_i_1_n_0 ),
        .Q(f2u_data[27]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[28] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[28]_i_1_n_0 ),
        .Q(f2u_data[28]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[29] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[29]_i_1_n_0 ),
        .Q(f2u_data[29]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[2]_i_1_n_0 ),
        .Q(f2u_data[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[30] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[30]_i_1_n_0 ),
        .Q(f2u_data[30]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[31] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[31]_i_1_n_0 ),
        .Q(f2u_data[31]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[32] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\f2u_data[32]_i_1_n_0 ),
        .Q(f2u_data[32]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[33] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\f2u_data[33]_i_1_n_0 ),
        .Q(f2u_data[33]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[3]_i_1_n_0 ),
        .Q(f2u_data[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[4] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[4]_i_1_n_0 ),
        .Q(f2u_data[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[5] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[5]_i_1_n_0 ),
        .Q(f2u_data[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[6] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[6]_i_1_n_0 ),
        .Q(f2u_data[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[7] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[7]_i_1_n_0 ),
        .Q(f2u_data[7]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[8] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[8]_i_1_n_0 ),
        .Q(f2u_data[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \f2u_data_reg[9] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\HWDATA[23]_i_2_n_0 ),
        .D(\f2u_data[9]_i_1_n_0 ),
        .Q(f2u_data[9]));
  LUT6 #(
    .INIT(64'hEEEEEFEEEFEEEFEE)) 
    f2u_valid_i_1
       (.I0(f2u_valid_i_2_n_0),
        .I1(read_done_i_3_n_0),
        .I2(read_done_i_2_n_0),
        .I3(f2u_valid),
        .I4(state_read[3]),
        .I5(state_read[1]),
        .O(f2u_valid_i_1_n_0));
  LUT6 #(
    .INIT(64'h0032000233020002)) 
    f2u_valid_i_2
       (.I0(f2u_valid),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(state_read[2]),
        .I4(HREADY),
        .I5(state_read[0]),
        .O(f2u_valid_i_2_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    f2u_valid_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(f2u_valid_i_1_n_0),
        .Q(f2u_valid));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(CMD[31]),
        .O(CEI));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(CMD[25]),
        .O(CBURST[2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_10
       (.I0(CMD[5]),
        .O(CLENGTH[5]));
  LUT1 #(
    .INIT(2'h2)) 
    i_11
       (.I0(CMD[4]),
        .O(CLENGTH[4]));
  LUT1 #(
    .INIT(2'h2)) 
    i_12
       (.I0(CMD[3]),
        .O(CLENGTH[3]));
  LUT1 #(
    .INIT(2'h2)) 
    i_13
       (.I0(CMD[2]),
        .O(CLENGTH[2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_14
       (.I0(CMD[1]),
        .O(CLENGTH[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_15
       (.I0(CMD[0]),
        .O(CLENGTH[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_16
       (.I0(CMD[30]),
        .O(CWRITE));
  LUT1 #(
    .INIT(2'h2)) 
    i_17
       (.I0(CMD[29]),
        .O(CLOCK[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_18
       (.I0(CMD[28]),
        .O(CLOCK[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_19
       (.I0(CMD[27]),
        .O(CSIZE[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(CMD[24]),
        .O(CBURST[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_20
       (.I0(CMD[26]),
        .O(CSIZE[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_21
       (.I0(CMD[22]),
        .O(CPROT[3]));
  LUT1 #(
    .INIT(2'h2)) 
    i_22
       (.I0(CMD[21]),
        .O(CPROT[2]));
  LUT1 #(
    .INIT(2'h2)) 
    i_23
       (.I0(CMD[20]),
        .O(CPROT[1]));
  LUT1 #(
    .INIT(2'h2)) 
    i_24
       (.I0(CMD[19]),
        .O(CPROT[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(CMD[23]),
        .O(CBURST[0]));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(CMD[11]),
        .O(CLENGTH[11]));
  LUT1 #(
    .INIT(2'h2)) 
    i_5
       (.I0(CMD[10]),
        .O(CLENGTH[10]));
  LUT1 #(
    .INIT(2'h2)) 
    i_6
       (.I0(CMD[9]),
        .O(CLENGTH[9]));
  LUT1 #(
    .INIT(2'h2)) 
    i_7
       (.I0(CMD[8]),
        .O(CLENGTH[8]));
  LUT1 #(
    .INIT(2'h2)) 
    i_8
       (.I0(CMD[7]),
        .O(CLENGTH[7]));
  LUT1 #(
    .INIT(2'h2)) 
    i_9
       (.I0(CMD[6]),
        .O(CLENGTH[6]));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[0]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[3]_i_2_n_7 ),
        .I3(rd_cnt[0]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[10]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[11]_i_2_n_5 ),
        .I3(rd_cnt[10]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[11]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[11]_i_2_n_4 ),
        .I3(rd_cnt[11]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[12]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[15]_i_2_n_7 ),
        .I3(rd_cnt[12]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[13]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[15]_i_2_n_6 ),
        .I3(rd_cnt[13]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[14]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[15]_i_2_n_5 ),
        .I3(rd_cnt[14]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[15]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[15]_i_2_n_4 ),
        .I3(rd_cnt[15]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h3F3F3F3F3B3F3F3F)) 
    \rd_cnt[15]_i_3 
       (.I0(CWRITE),
        .I1(state_cmd[0]),
        .I2(state_cmd[1]),
        .I3(cmd_ready),
        .I4(cmd_valid),
        .I5(CEI),
        .O(\rd_cnt[15]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[1]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[3]_i_2_n_6 ),
        .I3(rd_cnt[1]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[2]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[3]_i_2_n_5 ),
        .I3(rd_cnt[2]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[3]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[3]_i_2_n_4 ),
        .I3(rd_cnt[3]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[3]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h6A)) 
    \rd_cnt[3]_i_3 
       (.I0(rd_cnt[0]),
        .I1(f2u_valid),
        .I2(f2u_ready),
        .O(\rd_cnt[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[4]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[7]_i_2_n_7 ),
        .I3(rd_cnt[4]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[5]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[7]_i_2_n_6 ),
        .I3(rd_cnt[5]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[6]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[7]_i_2_n_5 ),
        .I3(rd_cnt[6]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[7]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[7]_i_2_n_4 ),
        .I3(rd_cnt[7]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[8]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[11]_i_2_n_7 ),
        .I3(rd_cnt[8]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \rd_cnt[9]_i_1 
       (.I0(state_cmd[0]),
        .I1(state_cmd[1]),
        .I2(\rd_cnt_reg[11]_i_2_n_6 ),
        .I3(rd_cnt[9]),
        .I4(\rd_cnt[15]_i_3_n_0 ),
        .O(\rd_cnt[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[0]_i_1_n_0 ),
        .Q(rd_cnt[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[10] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[10]_i_1_n_0 ),
        .Q(rd_cnt[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[11] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[11]_i_1_n_0 ),
        .Q(rd_cnt[11]));
  CARRY4 \rd_cnt_reg[11]_i_2 
       (.CI(\rd_cnt_reg[7]_i_2_n_0 ),
        .CO({\rd_cnt_reg[11]_i_2_n_0 ,\rd_cnt_reg[11]_i_2_n_1 ,\rd_cnt_reg[11]_i_2_n_2 ,\rd_cnt_reg[11]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\rd_cnt_reg[11]_i_2_n_4 ,\rd_cnt_reg[11]_i_2_n_5 ,\rd_cnt_reg[11]_i_2_n_6 ,\rd_cnt_reg[11]_i_2_n_7 }),
        .S(rd_cnt[11:8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[12] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[12]_i_1_n_0 ),
        .Q(rd_cnt[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[13] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[13]_i_1_n_0 ),
        .Q(rd_cnt[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[14] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[14]_i_1_n_0 ),
        .Q(rd_cnt[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[15] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[15]_i_1_n_0 ),
        .Q(rd_cnt[15]));
  CARRY4 \rd_cnt_reg[15]_i_2 
       (.CI(\rd_cnt_reg[11]_i_2_n_0 ),
        .CO({\NLW_rd_cnt_reg[15]_i_2_CO_UNCONNECTED [3],\rd_cnt_reg[15]_i_2_n_1 ,\rd_cnt_reg[15]_i_2_n_2 ,\rd_cnt_reg[15]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\rd_cnt_reg[15]_i_2_n_4 ,\rd_cnt_reg[15]_i_2_n_5 ,\rd_cnt_reg[15]_i_2_n_6 ,\rd_cnt_reg[15]_i_2_n_7 }),
        .S(rd_cnt[15:12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[1]_i_1_n_0 ),
        .Q(rd_cnt[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[2]_i_1_n_0 ),
        .Q(rd_cnt[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[3]_i_1_n_0 ),
        .Q(rd_cnt[3]));
  CARRY4 \rd_cnt_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\rd_cnt_reg[3]_i_2_n_0 ,\rd_cnt_reg[3]_i_2_n_1 ,\rd_cnt_reg[3]_i_2_n_2 ,\rd_cnt_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,rd_cnt[0]}),
        .O({\rd_cnt_reg[3]_i_2_n_4 ,\rd_cnt_reg[3]_i_2_n_5 ,\rd_cnt_reg[3]_i_2_n_6 ,\rd_cnt_reg[3]_i_2_n_7 }),
        .S({rd_cnt[3:1],\rd_cnt[3]_i_3_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[4] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[4]_i_1_n_0 ),
        .Q(rd_cnt[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[5] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[5]_i_1_n_0 ),
        .Q(rd_cnt[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[6] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[6]_i_1_n_0 ),
        .Q(rd_cnt[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[7] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[7]_i_1_n_0 ),
        .Q(rd_cnt[7]));
  CARRY4 \rd_cnt_reg[7]_i_2 
       (.CI(\rd_cnt_reg[3]_i_2_n_0 ),
        .CO({\rd_cnt_reg[7]_i_2_n_0 ,\rd_cnt_reg[7]_i_2_n_1 ,\rd_cnt_reg[7]_i_2_n_2 ,\rd_cnt_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\rd_cnt_reg[7]_i_2_n_4 ,\rd_cnt_reg[7]_i_2_n_5 ,\rd_cnt_reg[7]_i_2_n_6 ,\rd_cnt_reg[7]_i_2_n_7 }),
        .S(rd_cnt[7:4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[8] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[8]_i_1_n_0 ),
        .Q(rd_cnt[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \rd_cnt_reg[9] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\rd_cnt[9]_i_1_n_0 ),
        .Q(rd_cnt[9]));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[0]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[0]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[3]_i_2_n_7 ),
        .I4(CADDR[0]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[10]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[10]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[11]_i_2_n_5 ),
        .I4(CADDR[10]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[11]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[11]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[11]_i_2_n_4 ),
        .I4(CADDR[11]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[12]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[12]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[15]_i_2_n_7 ),
        .I4(CADDR[12]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[13]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[13]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[15]_i_2_n_6 ),
        .I4(CADDR[13]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[14]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[14]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[15]_i_2_n_5 ),
        .I4(CADDR[14]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[15]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[15]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[15]_i_2_n_4 ),
        .I4(CADDR[15]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[16]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[16]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[19]_i_2_n_7 ),
        .I4(CADDR[16]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[17]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[17]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[19]_i_2_n_6 ),
        .I4(CADDR[17]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[18]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[18]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[19]_i_2_n_5 ),
        .I4(CADDR[18]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[19]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[19]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[19]_i_2_n_4 ),
        .I4(CADDR[19]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[1]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[1]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[3]_i_2_n_6 ),
        .I4(CADDR[1]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[20]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[20]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[23]_i_2_n_7 ),
        .I4(CADDR[20]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[21]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[21]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[23]_i_2_n_6 ),
        .I4(CADDR[21]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[22]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[22]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[23]_i_2_n_5 ),
        .I4(CADDR[22]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[23]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[23]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[23]_i_2_n_4 ),
        .I4(CADDR[23]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[24]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[24]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[27]_i_2_n_7 ),
        .I4(CADDR[24]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[25]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[25]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[27]_i_2_n_6 ),
        .I4(CADDR[25]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[26]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[26]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[27]_i_2_n_5 ),
        .I4(CADDR[26]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[27]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[27]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[27]_i_2_n_4 ),
        .I4(CADDR[27]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[28]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[28]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[31]_i_4_n_7 ),
        .I4(CADDR[28]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[29]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[29]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[31]_i_4_n_6 ),
        .I4(CADDR[29]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[2]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[2]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[3]_i_2_n_5 ),
        .I4(CADDR[2]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[30]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[30]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[31]_i_4_n_5 ),
        .I4(CADDR[30]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[31]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[31]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[31]_i_4_n_4 ),
        .I4(CADDR[31]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h11111111FF5F775F)) 
    \read_HADDR[31]_i_2 
       (.I0(\read_HADDR[31]_i_6_n_0 ),
        .I1(HREADY),
        .I2(read_HBUSREQ1),
        .I3(\read_HADDR[31]_i_7_n_0 ),
        .I4(\state_read[2]_i_3_n_0 ),
        .I5(\read_HADDR[31]_i_8_n_0 ),
        .O(\read_HADDR[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0008002A00000000)) 
    \read_HADDR[31]_i_3 
       (.I0(state_read[1]),
        .I1(state_read[2]),
        .I2(state_read[0]),
        .I3(state_read[3]),
        .I4(\state_read[2]_i_3_n_0 ),
        .I5(HREADY),
        .O(\read_HADDR[31]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \read_HADDR[31]_i_5 
       (.I0(read_HBUSREQ1),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(state_read[0]),
        .I4(state_read[2]),
        .O(\read_HADDR[31]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hAFAC)) 
    \read_HADDR[31]_i_6 
       (.I0(state_read[3]),
        .I1(state_read[0]),
        .I2(state_read[2]),
        .I3(state_read[1]),
        .O(\read_HADDR[31]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hFBEF)) 
    \read_HADDR[31]_i_7 
       (.I0(state_read[3]),
        .I1(state_read[1]),
        .I2(state_read[0]),
        .I3(state_read[2]),
        .O(\read_HADDR[31]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hBAA8)) 
    \read_HADDR[31]_i_8 
       (.I0(state_read[3]),
        .I1(state_read[0]),
        .I2(state_read[2]),
        .I3(state_read[1]),
        .O(\read_HADDR[31]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[3]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[3]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[3]_i_2_n_4 ),
        .I4(CADDR[3]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \read_HADDR[3]_i_3 
       (.I0(read_HADDR[2]),
        .I1(read_bnum[2]),
        .O(\read_HADDR[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \read_HADDR[3]_i_4 
       (.I0(read_HADDR[1]),
        .I1(read_bnum[1]),
        .O(\read_HADDR[3]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \read_HADDR[3]_i_5 
       (.I0(read_HADDR[0]),
        .I1(read_bnum[0]),
        .O(\read_HADDR[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[4]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[4]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[7]_i_2_n_7 ),
        .I4(CADDR[4]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[5]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[5]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[7]_i_2_n_6 ),
        .I4(CADDR[5]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[6]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[6]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[7]_i_2_n_5 ),
        .I4(CADDR[6]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[7]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[7]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[7]_i_2_n_4 ),
        .I4(CADDR[7]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[8]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[8]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[11]_i_2_n_7 ),
        .I4(CADDR[8]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_HADDR[9]_i_1 
       (.I0(\read_HADDR[31]_i_2_n_0 ),
        .I1(read_HADDR[9]),
        .I2(\read_HADDR[31]_i_3_n_0 ),
        .I3(\read_HADDR_reg[11]_i_2_n_6 ),
        .I4(CADDR[9]),
        .I5(\read_HADDR[31]_i_5_n_0 ),
        .O(\read_HADDR[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[0]_i_1_n_0 ),
        .Q(read_HADDR[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[10] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[10]_i_1_n_0 ),
        .Q(read_HADDR[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[11] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[11]_i_1_n_0 ),
        .Q(read_HADDR[11]));
  CARRY4 \read_HADDR_reg[11]_i_2 
       (.CI(\read_HADDR_reg[7]_i_2_n_0 ),
        .CO({\read_HADDR_reg[11]_i_2_n_0 ,\read_HADDR_reg[11]_i_2_n_1 ,\read_HADDR_reg[11]_i_2_n_2 ,\read_HADDR_reg[11]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\read_HADDR_reg[11]_i_2_n_4 ,\read_HADDR_reg[11]_i_2_n_5 ,\read_HADDR_reg[11]_i_2_n_6 ,\read_HADDR_reg[11]_i_2_n_7 }),
        .S(read_HADDR[11:8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[12] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[12]_i_1_n_0 ),
        .Q(read_HADDR[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[13] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[13]_i_1_n_0 ),
        .Q(read_HADDR[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[14] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[14]_i_1_n_0 ),
        .Q(read_HADDR[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[15] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[15]_i_1_n_0 ),
        .Q(read_HADDR[15]));
  CARRY4 \read_HADDR_reg[15]_i_2 
       (.CI(\read_HADDR_reg[11]_i_2_n_0 ),
        .CO({\read_HADDR_reg[15]_i_2_n_0 ,\read_HADDR_reg[15]_i_2_n_1 ,\read_HADDR_reg[15]_i_2_n_2 ,\read_HADDR_reg[15]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\read_HADDR_reg[15]_i_2_n_4 ,\read_HADDR_reg[15]_i_2_n_5 ,\read_HADDR_reg[15]_i_2_n_6 ,\read_HADDR_reg[15]_i_2_n_7 }),
        .S(read_HADDR[15:12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[16] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[16]_i_1_n_0 ),
        .Q(read_HADDR[16]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[17] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[17]_i_1_n_0 ),
        .Q(read_HADDR[17]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[18] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[18]_i_1_n_0 ),
        .Q(read_HADDR[18]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[19] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[19]_i_1_n_0 ),
        .Q(read_HADDR[19]));
  CARRY4 \read_HADDR_reg[19]_i_2 
       (.CI(\read_HADDR_reg[15]_i_2_n_0 ),
        .CO({\read_HADDR_reg[19]_i_2_n_0 ,\read_HADDR_reg[19]_i_2_n_1 ,\read_HADDR_reg[19]_i_2_n_2 ,\read_HADDR_reg[19]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\read_HADDR_reg[19]_i_2_n_4 ,\read_HADDR_reg[19]_i_2_n_5 ,\read_HADDR_reg[19]_i_2_n_6 ,\read_HADDR_reg[19]_i_2_n_7 }),
        .S(read_HADDR[19:16]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[1]_i_1_n_0 ),
        .Q(read_HADDR[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[20] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[20]_i_1_n_0 ),
        .Q(read_HADDR[20]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[21] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[21]_i_1_n_0 ),
        .Q(read_HADDR[21]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[22] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[22]_i_1_n_0 ),
        .Q(read_HADDR[22]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[23] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[23]_i_1_n_0 ),
        .Q(read_HADDR[23]));
  CARRY4 \read_HADDR_reg[23]_i_2 
       (.CI(\read_HADDR_reg[19]_i_2_n_0 ),
        .CO({\read_HADDR_reg[23]_i_2_n_0 ,\read_HADDR_reg[23]_i_2_n_1 ,\read_HADDR_reg[23]_i_2_n_2 ,\read_HADDR_reg[23]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\read_HADDR_reg[23]_i_2_n_4 ,\read_HADDR_reg[23]_i_2_n_5 ,\read_HADDR_reg[23]_i_2_n_6 ,\read_HADDR_reg[23]_i_2_n_7 }),
        .S(read_HADDR[23:20]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[24] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[24]_i_1_n_0 ),
        .Q(read_HADDR[24]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[25] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[25]_i_1_n_0 ),
        .Q(read_HADDR[25]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[26] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[26]_i_1_n_0 ),
        .Q(read_HADDR[26]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[27] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[27]_i_1_n_0 ),
        .Q(read_HADDR[27]));
  CARRY4 \read_HADDR_reg[27]_i_2 
       (.CI(\read_HADDR_reg[23]_i_2_n_0 ),
        .CO({\read_HADDR_reg[27]_i_2_n_0 ,\read_HADDR_reg[27]_i_2_n_1 ,\read_HADDR_reg[27]_i_2_n_2 ,\read_HADDR_reg[27]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\read_HADDR_reg[27]_i_2_n_4 ,\read_HADDR_reg[27]_i_2_n_5 ,\read_HADDR_reg[27]_i_2_n_6 ,\read_HADDR_reg[27]_i_2_n_7 }),
        .S(read_HADDR[27:24]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[28] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[28]_i_1_n_0 ),
        .Q(read_HADDR[28]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[29] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[29]_i_1_n_0 ),
        .Q(read_HADDR[29]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[2]_i_1_n_0 ),
        .Q(read_HADDR[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[30] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[30]_i_1_n_0 ),
        .Q(read_HADDR[30]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[31] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_HADDR[31]_i_1_n_0 ),
        .Q(read_HADDR[31]));
  CARRY4 \read_HADDR_reg[31]_i_4 
       (.CI(\read_HADDR_reg[27]_i_2_n_0 ),
        .CO({\NLW_read_HADDR_reg[31]_i_4_CO_UNCONNECTED [3],\read_HADDR_reg[31]_i_4_n_1 ,\read_HADDR_reg[31]_i_4_n_2 ,\read_HADDR_reg[31]_i_4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\read_HADDR_reg[31]_i_4_n_4 ,\read_HADDR_reg[31]_i_4_n_5 ,\read_HADDR_reg[31]_i_4_n_6 ,\read_HADDR_reg[31]_i_4_n_7 }),
        .S(read_HADDR[31:28]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[3]_i_1_n_0 ),
        .Q(read_HADDR[3]));
  CARRY4 \read_HADDR_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\read_HADDR_reg[3]_i_2_n_0 ,\read_HADDR_reg[3]_i_2_n_1 ,\read_HADDR_reg[3]_i_2_n_2 ,\read_HADDR_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,read_HADDR[2:0]}),
        .O({\read_HADDR_reg[3]_i_2_n_4 ,\read_HADDR_reg[3]_i_2_n_5 ,\read_HADDR_reg[3]_i_2_n_6 ,\read_HADDR_reg[3]_i_2_n_7 }),
        .S({read_HADDR[3],\read_HADDR[3]_i_3_n_0 ,\read_HADDR[3]_i_4_n_0 ,\read_HADDR[3]_i_5_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[4] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[4]_i_1_n_0 ),
        .Q(read_HADDR[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[5] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[5]_i_1_n_0 ),
        .Q(read_HADDR[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[6] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[6]_i_1_n_0 ),
        .Q(read_HADDR[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[7] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[7]_i_1_n_0 ),
        .Q(read_HADDR[7]));
  CARRY4 \read_HADDR_reg[7]_i_2 
       (.CI(\read_HADDR_reg[3]_i_2_n_0 ),
        .CO({\read_HADDR_reg[7]_i_2_n_0 ,\read_HADDR_reg[7]_i_2_n_1 ,\read_HADDR_reg[7]_i_2_n_2 ,\read_HADDR_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\read_HADDR_reg[7]_i_2_n_4 ,\read_HADDR_reg[7]_i_2_n_5 ,\read_HADDR_reg[7]_i_2_n_6 ,\read_HADDR_reg[7]_i_2_n_7 }),
        .S(read_HADDR[7:4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[8] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[8]_i_1_n_0 ),
        .Q(read_HADDR[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HADDR_reg[9] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HADDR[9]_i_1_n_0 ),
        .Q(read_HADDR[9]));
  LUT4 #(
    .INIT(16'hF888)) 
    \read_HBURST[0]_i_1 
       (.I0(CBURST[0]),
        .I1(read_HBUSREQ_i_2_n_0),
        .I2(read_HBURST[0]),
        .I3(\read_HPROT[3]_i_2_n_0 ),
        .O(\read_HBURST[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \read_HBURST[1]_i_1 
       (.I0(CBURST[1]),
        .I1(read_HBUSREQ_i_2_n_0),
        .I2(read_HBURST[1]),
        .I3(\read_HPROT[3]_i_2_n_0 ),
        .O(\read_HBURST[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \read_HBURST[2]_i_1 
       (.I0(CBURST[2]),
        .I1(read_HBUSREQ_i_2_n_0),
        .I2(read_HBURST[2]),
        .I3(\read_HPROT[3]_i_2_n_0 ),
        .O(\read_HBURST[2]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HBURST_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HBURST[0]_i_1_n_0 ),
        .Q(read_HBURST[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HBURST_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HBURST[1]_i_1_n_0 ),
        .Q(read_HBURST[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HBURST_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HBURST[2]_i_1_n_0 ),
        .Q(read_HBURST[2]));
  LUT6 #(
    .INIT(64'hFFFEFEFEFCFCFCFC)) 
    read_HBUSREQ_i_1
       (.I0(read_HBUSREQ_i_2_n_0),
        .I1(read_HBUSREQ_i_3_n_0),
        .I2(read_HBUSREQ_i_4_n_0),
        .I3(HREADY),
        .I4(\state_read[1]_i_2_n_0 ),
        .I5(read_HBUSREQ_i_5_n_0),
        .O(read_HBUSREQ_i_1_n_0));
  LUT5 #(
    .INIT(32'h00000040)) 
    read_HBUSREQ_i_2
       (.I0(state_read[3]),
        .I1(state_read[0]),
        .I2(read_HBUSREQ1),
        .I3(state_read[1]),
        .I4(state_read[2]),
        .O(read_HBUSREQ_i_2_n_0));
  LUT6 #(
    .INIT(64'h22002200FFF02200)) 
    read_HBUSREQ_i_3
       (.I0(read_HBUSREQ_i_6_n_0),
        .I1(HREADY),
        .I2(read_HBUSREQ_i_7_n_0),
        .I3(read_HBUSREQ),
        .I4(read_HBUSREQ_i_8_n_0),
        .I5(state_read[0]),
        .O(read_HBUSREQ_i_3_n_0));
  LUT5 #(
    .INIT(32'h40404044)) 
    read_HBUSREQ_i_4
       (.I0(state_read[3]),
        .I1(read_HBUSREQ),
        .I2(state_read[2]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .O(read_HBUSREQ_i_4_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    read_HBUSREQ_i_5
       (.I0(read_beats[12]),
        .I1(read_beats[10]),
        .I2(read_beats[11]),
        .I3(\state_read[2]_i_10_n_0 ),
        .I4(\state_read[2]_i_8_n_0 ),
        .O(read_HBUSREQ_i_5_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    read_HBUSREQ_i_6
       (.I0(state_read[1]),
        .I1(state_read[3]),
        .O(read_HBUSREQ_i_6_n_0));
  LUT3 #(
    .INIT(8'h02)) 
    read_HBUSREQ_i_7
       (.I0(read_go),
        .I1(CEI),
        .I2(state_read[3]),
        .O(read_HBUSREQ_i_7_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    read_HBUSREQ_i_8
       (.I0(state_read[1]),
        .I1(state_read[2]),
        .O(read_HBUSREQ_i_8_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    read_HBUSREQ_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(read_HBUSREQ_i_1_n_0),
        .Q(read_HBUSREQ));
  LUT4 #(
    .INIT(16'hF888)) 
    \read_HPROT[0]_i_1 
       (.I0(CPROT[0]),
        .I1(read_HBUSREQ_i_2_n_0),
        .I2(read_HPROT[0]),
        .I3(\read_HPROT[3]_i_2_n_0 ),
        .O(\read_HPROT[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \read_HPROT[1]_i_1 
       (.I0(CPROT[1]),
        .I1(read_HBUSREQ_i_2_n_0),
        .I2(read_HPROT[1]),
        .I3(\read_HPROT[3]_i_2_n_0 ),
        .O(\read_HPROT[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \read_HPROT[2]_i_1 
       (.I0(CPROT[2]),
        .I1(read_HBUSREQ_i_2_n_0),
        .I2(read_HPROT[2]),
        .I3(\read_HPROT[3]_i_2_n_0 ),
        .O(\read_HPROT[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \read_HPROT[3]_i_1 
       (.I0(CPROT[3]),
        .I1(read_HBUSREQ_i_2_n_0),
        .I2(read_HPROT[3]),
        .I3(\read_HPROT[3]_i_2_n_0 ),
        .O(\read_HPROT[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00FD03FF)) 
    \read_HPROT[3]_i_2 
       (.I0(read_HBUSREQ1),
        .I1(state_read[1]),
        .I2(state_read[2]),
        .I3(state_read[3]),
        .I4(state_read[0]),
        .O(\read_HPROT[3]_i_2_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HPROT_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\read_HPROT[0]_i_1_n_0 ),
        .Q(read_HPROT[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HPROT_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\read_HPROT[1]_i_1_n_0 ),
        .Q(read_HPROT[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HPROT_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\read_HPROT[2]_i_1_n_0 ),
        .Q(read_HPROT[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HPROT_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\read_HPROT[3]_i_1_n_0 ),
        .Q(read_HPROT[3]));
  LUT4 #(
    .INIT(16'hF888)) 
    \read_HSIZE[0]_i_1 
       (.I0(CSIZE[0]),
        .I1(read_HBUSREQ_i_2_n_0),
        .I2(read_HSIZE[0]),
        .I3(\read_HPROT[3]_i_2_n_0 ),
        .O(\read_HSIZE[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \read_HSIZE[1]_i_1 
       (.I0(CSIZE[1]),
        .I1(read_HBUSREQ_i_2_n_0),
        .I2(read_HSIZE[1]),
        .I3(\read_HPROT[3]_i_2_n_0 ),
        .O(\read_HSIZE[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00FD03FF00000000)) 
    \read_HSIZE[2]_i_1 
       (.I0(read_HBUSREQ1),
        .I1(state_read[1]),
        .I2(state_read[2]),
        .I3(state_read[3]),
        .I4(state_read[0]),
        .I5(read_HSIZE[2]),
        .O(\read_HSIZE[2]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HSIZE_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HSIZE[0]_i_1_n_0 ),
        .Q(read_HSIZE[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HSIZE_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HSIZE[1]_i_1_n_0 ),
        .Q(read_HSIZE[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HSIZE_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_HSIZE[2]_i_1_n_0 ),
        .Q(read_HSIZE[2]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFF08)) 
    \read_HTRANS[0]_i_1 
       (.I0(state_read[2]),
        .I1(read_HTRANS[0]),
        .I2(state_read[3]),
        .I3(\read_HTRANS[1]_i_4_n_0 ),
        .I4(\read_HTRANS[0]_i_2_n_0 ),
        .I5(\read_HTRANS[0]_i_3_n_0 ),
        .O(\read_HTRANS[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF07000000)) 
    \read_HTRANS[0]_i_2 
       (.I0(\state_read[2]_i_3_n_0 ),
        .I1(HREADY),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HTRANS[0]),
        .I5(\read_HTRANS[0]_i_4_n_0 ),
        .O(\read_HTRANS[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000053F00000000)) 
    \read_HTRANS[0]_i_3 
       (.I0(state_read[2]),
        .I1(read_HBUSREQ1),
        .I2(state_read[0]),
        .I3(state_read[3]),
        .I4(state_read[1]),
        .I5(read_HTRANS[0]),
        .O(\read_HTRANS[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00200000)) 
    \read_HTRANS[0]_i_4 
       (.I0(HREADY),
        .I1(state_read[3]),
        .I2(state_read[2]),
        .I3(state_read[0]),
        .I4(state_read[1]),
        .O(\read_HTRANS[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFF8)) 
    \read_HTRANS[1]_i_1 
       (.I0(\read_HTRANS[1]_i_2_n_0 ),
        .I1(read_HTRANS[1]),
        .I2(\read_HTRANS[1]_i_3_n_0 ),
        .I3(\read_HTRANS[1]_i_4_n_0 ),
        .I4(\read_HTRANS[1]_i_5_n_0 ),
        .O(\read_HTRANS[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0100)) 
    \read_HTRANS[1]_i_2 
       (.I0(state_read[1]),
        .I1(state_read[2]),
        .I2(state_read[0]),
        .I3(state_read[3]),
        .O(\read_HTRANS[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h4404040404040404)) 
    \read_HTRANS[1]_i_3 
       (.I0(state_read[3]),
        .I1(read_HTRANS[1]),
        .I2(HREADY),
        .I3(state_read[0]),
        .I4(state_read[2]),
        .I5(state_read[1]),
        .O(\read_HTRANS[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAEA)) 
    \read_HTRANS[1]_i_4 
       (.I0(\read_HTRANS[1]_i_6_n_0 ),
        .I1(read_HBUSREQ2),
        .I2(state_read[3]),
        .I3(state_read[0]),
        .I4(state_read[2]),
        .I5(state_read[1]),
        .O(\read_HTRANS[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00001000)) 
    \read_HTRANS[1]_i_5 
       (.I0(state_read[3]),
        .I1(state_read[1]),
        .I2(read_HBUSREQ1),
        .I3(state_read[0]),
        .I4(state_read[2]),
        .I5(\read_HTRANS[1]_i_7_n_0 ),
        .O(\read_HTRANS[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h000000000008000A)) 
    \read_HTRANS[1]_i_6 
       (.I0(state_read[1]),
        .I1(state_read[0]),
        .I2(state_read[2]),
        .I3(state_read[3]),
        .I4(\state_read[2]_i_5_n_0 ),
        .I5(\state_read[0]_i_2_n_0 ),
        .O(\read_HTRANS[1]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h0202020A)) 
    \read_HTRANS[1]_i_7 
       (.I0(read_HTRANS[1]),
        .I1(state_read[1]),
        .I2(state_read[3]),
        .I3(\state_read[2]_i_3_n_0 ),
        .I4(state_read[2]),
        .O(\read_HTRANS[1]_i_7_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HTRANS_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\read_HTRANS[0]_i_1_n_0 ),
        .Q(read_HTRANS[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_HTRANS_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\read_HTRANS[1]_i_1_n_0 ),
        .Q(read_HTRANS[1]));
  LUT6 #(
    .INIT(64'h00FD03FF00000000)) 
    read_HWRITE_i_1
       (.I0(read_HBUSREQ1),
        .I1(state_read[1]),
        .I2(state_read[2]),
        .I3(state_read[3]),
        .I4(state_read[0]),
        .I5(read_HWRITE),
        .O(read_HWRITE_i_1_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA8)) 
    read_HWRITE_i_2
       (.I0(read_HWRITE_i_3_n_0),
        .I1(\state_read[3]_i_4_n_0 ),
        .I2(read_HWRITE_i_4_n_0),
        .I3(read_HBUSREQ30_in),
        .I4(f2u_rooms[6]),
        .I5(\state_read[3]_i_3_n_0 ),
        .O(read_HBUSREQ1));
  LUT3 #(
    .INIT(8'h80)) 
    read_HWRITE_i_3
       (.I0(HREADY),
        .I1(HGRANT),
        .I2(f2u_ready),
        .O(read_HWRITE_i_3_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    read_HWRITE_i_4
       (.I0(f2u_rooms[5]),
        .I1(f2u_rooms[8]),
        .O(read_HWRITE_i_4_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    read_HWRITE_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(read_HWRITE_i_1_n_0),
        .Q(read_HWRITE));
  LUT5 #(
    .INIT(32'hF2FFF222)) 
    \read_beats[0]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(CLENGTH[0]),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[0]),
        .I4(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[10]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(\read_beats_reg[12]_i_3_n_6 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[10]),
        .I4(\read_beats_reg[12]_i_5_n_6 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[11]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(\read_beats_reg[12]_i_3_n_5 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[11]),
        .I4(\read_beats_reg[12]_i_5_n_5 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[12]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(\read_beats_reg[12]_i_3_n_0 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[12]),
        .I4(\read_beats_reg[12]_i_5_n_4 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[12]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[12]_i_10 
       (.I0(read_beats[10]),
        .O(\read_beats[12]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[12]_i_11 
       (.I0(read_beats[9]),
        .O(\read_beats[12]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h0000000020003000)) 
    \read_beats[12]_i_12 
       (.I0(state_read[0]),
        .I1(state_read[2]),
        .I2(state_read[1]),
        .I3(HREADY),
        .I4(\state_read[2]_i_3_n_0 ),
        .I5(state_read[3]),
        .O(\read_beats[12]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'h222A)) 
    \read_beats[12]_i_2 
       (.I0(\read_beats[3]_i_2_n_0 ),
        .I1(CBURST[0]),
        .I2(CBURST[1]),
        .I3(CBURST[2]),
        .O(\read_beats[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00BA03BA00AA03AA)) 
    \read_beats[12]_i_4 
       (.I0(\read_beats[12]_i_7_n_0 ),
        .I1(read_done_i_2_n_0),
        .I2(state_read[1]),
        .I3(state_read[3]),
        .I4(read_HBUSREQ2),
        .I5(\state_read[2]_i_3_n_0 ),
        .O(\read_beats[12]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000008)) 
    \read_beats[12]_i_6 
       (.I0(read_HBUSREQ2),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(state_read[0]),
        .I4(state_read[2]),
        .I5(\read_beats[12]_i_12_n_0 ),
        .O(\read_beats[12]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF0F0DFFFFFFFD)) 
    \read_beats[12]_i_7 
       (.I0(read_go),
        .I1(CEI),
        .I2(state_read[1]),
        .I3(state_read[0]),
        .I4(state_read[2]),
        .I5(HREADY),
        .O(\read_beats[12]_i_7_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[12]_i_8 
       (.I0(read_beats[12]),
        .O(\read_beats[12]_i_8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[12]_i_9 
       (.I0(read_beats[11]),
        .O(\read_beats[12]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[1]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(\read_beats_reg[1]_i_2_n_7 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[1]),
        .I4(\read_beats_reg[4]_i_2_n_7 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[2]_i_1 
       (.I0(\read_beats[3]_i_2_n_0 ),
        .I1(\read_beats[2]_i_2_n_0 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[2]),
        .I4(\read_beats_reg[4]_i_2_n_6 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0CEC)) 
    \read_beats[2]_i_2 
       (.I0(CBURST[1]),
        .I1(\read_beats_reg[1]_i_2_n_6 ),
        .I2(CBURST[0]),
        .I3(CBURST[2]),
        .O(\read_beats[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[3]_i_1 
       (.I0(\read_beats[3]_i_2_n_0 ),
        .I1(\read_beats[3]_i_3_n_0 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[3]),
        .I4(\read_beats_reg[4]_i_2_n_5 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \read_beats[3]_i_2 
       (.I0(state_read[3]),
        .I1(CEI),
        .I2(read_go),
        .I3(state_read[1]),
        .I4(state_read[0]),
        .I5(state_read[2]),
        .O(\read_beats[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0CEC)) 
    \read_beats[3]_i_3 
       (.I0(CBURST[2]),
        .I1(\read_beats_reg[1]_i_2_n_5 ),
        .I2(CBURST[0]),
        .I3(CBURST[1]),
        .O(\read_beats[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \read_beats[4]_i_1 
       (.I0(\read_beats[12]_i_4_n_0 ),
        .I1(read_beats[4]),
        .I2(\read_beats[12]_i_6_n_0 ),
        .I3(\read_beats_reg[4]_i_2_n_4 ),
        .I4(\read_beats[4]_i_3_n_0 ),
        .O(\read_beats[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hC8080888)) 
    \read_beats[4]_i_3 
       (.I0(\read_beats_reg[1]_i_2_n_4 ),
        .I1(\read_beats[3]_i_2_n_0 ),
        .I2(CBURST[0]),
        .I3(CBURST[1]),
        .I4(CBURST[2]),
        .O(\read_beats[4]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[4]_i_4 
       (.I0(read_beats[4]),
        .O(\read_beats[4]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[4]_i_5 
       (.I0(read_beats[3]),
        .O(\read_beats[4]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[4]_i_6 
       (.I0(read_beats[2]),
        .O(\read_beats[4]_i_6_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[4]_i_7 
       (.I0(read_beats[1]),
        .O(\read_beats[4]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[5]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(\read_beats_reg[8]_i_2_n_7 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[5]),
        .I4(\read_beats_reg[8]_i_3_n_7 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[6]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(\read_beats_reg[8]_i_2_n_6 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[6]),
        .I4(\read_beats_reg[8]_i_3_n_6 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[7]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(\read_beats_reg[8]_i_2_n_5 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[7]),
        .I4(\read_beats_reg[8]_i_3_n_5 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[8]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(\read_beats_reg[8]_i_2_n_4 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[8]),
        .I4(\read_beats_reg[8]_i_3_n_4 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[8]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[8]_i_4 
       (.I0(read_beats[8]),
        .O(\read_beats[8]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[8]_i_5 
       (.I0(read_beats[7]),
        .O(\read_beats[8]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[8]_i_6 
       (.I0(read_beats[6]),
        .O(\read_beats[8]_i_6_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_beats[8]_i_7 
       (.I0(read_beats[5]),
        .O(\read_beats[8]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \read_beats[9]_i_1 
       (.I0(\read_beats[12]_i_2_n_0 ),
        .I1(\read_beats_reg[12]_i_3_n_7 ),
        .I2(\read_beats[12]_i_4_n_0 ),
        .I3(read_beats[9]),
        .I4(\read_beats_reg[12]_i_5_n_7 ),
        .I5(\read_beats[12]_i_6_n_0 ),
        .O(\read_beats[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[0]_i_1_n_0 ),
        .Q(read_beats[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[10] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[10]_i_1_n_0 ),
        .Q(read_beats[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[11] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[11]_i_1_n_0 ),
        .Q(read_beats[11]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[12] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[12]_i_1_n_0 ),
        .Q(read_beats[12]));
  CARRY4 \read_beats_reg[12]_i_3 
       (.CI(\read_beats_reg[8]_i_2_n_0 ),
        .CO({\read_beats_reg[12]_i_3_n_0 ,\NLW_read_beats_reg[12]_i_3_CO_UNCONNECTED [2],\read_beats_reg[12]_i_3_n_2 ,\read_beats_reg[12]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_read_beats_reg[12]_i_3_O_UNCONNECTED [3],\read_beats_reg[12]_i_3_n_5 ,\read_beats_reg[12]_i_3_n_6 ,\read_beats_reg[12]_i_3_n_7 }),
        .S({1'b1,CLENGTH[11:9]}));
  CARRY4 \read_beats_reg[12]_i_5 
       (.CI(\read_beats_reg[8]_i_3_n_0 ),
        .CO({\NLW_read_beats_reg[12]_i_5_CO_UNCONNECTED [3],\read_beats_reg[12]_i_5_n_1 ,\read_beats_reg[12]_i_5_n_2 ,\read_beats_reg[12]_i_5_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,read_beats[11:9]}),
        .O({\read_beats_reg[12]_i_5_n_4 ,\read_beats_reg[12]_i_5_n_5 ,\read_beats_reg[12]_i_5_n_6 ,\read_beats_reg[12]_i_5_n_7 }),
        .S({\read_beats[12]_i_8_n_0 ,\read_beats[12]_i_9_n_0 ,\read_beats[12]_i_10_n_0 ,\read_beats[12]_i_11_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[1]_i_1_n_0 ),
        .Q(read_beats[1]));
  CARRY4 \read_beats_reg[1]_i_2 
       (.CI(1'b0),
        .CO({\read_beats_reg[1]_i_2_n_0 ,\read_beats_reg[1]_i_2_n_1 ,\read_beats_reg[1]_i_2_n_2 ,\read_beats_reg[1]_i_2_n_3 }),
        .CYINIT(CLENGTH[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\read_beats_reg[1]_i_2_n_4 ,\read_beats_reg[1]_i_2_n_5 ,\read_beats_reg[1]_i_2_n_6 ,\read_beats_reg[1]_i_2_n_7 }),
        .S(CLENGTH[4:1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[2]_i_1_n_0 ),
        .Q(read_beats[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[3]_i_1_n_0 ),
        .Q(read_beats[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[4] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[4]_i_1_n_0 ),
        .Q(read_beats[4]));
  CARRY4 \read_beats_reg[4]_i_2 
       (.CI(1'b0),
        .CO({\read_beats_reg[4]_i_2_n_0 ,\read_beats_reg[4]_i_2_n_1 ,\read_beats_reg[4]_i_2_n_2 ,\read_beats_reg[4]_i_2_n_3 }),
        .CYINIT(read_beats[0]),
        .DI(read_beats[4:1]),
        .O({\read_beats_reg[4]_i_2_n_4 ,\read_beats_reg[4]_i_2_n_5 ,\read_beats_reg[4]_i_2_n_6 ,\read_beats_reg[4]_i_2_n_7 }),
        .S({\read_beats[4]_i_4_n_0 ,\read_beats[4]_i_5_n_0 ,\read_beats[4]_i_6_n_0 ,\read_beats[4]_i_7_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[5] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[5]_i_1_n_0 ),
        .Q(read_beats[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[6] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[6]_i_1_n_0 ),
        .Q(read_beats[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[7] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[7]_i_1_n_0 ),
        .Q(read_beats[7]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[8] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[8]_i_1_n_0 ),
        .Q(read_beats[8]));
  CARRY4 \read_beats_reg[8]_i_2 
       (.CI(\read_beats_reg[1]_i_2_n_0 ),
        .CO({\read_beats_reg[8]_i_2_n_0 ,\read_beats_reg[8]_i_2_n_1 ,\read_beats_reg[8]_i_2_n_2 ,\read_beats_reg[8]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\read_beats_reg[8]_i_2_n_4 ,\read_beats_reg[8]_i_2_n_5 ,\read_beats_reg[8]_i_2_n_6 ,\read_beats_reg[8]_i_2_n_7 }),
        .S(CLENGTH[8:5]));
  CARRY4 \read_beats_reg[8]_i_3 
       (.CI(\read_beats_reg[4]_i_2_n_0 ),
        .CO({\read_beats_reg[8]_i_3_n_0 ,\read_beats_reg[8]_i_3_n_1 ,\read_beats_reg[8]_i_3_n_2 ,\read_beats_reg[8]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI(read_beats[8:5]),
        .O({\read_beats_reg[8]_i_3_n_4 ,\read_beats_reg[8]_i_3_n_5 ,\read_beats_reg[8]_i_3_n_6 ,\read_beats_reg[8]_i_3_n_7 }),
        .S({\read_beats[8]_i_4_n_0 ,\read_beats[8]_i_5_n_0 ,\read_beats[8]_i_6_n_0 ,\read_beats[8]_i_7_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_beats_reg[9] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_beats[9]_i_1_n_0 ),
        .Q(read_beats[9]));
  LUT6 #(
    .INIT(64'h0000F0F0F0F0F099)) 
    \read_bnum[0]_i_1 
       (.I0(CSIZE[0]),
        .I1(CSIZE[1]),
        .I2(read_bnum[0]),
        .I3(\read_bnum[2]_i_2_n_0 ),
        .I4(state_read[3]),
        .I5(\read_bnum[2]_i_3_n_0 ),
        .O(\read_bnum[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000F0F0F0F0F044)) 
    \read_bnum[1]_i_1 
       (.I0(CSIZE[1]),
        .I1(CSIZE[0]),
        .I2(read_bnum[1]),
        .I3(\read_bnum[2]_i_2_n_0 ),
        .I4(state_read[3]),
        .I5(\read_bnum[2]_i_3_n_0 ),
        .O(\read_bnum[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000F0F0F0F0F044)) 
    \read_bnum[2]_i_1 
       (.I0(CSIZE[0]),
        .I1(CSIZE[1]),
        .I2(read_bnum[2]),
        .I3(\read_bnum[2]_i_2_n_0 ),
        .I4(state_read[3]),
        .I5(\read_bnum[2]_i_3_n_0 ),
        .O(\read_bnum[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \read_bnum[2]_i_2 
       (.I0(CEI),
        .I1(read_go),
        .O(\read_bnum[2]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \read_bnum[2]_i_3 
       (.I0(state_read[2]),
        .I1(state_read[0]),
        .I2(state_read[1]),
        .O(\read_bnum[2]_i_3_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_bnum_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_bnum[0]_i_1_n_0 ),
        .Q(read_bnum[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_bnum_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_bnum[1]_i_1_n_0 ),
        .Q(read_bnum[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_bnum_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\read_bnum[2]_i_1_n_0 ),
        .Q(read_bnum[2]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF4070)) 
    read_done_i_1
       (.I0(state_read[3]),
        .I1(state_read[1]),
        .I2(read_done),
        .I3(read_done_i_2_n_0),
        .I4(read_done_i_3_n_0),
        .I5(read_done_i_4_n_0),
        .O(read_done_i_1_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    read_done_i_2
       (.I0(state_read[0]),
        .I1(state_read[2]),
        .O(read_done_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    read_done_i_3
       (.I0(read_go),
        .I1(CEI),
        .I2(state_read[1]),
        .I3(state_read[3]),
        .I4(state_read[2]),
        .I5(state_read[0]),
        .O(read_done_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF0000F700)) 
    read_done_i_4
       (.I0(state_read[2]),
        .I1(state_read[0]),
        .I2(read_go),
        .I3(read_done),
        .I4(state_read[3]),
        .I5(read_done_i_5_n_0),
        .O(read_done_i_4_n_0));
  LUT5 #(
    .INIT(32'h00000200)) 
    read_done_i_5
       (.I0(HREADY),
        .I1(state_read[1]),
        .I2(state_read[3]),
        .I3(state_read[2]),
        .I4(state_read[0]),
        .O(read_done_i_5_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    read_done_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(read_done_i_1_n_0),
        .Q(read_done));
  LUT5 #(
    .INIT(32'hDFFFCCCC)) 
    read_go_i_1
       (.I0(read_done),
        .I1(read_go_i_2_n_0),
        .I2(state_cmd[0]),
        .I3(state_cmd[1]),
        .I4(read_go),
        .O(read_go_i_1_n_0));
  LUT6 #(
    .INIT(64'h0404040004000400)) 
    read_go_i_2
       (.I0(CWRITE),
        .I1(state_cmd[0]),
        .I2(state_cmd[1]),
        .I3(CEI),
        .I4(cmd_ready),
        .I5(cmd_valid),
        .O(read_go_i_2_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    read_go_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(read_go_i_1_n_0),
        .Q(read_go));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEEEFE)) 
    \read_parts[0]_i_1 
       (.I0(\read_parts[0]_i_2_n_0 ),
        .I1(\read_parts[0]_i_3_n_0 ),
        .I2(\read_parts[0]_i_4_n_0 ),
        .I3(read_parts[0]),
        .I4(\read_parts[12]_i_5_n_0 ),
        .I5(\read_parts[3]_i_5_n_0 ),
        .O(\read_parts[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hE2C0000000000000)) 
    \read_parts[0]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(read_beats[0]),
        .I3(f2u_rooms[0]),
        .I4(read_HBUSREQ1),
        .I5(\read_parts[3]_i_6_n_0 ),
        .O(\read_parts[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0500000003000000)) 
    \read_parts[0]_i_3 
       (.I0(read_beats[0]),
        .I1(f2u_rooms[0]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ2),
        .I4(state_read[3]),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h888C0000)) 
    \read_parts[0]_i_4 
       (.I0(state_read[0]),
        .I1(HREADY),
        .I2(\state_read[2]_i_3_n_0 ),
        .I3(\state_read[2]_i_5_n_0 ),
        .I4(state_read[1]),
        .O(\read_parts[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \read_parts[10]_i_1 
       (.I0(\read_parts[10]_i_2_n_0 ),
        .I1(read_parts[10]),
        .I2(\read_parts[12]_i_5_n_0 ),
        .I3(\read_parts[10]_i_3_n_0 ),
        .I4(\read_parts[10]_i_4_n_0 ),
        .I5(\read_parts[10]_i_5_n_0 ),
        .O(\read_parts[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \read_parts[10]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .I5(f2u_rooms[10]),
        .O(\read_parts[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \read_parts[10]_i_3 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(read_HBUSREQ2),
        .I4(state_read[1]),
        .I5(\read_parts_reg[12]_i_12_n_6 ),
        .O(\read_parts[10]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \read_parts[10]_i_4 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ1),
        .I4(read_beats[10]),
        .O(\read_parts[10]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    \read_parts[10]_i_5 
       (.I0(\read_parts_reg[12]_i_13_n_6 ),
        .I1(\read_parts[0]_i_4_n_0 ),
        .I2(\read_beats_reg[12]_i_5_n_6 ),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_14_n_0 ),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[10]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \read_parts[11]_i_1 
       (.I0(\read_parts[11]_i_2_n_0 ),
        .I1(read_parts[11]),
        .I2(\read_parts[12]_i_5_n_0 ),
        .I3(\read_parts[11]_i_3_n_0 ),
        .I4(\read_parts[11]_i_4_n_0 ),
        .I5(\read_parts[11]_i_5_n_0 ),
        .O(\read_parts[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \read_parts[11]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .I5(f2u_rooms[11]),
        .O(\read_parts[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \read_parts[11]_i_3 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(read_HBUSREQ2),
        .I4(state_read[1]),
        .I5(\read_parts_reg[12]_i_12_n_5 ),
        .O(\read_parts[11]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \read_parts[11]_i_4 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ1),
        .I4(read_beats[11]),
        .O(\read_parts[11]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    \read_parts[11]_i_5 
       (.I0(\read_parts_reg[12]_i_13_n_5 ),
        .I1(\read_parts[0]_i_4_n_0 ),
        .I2(\read_beats_reg[12]_i_5_n_5 ),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_14_n_0 ),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[11]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h0506)) 
    \read_parts[12]_i_1 
       (.I0(state_read[3]),
        .I1(state_read[1]),
        .I2(state_read[2]),
        .I3(state_read[0]),
        .O(\read_parts[12]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \read_parts[12]_i_11 
       (.I0(state_read[0]),
        .I1(state_read[1]),
        .I2(\state_read[2]_i_3_n_0 ),
        .O(\read_parts[12]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000000)) 
    \read_parts[12]_i_14 
       (.I0(\state_read[3]_i_4_n_0 ),
        .I1(read_HWRITE_i_4_n_0),
        .I2(read_HBUSREQ30_in),
        .I3(f2u_rooms[6]),
        .I4(\state_read[3]_i_3_n_0 ),
        .I5(state_read[3]),
        .O(\read_parts[12]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFEFC)) 
    \read_parts[12]_i_15 
       (.I0(f2u_rooms[1]),
        .I1(f2u_rooms[9]),
        .I2(f2u_rooms[11]),
        .I3(f2u_rooms[4]),
        .I4(f2u_rooms[3]),
        .I5(f2u_rooms[0]),
        .O(\read_parts[12]_i_15_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \read_parts[12]_i_17 
       (.I0(f2u_rooms[14]),
        .I1(f2u_rooms[15]),
        .O(\read_parts[12]_i_17_n_0 ));
  LUT3 #(
    .INIT(8'hF4)) 
    \read_parts[12]_i_18 
       (.I0(read_beats[12]),
        .I1(f2u_rooms[12]),
        .I2(f2u_rooms[13]),
        .O(\read_parts[12]_i_18_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \read_parts[12]_i_19 
       (.I0(read_beats[11]),
        .I1(f2u_rooms[10]),
        .I2(f2u_rooms[11]),
        .I3(read_beats[10]),
        .O(\read_parts[12]_i_19_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \read_parts[12]_i_2 
       (.I0(\read_parts[12]_i_4_n_0 ),
        .I1(read_parts[12]),
        .I2(\read_parts[12]_i_5_n_0 ),
        .I3(\read_parts[12]_i_6_n_0 ),
        .I4(\read_parts[12]_i_7_n_0 ),
        .I5(\read_parts[12]_i_8_n_0 ),
        .O(\read_parts[12]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \read_parts[12]_i_20 
       (.I0(read_beats[9]),
        .I1(f2u_rooms[8]),
        .I2(f2u_rooms[9]),
        .I3(read_beats[8]),
        .O(\read_parts[12]_i_20_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \read_parts[12]_i_21 
       (.I0(f2u_rooms[15]),
        .I1(f2u_rooms[14]),
        .O(\read_parts[12]_i_21_n_0 ));
  LUT3 #(
    .INIT(8'h21)) 
    \read_parts[12]_i_22 
       (.I0(read_beats[12]),
        .I1(f2u_rooms[13]),
        .I2(f2u_rooms[12]),
        .O(\read_parts[12]_i_22_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \read_parts[12]_i_23 
       (.I0(f2u_rooms[10]),
        .I1(read_beats[10]),
        .I2(read_beats[11]),
        .I3(f2u_rooms[11]),
        .O(\read_parts[12]_i_23_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \read_parts[12]_i_24 
       (.I0(f2u_rooms[8]),
        .I1(read_beats[8]),
        .I2(read_beats[9]),
        .I3(f2u_rooms[9]),
        .O(\read_parts[12]_i_24_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[12]_i_25 
       (.I0(f2u_rooms[12]),
        .O(\read_parts[12]_i_25_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[12]_i_26 
       (.I0(f2u_rooms[11]),
        .O(\read_parts[12]_i_26_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[12]_i_27 
       (.I0(f2u_rooms[10]),
        .O(\read_parts[12]_i_27_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[12]_i_28 
       (.I0(f2u_rooms[9]),
        .O(\read_parts[12]_i_28_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[12]_i_29 
       (.I0(read_parts[12]),
        .O(\read_parts[12]_i_29_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[12]_i_3 
       (.I0(HRESETn),
        .O(\read_parts[12]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[12]_i_30 
       (.I0(read_parts[11]),
        .O(\read_parts[12]_i_30_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[12]_i_31 
       (.I0(read_parts[10]),
        .O(\read_parts[12]_i_31_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[12]_i_32 
       (.I0(read_parts[9]),
        .O(\read_parts[12]_i_32_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \read_parts[12]_i_33 
       (.I0(read_beats[7]),
        .I1(f2u_rooms[6]),
        .I2(f2u_rooms[7]),
        .I3(read_beats[6]),
        .O(\read_parts[12]_i_33_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \read_parts[12]_i_34 
       (.I0(read_beats[5]),
        .I1(f2u_rooms[4]),
        .I2(f2u_rooms[5]),
        .I3(read_beats[4]),
        .O(\read_parts[12]_i_34_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \read_parts[12]_i_35 
       (.I0(read_beats[3]),
        .I1(f2u_rooms[2]),
        .I2(f2u_rooms[3]),
        .I3(read_beats[2]),
        .O(\read_parts[12]_i_35_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \read_parts[12]_i_36 
       (.I0(f2u_rooms[1]),
        .I1(read_beats[1]),
        .I2(f2u_rooms[0]),
        .I3(read_beats[0]),
        .O(\read_parts[12]_i_36_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \read_parts[12]_i_37 
       (.I0(f2u_rooms[6]),
        .I1(read_beats[6]),
        .I2(read_beats[7]),
        .I3(f2u_rooms[7]),
        .O(\read_parts[12]_i_37_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \read_parts[12]_i_38 
       (.I0(f2u_rooms[4]),
        .I1(read_beats[4]),
        .I2(read_beats[5]),
        .I3(f2u_rooms[5]),
        .O(\read_parts[12]_i_38_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \read_parts[12]_i_39 
       (.I0(f2u_rooms[2]),
        .I1(read_beats[2]),
        .I2(read_beats[3]),
        .I3(f2u_rooms[3]),
        .O(\read_parts[12]_i_39_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \read_parts[12]_i_4 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .I5(f2u_rooms[12]),
        .O(\read_parts[12]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \read_parts[12]_i_40 
       (.I0(f2u_rooms[0]),
        .I1(read_beats[0]),
        .I2(read_beats[1]),
        .I3(f2u_rooms[1]),
        .O(\read_parts[12]_i_40_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF5530553F)) 
    \read_parts[12]_i_5 
       (.I0(HREADY),
        .I1(read_HBUSREQ2),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .I5(\read_parts[12]_i_11_n_0 ),
        .O(\read_parts[12]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \read_parts[12]_i_6 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(read_HBUSREQ2),
        .I4(state_read[1]),
        .I5(\read_parts_reg[12]_i_12_n_4 ),
        .O(\read_parts[12]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \read_parts[12]_i_7 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ1),
        .I4(read_beats[12]),
        .O(\read_parts[12]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    \read_parts[12]_i_8 
       (.I0(\read_parts_reg[12]_i_13_n_4 ),
        .I1(\read_parts[0]_i_4_n_0 ),
        .I2(\read_beats_reg[12]_i_5_n_4 ),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_14_n_0 ),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[12]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEEE)) 
    \read_parts[12]_i_9 
       (.I0(\state_read[3]_i_4_n_0 ),
        .I1(f2u_rooms[6]),
        .I2(f2u_rooms[4]),
        .I3(f2u_rooms[2]),
        .I4(read_HWRITE_i_4_n_0),
        .I5(\read_parts[12]_i_15_n_0 ),
        .O(\read_parts[12]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFEFE)) 
    \read_parts[1]_i_1 
       (.I0(\read_parts[1]_i_2_n_0 ),
        .I1(\read_parts[1]_i_3_n_0 ),
        .I2(\read_parts[1]_i_4_n_0 ),
        .I3(read_parts[1]),
        .I4(\read_parts[12]_i_5_n_0 ),
        .I5(\read_parts[3]_i_5_n_0 ),
        .O(\read_parts[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hE2C0000000000000)) 
    \read_parts[1]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(read_beats[1]),
        .I3(f2u_rooms[1]),
        .I4(read_HBUSREQ1),
        .I5(\read_parts[3]_i_6_n_0 ),
        .O(\read_parts[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0A0000000C000000)) 
    \read_parts[1]_i_3 
       (.I0(\read_beats_reg[4]_i_2_n_7 ),
        .I1(\read_parts_reg[4]_i_6_n_7 ),
        .I2(state_read[1]),
        .I3(read_HBUSREQ2),
        .I4(state_read[3]),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \read_parts[1]_i_4 
       (.I0(\read_parts[0]_i_4_n_0 ),
        .I1(\read_parts_reg[4]_i_7_n_7 ),
        .O(\read_parts[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFEFE)) 
    \read_parts[2]_i_1 
       (.I0(\read_parts[2]_i_2_n_0 ),
        .I1(\read_parts[2]_i_3_n_0 ),
        .I2(\read_parts[2]_i_4_n_0 ),
        .I3(read_parts[2]),
        .I4(\read_parts[12]_i_5_n_0 ),
        .I5(\read_parts[3]_i_5_n_0 ),
        .O(\read_parts[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hE2C0000000000000)) 
    \read_parts[2]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(read_beats[2]),
        .I3(f2u_rooms[2]),
        .I4(read_HBUSREQ1),
        .I5(\read_parts[3]_i_6_n_0 ),
        .O(\read_parts[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0A0000000C000000)) 
    \read_parts[2]_i_3 
       (.I0(\read_beats_reg[4]_i_2_n_6 ),
        .I1(\read_parts_reg[4]_i_6_n_6 ),
        .I2(state_read[1]),
        .I3(read_HBUSREQ2),
        .I4(state_read[3]),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \read_parts[2]_i_4 
       (.I0(\read_parts[0]_i_4_n_0 ),
        .I1(\read_parts_reg[4]_i_7_n_6 ),
        .O(\read_parts[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFEFE)) 
    \read_parts[3]_i_1 
       (.I0(\read_parts[3]_i_2_n_0 ),
        .I1(\read_parts[3]_i_3_n_0 ),
        .I2(\read_parts[3]_i_4_n_0 ),
        .I3(read_parts[3]),
        .I4(\read_parts[12]_i_5_n_0 ),
        .I5(\read_parts[3]_i_5_n_0 ),
        .O(\read_parts[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hE2C0000000000000)) 
    \read_parts[3]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(read_beats[3]),
        .I3(f2u_rooms[3]),
        .I4(read_HBUSREQ1),
        .I5(\read_parts[3]_i_6_n_0 ),
        .O(\read_parts[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0A0000000C000000)) 
    \read_parts[3]_i_3 
       (.I0(\read_beats_reg[4]_i_2_n_5 ),
        .I1(\read_parts_reg[4]_i_6_n_5 ),
        .I2(state_read[1]),
        .I3(read_HBUSREQ2),
        .I4(state_read[3]),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \read_parts[3]_i_4 
       (.I0(\read_parts[0]_i_4_n_0 ),
        .I1(\read_parts_reg[4]_i_7_n_5 ),
        .O(\read_parts[3]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \read_parts[3]_i_5 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(read_HBUSREQ2),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_9_n_0 ),
        .O(\read_parts[3]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \read_parts[3]_i_6 
       (.I0(state_read[1]),
        .I1(state_read[3]),
        .O(\read_parts[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \read_parts[4]_i_1 
       (.I0(\read_parts[4]_i_2_n_0 ),
        .I1(read_parts[4]),
        .I2(\read_parts[12]_i_5_n_0 ),
        .I3(\read_parts[4]_i_3_n_0 ),
        .I4(\read_parts[4]_i_4_n_0 ),
        .I5(\read_parts[4]_i_5_n_0 ),
        .O(\read_parts[4]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[4]_i_10 
       (.I0(f2u_rooms[2]),
        .O(\read_parts[4]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[4]_i_11 
       (.I0(f2u_rooms[1]),
        .O(\read_parts[4]_i_11_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[4]_i_12 
       (.I0(read_parts[4]),
        .O(\read_parts[4]_i_12_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[4]_i_13 
       (.I0(read_parts[3]),
        .O(\read_parts[4]_i_13_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[4]_i_14 
       (.I0(read_parts[2]),
        .O(\read_parts[4]_i_14_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[4]_i_15 
       (.I0(read_parts[1]),
        .O(\read_parts[4]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000004500)) 
    \read_parts[4]_i_2 
       (.I0(read_HBUSREQ30_in),
        .I1(f2u_rooms[4]),
        .I2(\read_parts[12]_i_9_n_0 ),
        .I3(read_HBUSREQ1),
        .I4(state_read[1]),
        .I5(state_read[3]),
        .O(\read_parts[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \read_parts[4]_i_3 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(read_HBUSREQ2),
        .I4(state_read[1]),
        .I5(\read_parts_reg[4]_i_6_n_4 ),
        .O(\read_parts[4]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \read_parts[4]_i_4 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ1),
        .I4(read_beats[4]),
        .O(\read_parts[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    \read_parts[4]_i_5 
       (.I0(\read_parts_reg[4]_i_7_n_4 ),
        .I1(\read_parts[0]_i_4_n_0 ),
        .I2(\read_beats_reg[4]_i_2_n_4 ),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_14_n_0 ),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[4]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[4]_i_8 
       (.I0(f2u_rooms[4]),
        .O(\read_parts[4]_i_8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[4]_i_9 
       (.I0(f2u_rooms[3]),
        .O(\read_parts[4]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \read_parts[5]_i_1 
       (.I0(\read_parts[5]_i_2_n_0 ),
        .I1(read_parts[5]),
        .I2(\read_parts[12]_i_5_n_0 ),
        .I3(\read_parts[5]_i_3_n_0 ),
        .I4(\read_parts[5]_i_4_n_0 ),
        .I5(\read_parts[5]_i_5_n_0 ),
        .O(\read_parts[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \read_parts[5]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .I5(f2u_rooms[5]),
        .O(\read_parts[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \read_parts[5]_i_3 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(read_HBUSREQ2),
        .I4(state_read[1]),
        .I5(\read_parts_reg[8]_i_6_n_7 ),
        .O(\read_parts[5]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \read_parts[5]_i_4 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ1),
        .I4(read_beats[5]),
        .O(\read_parts[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    \read_parts[5]_i_5 
       (.I0(\read_parts_reg[8]_i_7_n_7 ),
        .I1(\read_parts[0]_i_4_n_0 ),
        .I2(\read_beats_reg[8]_i_3_n_7 ),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_14_n_0 ),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[5]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \read_parts[6]_i_1 
       (.I0(\read_parts[6]_i_2_n_0 ),
        .I1(read_parts[6]),
        .I2(\read_parts[12]_i_5_n_0 ),
        .I3(\read_parts[6]_i_3_n_0 ),
        .I4(\read_parts[6]_i_4_n_0 ),
        .I5(\read_parts[6]_i_5_n_0 ),
        .O(\read_parts[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \read_parts[6]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .I5(f2u_rooms[6]),
        .O(\read_parts[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \read_parts[6]_i_3 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(read_HBUSREQ2),
        .I4(state_read[1]),
        .I5(\read_parts_reg[8]_i_6_n_6 ),
        .O(\read_parts[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \read_parts[6]_i_4 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ1),
        .I4(read_beats[6]),
        .O(\read_parts[6]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    \read_parts[6]_i_5 
       (.I0(\read_parts_reg[8]_i_7_n_6 ),
        .I1(\read_parts[0]_i_4_n_0 ),
        .I2(\read_beats_reg[8]_i_3_n_6 ),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_14_n_0 ),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[6]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \read_parts[7]_i_1 
       (.I0(\read_parts[7]_i_2_n_0 ),
        .I1(read_parts[7]),
        .I2(\read_parts[12]_i_5_n_0 ),
        .I3(\read_parts[7]_i_3_n_0 ),
        .I4(\read_parts[7]_i_4_n_0 ),
        .I5(\read_parts[7]_i_5_n_0 ),
        .O(\read_parts[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \read_parts[7]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .I5(f2u_rooms[7]),
        .O(\read_parts[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \read_parts[7]_i_3 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(read_HBUSREQ2),
        .I4(state_read[1]),
        .I5(\read_parts_reg[8]_i_6_n_5 ),
        .O(\read_parts[7]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \read_parts[7]_i_4 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ1),
        .I4(read_beats[7]),
        .O(\read_parts[7]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    \read_parts[7]_i_5 
       (.I0(\read_parts_reg[8]_i_7_n_5 ),
        .I1(\read_parts[0]_i_4_n_0 ),
        .I2(\read_beats_reg[8]_i_3_n_5 ),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_14_n_0 ),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[7]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \read_parts[8]_i_1 
       (.I0(\read_parts[8]_i_2_n_0 ),
        .I1(read_parts[8]),
        .I2(\read_parts[12]_i_5_n_0 ),
        .I3(\read_parts[8]_i_3_n_0 ),
        .I4(\read_parts[8]_i_4_n_0 ),
        .I5(\read_parts[8]_i_5_n_0 ),
        .O(\read_parts[8]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[8]_i_10 
       (.I0(f2u_rooms[6]),
        .O(\read_parts[8]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[8]_i_11 
       (.I0(f2u_rooms[5]),
        .O(\read_parts[8]_i_11_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[8]_i_12 
       (.I0(read_parts[8]),
        .O(\read_parts[8]_i_12_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[8]_i_13 
       (.I0(read_parts[7]),
        .O(\read_parts[8]_i_13_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[8]_i_14 
       (.I0(read_parts[6]),
        .O(\read_parts[8]_i_14_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[8]_i_15 
       (.I0(read_parts[5]),
        .O(\read_parts[8]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \read_parts[8]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .I5(f2u_rooms[8]),
        .O(\read_parts[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \read_parts[8]_i_3 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(read_HBUSREQ2),
        .I4(state_read[1]),
        .I5(\read_parts_reg[8]_i_6_n_4 ),
        .O(\read_parts[8]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \read_parts[8]_i_4 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ1),
        .I4(read_beats[8]),
        .O(\read_parts[8]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    \read_parts[8]_i_5 
       (.I0(\read_parts_reg[8]_i_7_n_4 ),
        .I1(\read_parts[0]_i_4_n_0 ),
        .I2(\read_beats_reg[8]_i_3_n_4 ),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_14_n_0 ),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[8]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[8]_i_8 
       (.I0(f2u_rooms[8]),
        .O(\read_parts[8]_i_8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \read_parts[8]_i_9 
       (.I0(f2u_rooms[7]),
        .O(\read_parts[8]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \read_parts[9]_i_1 
       (.I0(\read_parts[9]_i_2_n_0 ),
        .I1(read_parts[9]),
        .I2(\read_parts[12]_i_5_n_0 ),
        .I3(\read_parts[9]_i_3_n_0 ),
        .I4(\read_parts[9]_i_4_n_0 ),
        .I5(\read_parts[9]_i_5_n_0 ),
        .O(\read_parts[9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0002000000000000)) 
    \read_parts[9]_i_2 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(state_read[1]),
        .I4(read_HBUSREQ1),
        .I5(f2u_rooms[9]),
        .O(\read_parts[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000200000000000)) 
    \read_parts[9]_i_3 
       (.I0(\read_parts[12]_i_9_n_0 ),
        .I1(read_HBUSREQ30_in),
        .I2(state_read[3]),
        .I3(read_HBUSREQ2),
        .I4(state_read[1]),
        .I5(\read_parts_reg[12]_i_12_n_7 ),
        .O(\read_parts[9]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \read_parts[9]_i_4 
       (.I0(read_HBUSREQ30_in),
        .I1(state_read[3]),
        .I2(state_read[1]),
        .I3(read_HBUSREQ1),
        .I4(read_beats[9]),
        .O(\read_parts[9]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h88F8888888888888)) 
    \read_parts[9]_i_5 
       (.I0(\read_parts_reg[12]_i_13_n_7 ),
        .I1(\read_parts[0]_i_4_n_0 ),
        .I2(\read_beats_reg[12]_i_5_n_7 ),
        .I3(state_read[1]),
        .I4(\read_parts[12]_i_14_n_0 ),
        .I5(read_HBUSREQ30_in),
        .O(\read_parts[9]_i_5_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[0] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[0]_i_1_n_0 ),
        .Q(read_parts[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[10] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[10]_i_1_n_0 ),
        .Q(read_parts[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[11] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[11]_i_1_n_0 ),
        .Q(read_parts[11]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[12] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[12]_i_2_n_0 ),
        .Q(read_parts[12]));
  CARRY4 \read_parts_reg[12]_i_10 
       (.CI(\read_parts_reg[12]_i_16_n_0 ),
        .CO({read_HBUSREQ30_in,\read_parts_reg[12]_i_10_n_1 ,\read_parts_reg[12]_i_10_n_2 ,\read_parts_reg[12]_i_10_n_3 }),
        .CYINIT(1'b0),
        .DI({\read_parts[12]_i_17_n_0 ,\read_parts[12]_i_18_n_0 ,\read_parts[12]_i_19_n_0 ,\read_parts[12]_i_20_n_0 }),
        .O(\NLW_read_parts_reg[12]_i_10_O_UNCONNECTED [3:0]),
        .S({\read_parts[12]_i_21_n_0 ,\read_parts[12]_i_22_n_0 ,\read_parts[12]_i_23_n_0 ,\read_parts[12]_i_24_n_0 }));
  CARRY4 \read_parts_reg[12]_i_12 
       (.CI(\read_parts_reg[8]_i_6_n_0 ),
        .CO({\NLW_read_parts_reg[12]_i_12_CO_UNCONNECTED [3],\read_parts_reg[12]_i_12_n_1 ,\read_parts_reg[12]_i_12_n_2 ,\read_parts_reg[12]_i_12_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,f2u_rooms[11:9]}),
        .O({\read_parts_reg[12]_i_12_n_4 ,\read_parts_reg[12]_i_12_n_5 ,\read_parts_reg[12]_i_12_n_6 ,\read_parts_reg[12]_i_12_n_7 }),
        .S({\read_parts[12]_i_25_n_0 ,\read_parts[12]_i_26_n_0 ,\read_parts[12]_i_27_n_0 ,\read_parts[12]_i_28_n_0 }));
  CARRY4 \read_parts_reg[12]_i_13 
       (.CI(\read_parts_reg[8]_i_7_n_0 ),
        .CO({\NLW_read_parts_reg[12]_i_13_CO_UNCONNECTED [3],\read_parts_reg[12]_i_13_n_1 ,\read_parts_reg[12]_i_13_n_2 ,\read_parts_reg[12]_i_13_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,read_parts[11:9]}),
        .O({\read_parts_reg[12]_i_13_n_4 ,\read_parts_reg[12]_i_13_n_5 ,\read_parts_reg[12]_i_13_n_6 ,\read_parts_reg[12]_i_13_n_7 }),
        .S({\read_parts[12]_i_29_n_0 ,\read_parts[12]_i_30_n_0 ,\read_parts[12]_i_31_n_0 ,\read_parts[12]_i_32_n_0 }));
  CARRY4 \read_parts_reg[12]_i_16 
       (.CI(1'b0),
        .CO({\read_parts_reg[12]_i_16_n_0 ,\read_parts_reg[12]_i_16_n_1 ,\read_parts_reg[12]_i_16_n_2 ,\read_parts_reg[12]_i_16_n_3 }),
        .CYINIT(1'b1),
        .DI({\read_parts[12]_i_33_n_0 ,\read_parts[12]_i_34_n_0 ,\read_parts[12]_i_35_n_0 ,\read_parts[12]_i_36_n_0 }),
        .O(\NLW_read_parts_reg[12]_i_16_O_UNCONNECTED [3:0]),
        .S({\read_parts[12]_i_37_n_0 ,\read_parts[12]_i_38_n_0 ,\read_parts[12]_i_39_n_0 ,\read_parts[12]_i_40_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[1] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[1]_i_1_n_0 ),
        .Q(read_parts[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[2] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[2]_i_1_n_0 ),
        .Q(read_parts[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[3] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[3]_i_1_n_0 ),
        .Q(read_parts[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[4] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[4]_i_1_n_0 ),
        .Q(read_parts[4]));
  CARRY4 \read_parts_reg[4]_i_6 
       (.CI(1'b0),
        .CO({\read_parts_reg[4]_i_6_n_0 ,\read_parts_reg[4]_i_6_n_1 ,\read_parts_reg[4]_i_6_n_2 ,\read_parts_reg[4]_i_6_n_3 }),
        .CYINIT(f2u_rooms[0]),
        .DI(f2u_rooms[4:1]),
        .O({\read_parts_reg[4]_i_6_n_4 ,\read_parts_reg[4]_i_6_n_5 ,\read_parts_reg[4]_i_6_n_6 ,\read_parts_reg[4]_i_6_n_7 }),
        .S({\read_parts[4]_i_8_n_0 ,\read_parts[4]_i_9_n_0 ,\read_parts[4]_i_10_n_0 ,\read_parts[4]_i_11_n_0 }));
  CARRY4 \read_parts_reg[4]_i_7 
       (.CI(1'b0),
        .CO({\read_parts_reg[4]_i_7_n_0 ,\read_parts_reg[4]_i_7_n_1 ,\read_parts_reg[4]_i_7_n_2 ,\read_parts_reg[4]_i_7_n_3 }),
        .CYINIT(read_parts[0]),
        .DI(read_parts[4:1]),
        .O({\read_parts_reg[4]_i_7_n_4 ,\read_parts_reg[4]_i_7_n_5 ,\read_parts_reg[4]_i_7_n_6 ,\read_parts_reg[4]_i_7_n_7 }),
        .S({\read_parts[4]_i_12_n_0 ,\read_parts[4]_i_13_n_0 ,\read_parts[4]_i_14_n_0 ,\read_parts[4]_i_15_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[5] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[5]_i_1_n_0 ),
        .Q(read_parts[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[6] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[6]_i_1_n_0 ),
        .Q(read_parts[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[7] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[7]_i_1_n_0 ),
        .Q(read_parts[7]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[8] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[8]_i_1_n_0 ),
        .Q(read_parts[8]));
  CARRY4 \read_parts_reg[8]_i_6 
       (.CI(\read_parts_reg[4]_i_6_n_0 ),
        .CO({\read_parts_reg[8]_i_6_n_0 ,\read_parts_reg[8]_i_6_n_1 ,\read_parts_reg[8]_i_6_n_2 ,\read_parts_reg[8]_i_6_n_3 }),
        .CYINIT(1'b0),
        .DI(f2u_rooms[8:5]),
        .O({\read_parts_reg[8]_i_6_n_4 ,\read_parts_reg[8]_i_6_n_5 ,\read_parts_reg[8]_i_6_n_6 ,\read_parts_reg[8]_i_6_n_7 }),
        .S({\read_parts[8]_i_8_n_0 ,\read_parts[8]_i_9_n_0 ,\read_parts[8]_i_10_n_0 ,\read_parts[8]_i_11_n_0 }));
  CARRY4 \read_parts_reg[8]_i_7 
       (.CI(\read_parts_reg[4]_i_7_n_0 ),
        .CO({\read_parts_reg[8]_i_7_n_0 ,\read_parts_reg[8]_i_7_n_1 ,\read_parts_reg[8]_i_7_n_2 ,\read_parts_reg[8]_i_7_n_3 }),
        .CYINIT(1'b0),
        .DI(read_parts[8:5]),
        .O({\read_parts_reg[8]_i_7_n_4 ,\read_parts_reg[8]_i_7_n_5 ,\read_parts_reg[8]_i_7_n_6 ,\read_parts_reg[8]_i_7_n_7 }),
        .S({\read_parts[8]_i_12_n_0 ,\read_parts[8]_i_13_n_0 ,\read_parts[8]_i_14_n_0 ,\read_parts[8]_i_15_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \read_parts_reg[9] 
       (.C(HCLK),
        .CE(\read_parts[12]_i_1_n_0 ),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\read_parts[9]_i_1_n_0 ),
        .Q(read_parts[9]));
  LUT5 #(
    .INIT(32'hFFFF1098)) 
    \state_cmd[0]_i_1 
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(CMD1),
        .I3(read_done),
        .I4(\state_cmd[0]_i_2_n_0 ),
        .O(\state_cmd[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000557F00000000)) 
    \state_cmd[0]_i_2 
       (.I0(CWRITE),
        .I1(cmd_valid),
        .I2(cmd_ready),
        .I3(CEI),
        .I4(state_cmd[1]),
        .I5(state_cmd[0]),
        .O(\state_cmd[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAAAEEAEE)) 
    \state_cmd[1]_i_1 
       (.I0(\state_cmd[1]_i_2_n_0 ),
        .I1(state_cmd[1]),
        .I2(state_cmd[0]),
        .I3(write_done),
        .I4(read_done),
        .O(\state_cmd[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000008000F00080)) 
    \state_cmd[1]_i_2 
       (.I0(cmd_ready),
        .I1(cmd_valid),
        .I2(state_cmd[0]),
        .I3(state_cmd[1]),
        .I4(CEI),
        .I5(CWRITE),
        .O(\state_cmd[1]_i_2_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_cmd_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\state_cmd[0]_i_1_n_0 ),
        .Q(state_cmd[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_cmd_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\state_cmd[1]_i_1_n_0 ),
        .Q(state_cmd[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFF04)) 
    \state_read[0]_i_1 
       (.I0(\state_read[2]_i_5_n_0 ),
        .I1(\state_read[1]_i_2_n_0 ),
        .I2(\state_read[0]_i_2_n_0 ),
        .I3(\state_read[0]_i_3_n_0 ),
        .I4(\state_read[0]_i_4_n_0 ),
        .I5(\state_read[0]_i_5_n_0 ),
        .O(\state_read[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000008FFFFFFFF)) 
    \state_read[0]_i_2 
       (.I0(\state_read[0]_i_6_n_0 ),
        .I1(read_beats[0]),
        .I2(read_beats[1]),
        .I3(read_beats[12]),
        .I4(\state_read[2]_i_8_n_0 ),
        .I5(HREADY),
        .O(\state_read[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000004)) 
    \state_read[0]_i_3 
       (.I0(state_read[2]),
        .I1(state_read[0]),
        .I2(state_read[1]),
        .I3(state_read[3]),
        .I4(read_HBUSREQ1),
        .O(\state_read[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h000000002F0220C2)) 
    \state_read[0]_i_4 
       (.I0(read_go),
        .I1(state_read[1]),
        .I2(state_read[0]),
        .I3(state_read[2]),
        .I4(HREADY),
        .I5(state_read[3]),
        .O(\state_read[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \state_read[0]_i_5 
       (.I0(\state_read[2]_i_3_n_0 ),
        .I1(state_read[1]),
        .I2(state_read[2]),
        .I3(state_read[0]),
        .I4(state_read[3]),
        .I5(read_HBUSREQ2),
        .O(\state_read[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \state_read[0]_i_6 
       (.I0(read_beats[9]),
        .I1(read_beats[8]),
        .I2(read_beats[7]),
        .I3(read_beats[6]),
        .I4(read_beats[10]),
        .I5(read_beats[11]),
        .O(\state_read[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF4F44)) 
    \state_read[1]_i_1 
       (.I0(HREADY),
        .I1(\state_read[1]_i_2_n_0 ),
        .I2(\state_read[1]_i_3_n_0 ),
        .I3(\state_read[1]_i_4_n_0 ),
        .I4(\state_read[1]_i_5_n_0 ),
        .I5(\state_read[1]_i_6_n_0 ),
        .O(\state_read[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \state_read[1]_i_2 
       (.I0(state_read[3]),
        .I1(state_read[1]),
        .I2(state_read[2]),
        .O(\state_read[1]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \state_read[1]_i_3 
       (.I0(state_read[2]),
        .I1(state_read[0]),
        .O(\state_read[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    \state_read[1]_i_4 
       (.I0(state_read[3]),
        .I1(state_read[1]),
        .I2(read_HBUSREQ2),
        .I3(HREADY),
        .I4(HGRANT),
        .I5(f2u_ready),
        .O(\state_read[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0010001000C000D0)) 
    \state_read[1]_i_5 
       (.I0(\state_read[2]_i_3_n_0 ),
        .I1(state_read[2]),
        .I2(state_read[1]),
        .I3(state_read[3]),
        .I4(\state_read[2]_i_5_n_0 ),
        .I5(state_read[0]),
        .O(\state_read[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \state_read[1]_i_6 
       (.I0(\state_read[2]_i_3_n_0 ),
        .I1(read_HBUSREQ2),
        .I2(state_read[2]),
        .I3(state_read[0]),
        .I4(state_read[3]),
        .I5(state_read[1]),
        .O(\state_read[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \state_read[2]_i_1 
       (.I0(\state_read[2]_i_2_n_0 ),
        .I1(\state_read[2]_i_3_n_0 ),
        .I2(\state_read[2]_i_4_n_0 ),
        .I3(\state_read[2]_i_5_n_0 ),
        .I4(\state_read[2]_i_6_n_0 ),
        .I5(\state_read[2]_i_7_n_0 ),
        .O(\state_read[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \state_read[2]_i_10 
       (.I0(read_beats[6]),
        .I1(read_beats[7]),
        .I2(read_beats[8]),
        .I3(read_beats[9]),
        .O(\state_read[2]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \state_read[2]_i_11 
       (.I0(read_parts[6]),
        .I1(read_parts[5]),
        .I2(read_parts[4]),
        .I3(read_parts[3]),
        .O(\state_read[2]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \state_read[2]_i_12 
       (.I0(read_parts[7]),
        .I1(read_parts[8]),
        .I2(read_parts[9]),
        .I3(read_parts[10]),
        .I4(read_parts[12]),
        .I5(read_parts[11]),
        .O(\state_read[2]_i_12_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \state_read[2]_i_13 
       (.I0(read_go),
        .I1(CEI),
        .O(\state_read[2]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h000000AA00C00000)) 
    \state_read[2]_i_2 
       (.I0(read_go),
        .I1(\state_read[2]_i_3_n_0 ),
        .I2(HREADY),
        .I3(state_read[3]),
        .I4(state_read[1]),
        .I5(state_read[2]),
        .O(\state_read[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    \state_read[2]_i_3 
       (.I0(\state_read[2]_i_8_n_0 ),
        .I1(read_beats[12]),
        .I2(read_beats[1]),
        .I3(read_beats[0]),
        .I4(\state_read[2]_i_9_n_0 ),
        .I5(\state_read[2]_i_10_n_0 ),
        .O(\state_read[2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h01000000)) 
    \state_read[2]_i_4 
       (.I0(state_read[1]),
        .I1(state_read[2]),
        .I2(state_read[0]),
        .I3(state_read[3]),
        .I4(read_HBUSREQ2),
        .O(\state_read[2]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h02000000)) 
    \state_read[2]_i_5 
       (.I0(\state_read[2]_i_11_n_0 ),
        .I1(read_parts[2]),
        .I2(read_parts[1]),
        .I3(read_parts[0]),
        .I4(\state_read[2]_i_12_n_0 ),
        .O(\state_read[2]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h0400)) 
    \state_read[2]_i_6 
       (.I0(state_read[2]),
        .I1(state_read[1]),
        .I2(state_read[3]),
        .I3(HREADY),
        .O(\state_read[2]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'h000000F1)) 
    \state_read[2]_i_7 
       (.I0(\state_read[2]_i_13_n_0 ),
        .I1(state_read[1]),
        .I2(state_read[2]),
        .I3(state_read[0]),
        .I4(state_read[3]),
        .O(\state_read[2]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \state_read[2]_i_8 
       (.I0(read_beats[2]),
        .I1(read_beats[3]),
        .I2(read_beats[4]),
        .I3(read_beats[5]),
        .O(\state_read[2]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \state_read[2]_i_9 
       (.I0(read_beats[11]),
        .I1(read_beats[10]),
        .O(\state_read[2]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'h0001C000)) 
    \state_read[3]_i_1 
       (.I0(read_HBUSREQ2),
        .I1(state_read[0]),
        .I2(state_read[2]),
        .I3(state_read[1]),
        .I4(state_read[3]),
        .O(\state_read[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \state_read[3]_i_2 
       (.I0(\state_read[3]_i_3_n_0 ),
        .I1(f2u_rooms[6]),
        .I2(read_HBUSREQ30_in),
        .I3(f2u_rooms[8]),
        .I4(f2u_rooms[5]),
        .I5(\state_read[3]_i_4_n_0 ),
        .O(read_HBUSREQ2));
  LUT3 #(
    .INIT(8'hFE)) 
    \state_read[3]_i_3 
       (.I0(f2u_rooms[11]),
        .I1(f2u_rooms[9]),
        .I2(f2u_rooms[4]),
        .O(\state_read[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \state_read[3]_i_4 
       (.I0(f2u_rooms[10]),
        .I1(f2u_rooms[7]),
        .I2(f2u_rooms[13]),
        .I3(f2u_rooms[12]),
        .I4(f2u_rooms[14]),
        .I5(f2u_rooms[15]),
        .O(\state_read[3]_i_4_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_read_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\state_read[0]_i_1_n_0 ),
        .Q(state_read[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_read_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\state_read[1]_i_1_n_0 ),
        .Q(state_read[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_read_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\state_read[2]_i_1_n_0 ),
        .Q(state_read[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_read_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\state_read[3]_i_1_n_0 ),
        .Q(state_read[3]));
  LUT6 #(
    .INIT(64'hAEAAAEAFAEAAAEAA)) 
    \state_write[0]_i_1 
       (.I0(\state_write[0]_i_2_n_0 ),
        .I1(\state_write[0]_i_3_n_0 ),
        .I2(state_write[2]),
        .I3(state_write[0]),
        .I4(state_write[1]),
        .I5(write_go),
        .O(\state_write[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \state_write[0]_i_2 
       (.I0(u2f_valid),
        .I1(HREADY),
        .I2(state_write[1]),
        .I3(state_write[0]),
        .I4(state_write[2]),
        .I5(\state_write[0]_i_4_n_0 ),
        .O(\state_write[0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h47)) 
    \state_write[0]_i_3 
       (.I0(HREADY),
        .I1(state_write[1]),
        .I2(write_HBUSREQ119_out),
        .O(\state_write[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    \state_write[0]_i_4 
       (.I0(write_beats[1]),
        .I1(write_HBUSREQ_i_7_n_0),
        .I2(\state_write[0]_i_5_n_0 ),
        .I3(write_beats[11]),
        .I4(write_beats[10]),
        .I5(write_beats[0]),
        .O(\state_write[0]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \state_write[0]_i_5 
       (.I0(write_beats[9]),
        .I1(write_beats[8]),
        .O(\state_write[0]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h000075F5)) 
    \state_write[1]_i_1 
       (.I0(\state_write[1]_i_2_n_0 ),
        .I1(HREADY),
        .I2(state_write[1]),
        .I3(state_write[0]),
        .I4(state_write[2]),
        .O(\state_write[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hDF)) 
    \state_write[1]_i_2 
       (.I0(write_HBUSREQ119_out),
        .I1(state_write[1]),
        .I2(state_write[0]),
        .O(\state_write[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h11800080)) 
    \state_write[2]_i_1 
       (.I0(state_write[0]),
        .I1(state_write[1]),
        .I2(HREADY),
        .I3(state_write[2]),
        .I4(write_go),
        .O(\state_write[2]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_write_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\state_write[0]_i_1_n_0 ),
        .Q(state_write[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_write_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\state_write[1]_i_1_n_0 ),
        .Q(state_write[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_write_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\state_write[2]_i_1_n_0 ),
        .Q(state_write[2]));
  LUT6 #(
    .INIT(64'h0808080808080800)) 
    u2f_ready_inferred_i_1
       (.I0(state_write[1]),
        .I1(HREADY),
        .I2(state_write[2]),
        .I3(write_beats[0]),
        .I4(write_HBUSREQ_i_5_n_0),
        .I5(write_beats[1]),
        .O(u2f_ready));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[0]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[0]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[0]),
        .I4(\write_HADDR_reg[3]_i_2_n_7 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[10]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[10]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[10]),
        .I4(\write_HADDR_reg[11]_i_2_n_5 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[11]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[11]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[11]),
        .I4(\write_HADDR_reg[11]_i_2_n_4 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[12]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[12]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[12]),
        .I4(\write_HADDR_reg[15]_i_2_n_7 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[13]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[13]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[13]),
        .I4(\write_HADDR_reg[15]_i_2_n_6 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[14]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[14]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[14]),
        .I4(\write_HADDR_reg[15]_i_2_n_5 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[15]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[15]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[15]),
        .I4(\write_HADDR_reg[15]_i_2_n_4 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[16]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[16]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[16]),
        .I4(\write_HADDR_reg[19]_i_2_n_7 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[17]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[17]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[17]),
        .I4(\write_HADDR_reg[19]_i_2_n_6 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[18]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[18]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[18]),
        .I4(\write_HADDR_reg[19]_i_2_n_5 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[19]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[19]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[19]),
        .I4(\write_HADDR_reg[19]_i_2_n_4 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[1]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[1]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[1]),
        .I4(\write_HADDR_reg[3]_i_2_n_6 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[20]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[20]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[20]),
        .I4(\write_HADDR_reg[23]_i_2_n_7 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[21]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[21]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[21]),
        .I4(\write_HADDR_reg[23]_i_2_n_6 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[22]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[22]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[22]),
        .I4(\write_HADDR_reg[23]_i_2_n_5 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[23]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[23]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[23]),
        .I4(\write_HADDR_reg[23]_i_2_n_4 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[24]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[24]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[24]),
        .I4(\write_HADDR_reg[27]_i_2_n_7 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[25]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[25]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[25]),
        .I4(\write_HADDR_reg[27]_i_2_n_6 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[26]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[26]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[26]),
        .I4(\write_HADDR_reg[27]_i_2_n_5 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[27]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[27]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[27]),
        .I4(\write_HADDR_reg[27]_i_2_n_4 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[28]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[28]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[28]),
        .I4(\write_HADDR_reg[31]_i_4_n_7 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[29]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[29]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[29]),
        .I4(\write_HADDR_reg[31]_i_4_n_6 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[2]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[2]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[2]),
        .I4(\write_HADDR_reg[3]_i_2_n_5 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[30]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[30]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[30]),
        .I4(\write_HADDR_reg[31]_i_4_n_5 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[31]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[31]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[31]),
        .I4(\write_HADDR_reg[31]_i_4_n_4 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000FF305)) 
    \write_HADDR[31]_i_2 
       (.I0(write_go),
        .I1(write_HBUSREQ119_out),
        .I2(state_write[1]),
        .I3(state_write[0]),
        .I4(state_write[2]),
        .O(\write_HADDR[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h04050400)) 
    \write_HADDR[31]_i_3 
       (.I0(state_write[2]),
        .I1(write_HBUSREQ119_out),
        .I2(state_write[1]),
        .I3(state_write[0]),
        .I4(write_go),
        .O(\write_HADDR[31]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \write_HADDR[31]_i_5 
       (.I0(state_write[1]),
        .I1(state_write[0]),
        .I2(state_write[2]),
        .O(\write_HADDR[31]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[3]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[3]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[3]),
        .I4(\write_HADDR_reg[3]_i_2_n_4 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \write_HADDR[3]_i_3 
       (.I0(write_HADDR[2]),
        .I1(\state_write[0]_i_4_n_0 ),
        .I2(write_bnum[2]),
        .I3(HREADY),
        .I4(u2f_valid),
        .O(\write_HADDR[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \write_HADDR[3]_i_4 
       (.I0(write_HADDR[1]),
        .I1(\state_write[0]_i_4_n_0 ),
        .I2(write_bnum[1]),
        .I3(HREADY),
        .I4(u2f_valid),
        .O(\write_HADDR[3]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \write_HADDR[3]_i_5 
       (.I0(write_HADDR[0]),
        .I1(\state_write[0]_i_4_n_0 ),
        .I2(write_bnum[0]),
        .I3(HREADY),
        .I4(u2f_valid),
        .O(\write_HADDR[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[4]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[4]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[4]),
        .I4(\write_HADDR_reg[7]_i_2_n_7 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[5]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[5]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[5]),
        .I4(\write_HADDR_reg[7]_i_2_n_6 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[6]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[6]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[6]),
        .I4(\write_HADDR_reg[7]_i_2_n_5 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[7]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[7]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[7]),
        .I4(\write_HADDR_reg[7]_i_2_n_4 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[8]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[8]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[8]),
        .I4(\write_HADDR_reg[11]_i_2_n_7 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_HADDR[9]_i_1 
       (.I0(\write_HADDR[31]_i_2_n_0 ),
        .I1(write_HADDR[9]),
        .I2(\write_HADDR[31]_i_3_n_0 ),
        .I3(CADDR[9]),
        .I4(\write_HADDR_reg[11]_i_2_n_6 ),
        .I5(\write_HADDR[31]_i_5_n_0 ),
        .O(\write_HADDR[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[0]_i_1_n_0 ),
        .Q(write_HADDR[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[10] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[10]_i_1_n_0 ),
        .Q(write_HADDR[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[11] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[11]_i_1_n_0 ),
        .Q(write_HADDR[11]));
  CARRY4 \write_HADDR_reg[11]_i_2 
       (.CI(\write_HADDR_reg[7]_i_2_n_0 ),
        .CO({\write_HADDR_reg[11]_i_2_n_0 ,\write_HADDR_reg[11]_i_2_n_1 ,\write_HADDR_reg[11]_i_2_n_2 ,\write_HADDR_reg[11]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\write_HADDR_reg[11]_i_2_n_4 ,\write_HADDR_reg[11]_i_2_n_5 ,\write_HADDR_reg[11]_i_2_n_6 ,\write_HADDR_reg[11]_i_2_n_7 }),
        .S(write_HADDR[11:8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[12] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[12]_i_1_n_0 ),
        .Q(write_HADDR[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[13] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[13]_i_1_n_0 ),
        .Q(write_HADDR[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[14] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[14]_i_1_n_0 ),
        .Q(write_HADDR[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[15] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[15]_i_1_n_0 ),
        .Q(write_HADDR[15]));
  CARRY4 \write_HADDR_reg[15]_i_2 
       (.CI(\write_HADDR_reg[11]_i_2_n_0 ),
        .CO({\write_HADDR_reg[15]_i_2_n_0 ,\write_HADDR_reg[15]_i_2_n_1 ,\write_HADDR_reg[15]_i_2_n_2 ,\write_HADDR_reg[15]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\write_HADDR_reg[15]_i_2_n_4 ,\write_HADDR_reg[15]_i_2_n_5 ,\write_HADDR_reg[15]_i_2_n_6 ,\write_HADDR_reg[15]_i_2_n_7 }),
        .S(write_HADDR[15:12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[16] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[16]_i_1_n_0 ),
        .Q(write_HADDR[16]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[17] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[17]_i_1_n_0 ),
        .Q(write_HADDR[17]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[18] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[18]_i_1_n_0 ),
        .Q(write_HADDR[18]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[19] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[19]_i_1_n_0 ),
        .Q(write_HADDR[19]));
  CARRY4 \write_HADDR_reg[19]_i_2 
       (.CI(\write_HADDR_reg[15]_i_2_n_0 ),
        .CO({\write_HADDR_reg[19]_i_2_n_0 ,\write_HADDR_reg[19]_i_2_n_1 ,\write_HADDR_reg[19]_i_2_n_2 ,\write_HADDR_reg[19]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\write_HADDR_reg[19]_i_2_n_4 ,\write_HADDR_reg[19]_i_2_n_5 ,\write_HADDR_reg[19]_i_2_n_6 ,\write_HADDR_reg[19]_i_2_n_7 }),
        .S(write_HADDR[19:16]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[1]_i_1_n_0 ),
        .Q(write_HADDR[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[20] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[20]_i_1_n_0 ),
        .Q(write_HADDR[20]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[21] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[21]_i_1_n_0 ),
        .Q(write_HADDR[21]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[22] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[22]_i_1_n_0 ),
        .Q(write_HADDR[22]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[23] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[23]_i_1_n_0 ),
        .Q(write_HADDR[23]));
  CARRY4 \write_HADDR_reg[23]_i_2 
       (.CI(\write_HADDR_reg[19]_i_2_n_0 ),
        .CO({\write_HADDR_reg[23]_i_2_n_0 ,\write_HADDR_reg[23]_i_2_n_1 ,\write_HADDR_reg[23]_i_2_n_2 ,\write_HADDR_reg[23]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\write_HADDR_reg[23]_i_2_n_4 ,\write_HADDR_reg[23]_i_2_n_5 ,\write_HADDR_reg[23]_i_2_n_6 ,\write_HADDR_reg[23]_i_2_n_7 }),
        .S(write_HADDR[23:20]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[24] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[24]_i_1_n_0 ),
        .Q(write_HADDR[24]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[25] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[25]_i_1_n_0 ),
        .Q(write_HADDR[25]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[26] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[26]_i_1_n_0 ),
        .Q(write_HADDR[26]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[27] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[27]_i_1_n_0 ),
        .Q(write_HADDR[27]));
  CARRY4 \write_HADDR_reg[27]_i_2 
       (.CI(\write_HADDR_reg[23]_i_2_n_0 ),
        .CO({\write_HADDR_reg[27]_i_2_n_0 ,\write_HADDR_reg[27]_i_2_n_1 ,\write_HADDR_reg[27]_i_2_n_2 ,\write_HADDR_reg[27]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\write_HADDR_reg[27]_i_2_n_4 ,\write_HADDR_reg[27]_i_2_n_5 ,\write_HADDR_reg[27]_i_2_n_6 ,\write_HADDR_reg[27]_i_2_n_7 }),
        .S(write_HADDR[27:24]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[28] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[28]_i_1_n_0 ),
        .Q(write_HADDR[28]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[29] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[29]_i_1_n_0 ),
        .Q(write_HADDR[29]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[2]_i_1_n_0 ),
        .Q(write_HADDR[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[30] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[30]_i_1_n_0 ),
        .Q(write_HADDR[30]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[31] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[31]_i_1_n_0 ),
        .Q(write_HADDR[31]));
  CARRY4 \write_HADDR_reg[31]_i_4 
       (.CI(\write_HADDR_reg[27]_i_2_n_0 ),
        .CO({\NLW_write_HADDR_reg[31]_i_4_CO_UNCONNECTED [3],\write_HADDR_reg[31]_i_4_n_1 ,\write_HADDR_reg[31]_i_4_n_2 ,\write_HADDR_reg[31]_i_4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\write_HADDR_reg[31]_i_4_n_4 ,\write_HADDR_reg[31]_i_4_n_5 ,\write_HADDR_reg[31]_i_4_n_6 ,\write_HADDR_reg[31]_i_4_n_7 }),
        .S(write_HADDR[31:28]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[3]_i_1_n_0 ),
        .Q(write_HADDR[3]));
  CARRY4 \write_HADDR_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\write_HADDR_reg[3]_i_2_n_0 ,\write_HADDR_reg[3]_i_2_n_1 ,\write_HADDR_reg[3]_i_2_n_2 ,\write_HADDR_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,write_HADDR[2:0]}),
        .O({\write_HADDR_reg[3]_i_2_n_4 ,\write_HADDR_reg[3]_i_2_n_5 ,\write_HADDR_reg[3]_i_2_n_6 ,\write_HADDR_reg[3]_i_2_n_7 }),
        .S({write_HADDR[3],\write_HADDR[3]_i_3_n_0 ,\write_HADDR[3]_i_4_n_0 ,\write_HADDR[3]_i_5_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[4] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[4]_i_1_n_0 ),
        .Q(write_HADDR[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[5] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[5]_i_1_n_0 ),
        .Q(write_HADDR[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[6] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[6]_i_1_n_0 ),
        .Q(write_HADDR[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[7] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[7]_i_1_n_0 ),
        .Q(write_HADDR[7]));
  CARRY4 \write_HADDR_reg[7]_i_2 
       (.CI(\write_HADDR_reg[3]_i_2_n_0 ),
        .CO({\write_HADDR_reg[7]_i_2_n_0 ,\write_HADDR_reg[7]_i_2_n_1 ,\write_HADDR_reg[7]_i_2_n_2 ,\write_HADDR_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\write_HADDR_reg[7]_i_2_n_4 ,\write_HADDR_reg[7]_i_2_n_5 ,\write_HADDR_reg[7]_i_2_n_6 ,\write_HADDR_reg[7]_i_2_n_7 }),
        .S(write_HADDR[7:4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[8] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[8]_i_1_n_0 ),
        .Q(write_HADDR[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HADDR_reg[9] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HADDR[9]_i_1_n_0 ),
        .Q(write_HADDR[9]));
  LUT6 #(
    .INIT(64'h0C0A0C0A0C0ACCCE)) 
    \write_HBURST[0]_i_1 
       (.I0(CBURST[0]),
        .I1(write_HBURST[0]),
        .I2(state_write[2]),
        .I3(\state_write[1]_i_2_n_0 ),
        .I4(state_write[1]),
        .I5(state_write[0]),
        .O(\write_HBURST[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0C0A0C0A0C0ACCCE)) 
    \write_HBURST[1]_i_1 
       (.I0(CBURST[1]),
        .I1(write_HBURST[1]),
        .I2(state_write[2]),
        .I3(\state_write[1]_i_2_n_0 ),
        .I4(state_write[1]),
        .I5(state_write[0]),
        .O(\write_HBURST[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0C0A0C0A0C0ACCCE)) 
    \write_HBURST[2]_i_1 
       (.I0(CBURST[2]),
        .I1(write_HBURST[2]),
        .I2(state_write[2]),
        .I3(\state_write[1]_i_2_n_0 ),
        .I4(state_write[1]),
        .I5(state_write[0]),
        .O(\write_HBURST[2]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HBURST_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_HBURST[0]_i_1_n_0 ),
        .Q(write_HBURST[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HBURST_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_HBURST[1]_i_1_n_0 ),
        .Q(write_HBURST[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HBURST_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_HBURST[2]_i_1_n_0 ),
        .Q(write_HBURST[2]));
  LUT6 #(
    .INIT(64'hFFFFFFF1FFF0FFF0)) 
    write_HBUSREQ_i_1
       (.I0(state_write[2]),
        .I1(\state_write[1]_i_2_n_0 ),
        .I2(write_HBUSREQ_i_2_n_0),
        .I3(write_HBUSREQ_i_3_n_0),
        .I4(write_HBUSREQ_i_4_n_0),
        .I5(write_HBUSREQ_i_5_n_0),
        .O(write_HBUSREQ_i_1_n_0));
  LUT5 #(
    .INIT(32'h000A000E)) 
    write_HBUSREQ_i_2
       (.I0(write_HBUSREQ),
        .I1(write_go),
        .I2(state_write[1]),
        .I3(state_write[0]),
        .I4(state_write[2]),
        .O(write_HBUSREQ_i_2_n_0));
  LUT6 #(
    .INIT(64'h202A202A222AAAAA)) 
    write_HBUSREQ_i_3
       (.I0(write_HBUSREQ_i_6_n_0),
        .I1(HREADY),
        .I2(state_write[1]),
        .I3(write_HBUSREQ119_out),
        .I4(u2f_valid),
        .I5(state_write[0]),
        .O(write_HBUSREQ_i_3_n_0));
  LUT5 #(
    .INIT(32'h10000000)) 
    write_HBUSREQ_i_4
       (.I0(state_write[2]),
        .I1(state_write[0]),
        .I2(state_write[1]),
        .I3(HREADY),
        .I4(u2f_valid),
        .O(write_HBUSREQ_i_4_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    write_HBUSREQ_i_5
       (.I0(write_HBUSREQ_i_7_n_0),
        .I1(write_beats[9]),
        .I2(write_beats[8]),
        .I3(write_beats[11]),
        .I4(write_beats[10]),
        .O(write_HBUSREQ_i_5_n_0));
  LUT2 #(
    .INIT(4'h4)) 
    write_HBUSREQ_i_6
       (.I0(state_write[2]),
        .I1(write_HBUSREQ),
        .O(write_HBUSREQ_i_6_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    write_HBUSREQ_i_7
       (.I0(write_beats[5]),
        .I1(write_beats[4]),
        .I2(write_beats[7]),
        .I3(write_beats[6]),
        .I4(write_beats[12]),
        .I5(write_HBUSREQ_i_8_n_0),
        .O(write_HBUSREQ_i_7_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    write_HBUSREQ_i_8
       (.I0(write_beats[3]),
        .I1(write_beats[2]),
        .O(write_HBUSREQ_i_8_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    write_HBUSREQ_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(write_HBUSREQ_i_1_n_0),
        .Q(write_HBUSREQ));
  LUT6 #(
    .INIT(64'h0C0A0C0A0C0ACCCE)) 
    \write_HPROT[0]_i_1 
       (.I0(CPROT[0]),
        .I1(write_HPROT[0]),
        .I2(state_write[2]),
        .I3(\state_write[1]_i_2_n_0 ),
        .I4(state_write[1]),
        .I5(state_write[0]),
        .O(\write_HPROT[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0C0A0C0A0C0ACCCE)) 
    \write_HPROT[1]_i_1 
       (.I0(CPROT[1]),
        .I1(write_HPROT[1]),
        .I2(state_write[2]),
        .I3(\state_write[1]_i_2_n_0 ),
        .I4(state_write[1]),
        .I5(state_write[0]),
        .O(\write_HPROT[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0C0A0C0A0C0ACCCE)) 
    \write_HPROT[2]_i_1 
       (.I0(CPROT[2]),
        .I1(write_HPROT[2]),
        .I2(state_write[2]),
        .I3(\state_write[1]_i_2_n_0 ),
        .I4(state_write[1]),
        .I5(state_write[0]),
        .O(\write_HPROT[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0C0A0C0A0C0ACCCE)) 
    \write_HPROT[3]_i_1 
       (.I0(CPROT[3]),
        .I1(write_HPROT[3]),
        .I2(state_write[2]),
        .I3(\state_write[1]_i_2_n_0 ),
        .I4(state_write[1]),
        .I5(state_write[0]),
        .O(\write_HPROT[3]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HPROT_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HPROT[0]_i_1_n_0 ),
        .Q(write_HPROT[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HPROT_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HPROT[1]_i_1_n_0 ),
        .Q(write_HPROT[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HPROT_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HPROT[2]_i_1_n_0 ),
        .Q(write_HPROT[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HPROT_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\read_parts[12]_i_3_n_0 ),
        .D(\write_HPROT[3]_i_1_n_0 ),
        .Q(write_HPROT[3]));
  LUT6 #(
    .INIT(64'h0C0A0C0A0C0ACCCE)) 
    \write_HSIZE[0]_i_1 
       (.I0(CSIZE[0]),
        .I1(write_HSIZE[0]),
        .I2(state_write[2]),
        .I3(\state_write[1]_i_2_n_0 ),
        .I4(state_write[1]),
        .I5(state_write[0]),
        .O(\write_HSIZE[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0C0A0C0A0C0ACCCE)) 
    \write_HSIZE[1]_i_1 
       (.I0(CSIZE[1]),
        .I1(write_HSIZE[1]),
        .I2(state_write[2]),
        .I3(\state_write[1]_i_2_n_0 ),
        .I4(state_write[1]),
        .I5(state_write[0]),
        .O(\write_HSIZE[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0B005F00)) 
    \write_HSIZE[2]_i_1 
       (.I0(state_write[1]),
        .I1(write_HBUSREQ119_out),
        .I2(state_write[2]),
        .I3(write_HSIZE[2]),
        .I4(state_write[0]),
        .O(\write_HSIZE[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hF4)) 
    \write_HSIZE[2]_i_10 
       (.I0(write_beats[12]),
        .I1(u2f_items[12]),
        .I2(u2f_items[13]),
        .O(\write_HSIZE[2]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \write_HSIZE[2]_i_11 
       (.I0(write_beats[11]),
        .I1(u2f_items[10]),
        .I2(u2f_items[11]),
        .I3(write_beats[10]),
        .O(\write_HSIZE[2]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \write_HSIZE[2]_i_12 
       (.I0(write_beats[9]),
        .I1(u2f_items[8]),
        .I2(u2f_items[9]),
        .I3(write_beats[8]),
        .O(\write_HSIZE[2]_i_12_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \write_HSIZE[2]_i_13 
       (.I0(u2f_items[15]),
        .I1(u2f_items[14]),
        .O(\write_HSIZE[2]_i_13_n_0 ));
  LUT3 #(
    .INIT(8'h09)) 
    \write_HSIZE[2]_i_14 
       (.I0(write_beats[12]),
        .I1(u2f_items[12]),
        .I2(u2f_items[13]),
        .O(\write_HSIZE[2]_i_14_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \write_HSIZE[2]_i_15 
       (.I0(u2f_items[10]),
        .I1(write_beats[10]),
        .I2(write_beats[11]),
        .I3(u2f_items[11]),
        .O(\write_HSIZE[2]_i_15_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \write_HSIZE[2]_i_16 
       (.I0(u2f_items[8]),
        .I1(write_beats[8]),
        .I2(write_beats[9]),
        .I3(u2f_items[9]),
        .O(\write_HSIZE[2]_i_16_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \write_HSIZE[2]_i_17 
       (.I0(write_beats[7]),
        .I1(u2f_items[6]),
        .I2(u2f_items[7]),
        .I3(write_beats[6]),
        .O(\write_HSIZE[2]_i_17_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \write_HSIZE[2]_i_18 
       (.I0(write_beats[5]),
        .I1(u2f_items[4]),
        .I2(u2f_items[5]),
        .I3(write_beats[4]),
        .O(\write_HSIZE[2]_i_18_n_0 ));
  LUT4 #(
    .INIT(16'h50D4)) 
    \write_HSIZE[2]_i_19 
       (.I0(write_beats[3]),
        .I1(u2f_items[2]),
        .I2(u2f_items[3]),
        .I3(write_beats[2]),
        .O(\write_HSIZE[2]_i_19_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA8)) 
    \write_HSIZE[2]_i_2 
       (.I0(\write_HSIZE[2]_i_3_n_0 ),
        .I1(\write_HSIZE[2]_i_4_n_0 ),
        .I2(\write_HSIZE[2]_i_5_n_0 ),
        .I3(u2f_items[4]),
        .I4(write_HBUSREQ32_in),
        .I5(\write_HSIZE[2]_i_7_n_0 ),
        .O(write_HBUSREQ119_out));
  LUT4 #(
    .INIT(16'h22B2)) 
    \write_HSIZE[2]_i_20 
       (.I0(u2f_items[1]),
        .I1(write_beats[1]),
        .I2(u2f_items[0]),
        .I3(write_beats[0]),
        .O(\write_HSIZE[2]_i_20_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \write_HSIZE[2]_i_21 
       (.I0(u2f_items[6]),
        .I1(write_beats[6]),
        .I2(write_beats[7]),
        .I3(u2f_items[7]),
        .O(\write_HSIZE[2]_i_21_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \write_HSIZE[2]_i_22 
       (.I0(u2f_items[4]),
        .I1(write_beats[4]),
        .I2(write_beats[5]),
        .I3(u2f_items[5]),
        .O(\write_HSIZE[2]_i_22_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \write_HSIZE[2]_i_23 
       (.I0(u2f_items[2]),
        .I1(write_beats[2]),
        .I2(write_beats[3]),
        .I3(u2f_items[3]),
        .O(\write_HSIZE[2]_i_23_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \write_HSIZE[2]_i_24 
       (.I0(u2f_items[1]),
        .I1(write_beats[1]),
        .I2(write_beats[0]),
        .I3(u2f_items[0]),
        .O(\write_HSIZE[2]_i_24_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \write_HSIZE[2]_i_3 
       (.I0(HGRANT),
        .I1(HREADY),
        .I2(u2f_valid),
        .O(\write_HSIZE[2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \write_HSIZE[2]_i_4 
       (.I0(u2f_items[7]),
        .I1(u2f_items[8]),
        .I2(u2f_items[14]),
        .I3(u2f_items[15]),
        .I4(u2f_items[12]),
        .O(\write_HSIZE[2]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \write_HSIZE[2]_i_5 
       (.I0(u2f_items[6]),
        .I1(u2f_items[5]),
        .O(\write_HSIZE[2]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \write_HSIZE[2]_i_7 
       (.I0(u2f_items[9]),
        .I1(u2f_items[10]),
        .I2(u2f_items[13]),
        .I3(u2f_items[11]),
        .O(\write_HSIZE[2]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \write_HSIZE[2]_i_9 
       (.I0(u2f_items[14]),
        .I1(u2f_items[15]),
        .O(\write_HSIZE[2]_i_9_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HSIZE_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_HSIZE[0]_i_1_n_0 ),
        .Q(write_HSIZE[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HSIZE_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_HSIZE[1]_i_1_n_0 ),
        .Q(write_HSIZE[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_HSIZE_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_HSIZE[2]_i_1_n_0 ),
        .Q(write_HSIZE[2]));
  CARRY4 \write_HSIZE_reg[2]_i_6 
       (.CI(\write_HSIZE_reg[2]_i_8_n_0 ),
        .CO({write_HBUSREQ32_in,\write_HSIZE_reg[2]_i_6_n_1 ,\write_HSIZE_reg[2]_i_6_n_2 ,\write_HSIZE_reg[2]_i_6_n_3 }),
        .CYINIT(1'b0),
        .DI({\write_HSIZE[2]_i_9_n_0 ,\write_HSIZE[2]_i_10_n_0 ,\write_HSIZE[2]_i_11_n_0 ,\write_HSIZE[2]_i_12_n_0 }),
        .O(\NLW_write_HSIZE_reg[2]_i_6_O_UNCONNECTED [3:0]),
        .S({\write_HSIZE[2]_i_13_n_0 ,\write_HSIZE[2]_i_14_n_0 ,\write_HSIZE[2]_i_15_n_0 ,\write_HSIZE[2]_i_16_n_0 }));
  CARRY4 \write_HSIZE_reg[2]_i_8 
       (.CI(1'b0),
        .CO({\write_HSIZE_reg[2]_i_8_n_0 ,\write_HSIZE_reg[2]_i_8_n_1 ,\write_HSIZE_reg[2]_i_8_n_2 ,\write_HSIZE_reg[2]_i_8_n_3 }),
        .CYINIT(1'b1),
        .DI({\write_HSIZE[2]_i_17_n_0 ,\write_HSIZE[2]_i_18_n_0 ,\write_HSIZE[2]_i_19_n_0 ,\write_HSIZE[2]_i_20_n_0 }),
        .O(\NLW_write_HSIZE_reg[2]_i_8_O_UNCONNECTED [3:0]),
        .S({\write_HSIZE[2]_i_21_n_0 ,\write_HSIZE[2]_i_22_n_0 ,\write_HSIZE[2]_i_23_n_0 ,\write_HSIZE[2]_i_24_n_0 }));
  LUT5 #(
    .INIT(32'h00000E00)) 
    write_HTRANS_inferred_i_1
       (.I0(write_first),
        .I1(u2f_valid),
        .I2(state_write[0]),
        .I3(state_write[1]),
        .I4(state_write[2]),
        .O(write_HTRANS[1]));
  LUT4 #(
    .INIT(16'h0004)) 
    write_HTRANS_inferred_i_2
       (.I0(state_write[2]),
        .I1(state_write[1]),
        .I2(state_write[0]),
        .I3(write_first),
        .O(write_HTRANS[0]));
  LUT5 #(
    .INIT(32'h03FF0055)) 
    write_HWRITE_i_1
       (.I0(\state_write[1]_i_2_n_0 ),
        .I1(state_write[1]),
        .I2(state_write[0]),
        .I3(state_write[2]),
        .I4(write_HWRITE),
        .O(write_HWRITE_i_1_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    write_HWRITE_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(write_HWRITE_i_1_n_0),
        .Q(write_HWRITE));
  LUT6 #(
    .INIT(64'hFFFFF222F222F222)) 
    \write_beats[0]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(CLENGTH[0]),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[3]_i_2_n_7 ),
        .I4(write_beats[0]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[10]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(\read_beats_reg[12]_i_3_n_6 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[11]_i_2_n_5 ),
        .I4(write_beats[10]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[11]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(\read_beats_reg[12]_i_3_n_5 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[11]_i_2_n_4 ),
        .I4(write_beats[11]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[11]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[11]_i_3 
       (.I0(write_beats[11]),
        .O(\write_beats[11]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[11]_i_4 
       (.I0(write_beats[10]),
        .O(\write_beats[11]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[11]_i_5 
       (.I0(write_beats[9]),
        .O(\write_beats[11]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[11]_i_6 
       (.I0(write_beats[8]),
        .O(\write_beats[11]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[12]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(\read_beats_reg[12]_i_3_n_0 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[12]_i_5_n_7 ),
        .I4(write_beats[12]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[12]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[12]_i_2 
       (.I0(HRESETn),
        .O(\write_beats[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0040004000404040)) 
    \write_beats[12]_i_3 
       (.I0(state_write[2]),
        .I1(write_go),
        .I2(\write_beats[12]_i_7_n_0 ),
        .I3(CBURST[0]),
        .I4(CBURST[1]),
        .I5(CBURST[2]),
        .O(\write_beats[12]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \write_beats[12]_i_4 
       (.I0(state_write[0]),
        .I1(state_write[1]),
        .I2(state_write[2]),
        .O(\write_beats[12]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h0F31)) 
    \write_beats[12]_i_6 
       (.I0(write_go),
        .I1(state_write[1]),
        .I2(state_write[2]),
        .I3(state_write[0]),
        .O(\write_beats[12]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \write_beats[12]_i_7 
       (.I0(state_write[0]),
        .I1(state_write[1]),
        .O(\write_beats[12]_i_7_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[12]_i_8 
       (.I0(write_beats[12]),
        .O(\write_beats[12]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[1]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(\read_beats_reg[1]_i_2_n_7 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[3]_i_2_n_6 ),
        .I4(write_beats[1]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[2]_i_1 
       (.I0(\write_beats[4]_i_3_n_0 ),
        .I1(\read_beats[2]_i_2_n_0 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[3]_i_2_n_5 ),
        .I4(write_beats[2]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[3]_i_1 
       (.I0(\write_beats[4]_i_3_n_0 ),
        .I1(\read_beats[3]_i_3_n_0 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[3]_i_2_n_4 ),
        .I4(write_beats[3]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[3]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[3]_i_3 
       (.I0(write_beats[3]),
        .O(\write_beats[3]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[3]_i_4 
       (.I0(write_beats[2]),
        .O(\write_beats[3]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[3]_i_5 
       (.I0(write_beats[1]),
        .O(\write_beats[3]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h95)) 
    \write_beats[3]_i_6 
       (.I0(write_beats[0]),
        .I1(HREADY),
        .I2(u2f_valid),
        .O(\write_beats[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hEBFFAAAAEAAAAAAA)) 
    \write_beats[4]_i_1 
       (.I0(\write_beats[4]_i_2_n_0 ),
        .I1(CBURST[2]),
        .I2(CBURST[1]),
        .I3(CBURST[0]),
        .I4(\write_beats[4]_i_3_n_0 ),
        .I5(\read_beats_reg[1]_i_2_n_4 ),
        .O(\write_beats[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000AAAAF0AA22)) 
    \write_beats[4]_i_2 
       (.I0(write_beats[4]),
        .I1(write_go),
        .I2(\write_beats_reg[7]_i_2_n_7 ),
        .I3(state_write[0]),
        .I4(state_write[1]),
        .I5(state_write[2]),
        .O(\write_beats[4]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \write_beats[4]_i_3 
       (.I0(state_write[1]),
        .I1(state_write[0]),
        .I2(write_go),
        .I3(state_write[2]),
        .O(\write_beats[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[5]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(\read_beats_reg[8]_i_2_n_7 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[7]_i_2_n_6 ),
        .I4(write_beats[5]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[6]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(\read_beats_reg[8]_i_2_n_6 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[7]_i_2_n_5 ),
        .I4(write_beats[6]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[7]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(\read_beats_reg[8]_i_2_n_5 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[7]_i_2_n_4 ),
        .I4(write_beats[7]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[7]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[7]_i_3 
       (.I0(write_beats[7]),
        .O(\write_beats[7]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[7]_i_4 
       (.I0(write_beats[6]),
        .O(\write_beats[7]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[7]_i_5 
       (.I0(write_beats[5]),
        .O(\write_beats[7]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \write_beats[7]_i_6 
       (.I0(write_beats[4]),
        .O(\write_beats[7]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[8]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(\read_beats_reg[8]_i_2_n_4 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[11]_i_2_n_7 ),
        .I4(write_beats[8]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \write_beats[9]_i_1 
       (.I0(\write_beats[12]_i_3_n_0 ),
        .I1(\read_beats_reg[12]_i_3_n_7 ),
        .I2(\write_beats[12]_i_4_n_0 ),
        .I3(\write_beats_reg[11]_i_2_n_6 ),
        .I4(write_beats[9]),
        .I5(\write_beats[12]_i_6_n_0 ),
        .O(\write_beats[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_beats[0]_i_1_n_0 ),
        .Q(write_beats[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[10] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_beats[10]_i_1_n_0 ),
        .Q(write_beats[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[11] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_beats[11]_i_1_n_0 ),
        .Q(write_beats[11]));
  CARRY4 \write_beats_reg[11]_i_2 
       (.CI(\write_beats_reg[7]_i_2_n_0 ),
        .CO({\write_beats_reg[11]_i_2_n_0 ,\write_beats_reg[11]_i_2_n_1 ,\write_beats_reg[11]_i_2_n_2 ,\write_beats_reg[11]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(write_beats[11:8]),
        .O({\write_beats_reg[11]_i_2_n_4 ,\write_beats_reg[11]_i_2_n_5 ,\write_beats_reg[11]_i_2_n_6 ,\write_beats_reg[11]_i_2_n_7 }),
        .S({\write_beats[11]_i_3_n_0 ,\write_beats[11]_i_4_n_0 ,\write_beats[11]_i_5_n_0 ,\write_beats[11]_i_6_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[12] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\write_beats[12]_i_1_n_0 ),
        .Q(write_beats[12]));
  CARRY4 \write_beats_reg[12]_i_5 
       (.CI(\write_beats_reg[11]_i_2_n_0 ),
        .CO(\NLW_write_beats_reg[12]_i_5_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_write_beats_reg[12]_i_5_O_UNCONNECTED [3:1],\write_beats_reg[12]_i_5_n_7 }),
        .S({1'b0,1'b0,1'b0,\write_beats[12]_i_8_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_beats[1]_i_1_n_0 ),
        .Q(write_beats[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_beats[2]_i_1_n_0 ),
        .Q(write_beats[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[3] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_beats[3]_i_1_n_0 ),
        .Q(write_beats[3]));
  CARRY4 \write_beats_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\write_beats_reg[3]_i_2_n_0 ,\write_beats_reg[3]_i_2_n_1 ,\write_beats_reg[3]_i_2_n_2 ,\write_beats_reg[3]_i_2_n_3 }),
        .CYINIT(1'b1),
        .DI(write_beats[3:0]),
        .O({\write_beats_reg[3]_i_2_n_4 ,\write_beats_reg[3]_i_2_n_5 ,\write_beats_reg[3]_i_2_n_6 ,\write_beats_reg[3]_i_2_n_7 }),
        .S({\write_beats[3]_i_3_n_0 ,\write_beats[3]_i_4_n_0 ,\write_beats[3]_i_5_n_0 ,\write_beats[3]_i_6_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[4] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\write_beats[4]_i_1_n_0 ),
        .Q(write_beats[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[5] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\write_beats[5]_i_1_n_0 ),
        .Q(write_beats[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[6] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\write_beats[6]_i_1_n_0 ),
        .Q(write_beats[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[7] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(\write_beats[7]_i_1_n_0 ),
        .Q(write_beats[7]));
  CARRY4 \write_beats_reg[7]_i_2 
       (.CI(\write_beats_reg[3]_i_2_n_0 ),
        .CO({\write_beats_reg[7]_i_2_n_0 ,\write_beats_reg[7]_i_2_n_1 ,\write_beats_reg[7]_i_2_n_2 ,\write_beats_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(write_beats[7:4]),
        .O({\write_beats_reg[7]_i_2_n_4 ,\write_beats_reg[7]_i_2_n_5 ,\write_beats_reg[7]_i_2_n_6 ,\write_beats_reg[7]_i_2_n_7 }),
        .S({\write_beats[7]_i_3_n_0 ,\write_beats[7]_i_4_n_0 ,\write_beats[7]_i_5_n_0 ,\write_beats[7]_i_6_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[8] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_beats[8]_i_1_n_0 ),
        .Q(write_beats[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_beats_reg[9] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_beats[9]_i_1_n_0 ),
        .Q(write_beats[9]));
  LUT6 #(
    .INIT(64'hFFA8A8A8A8A8FFA8)) 
    \write_bnum[0]_i_1 
       (.I0(write_bnum[0]),
        .I1(HWDATA_reg0),
        .I2(\write_beats[12]_i_6_n_0 ),
        .I3(\write_beats[4]_i_3_n_0 ),
        .I4(CSIZE[1]),
        .I5(CSIZE[0]),
        .O(\write_bnum[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA8A8A8A8FFA8A8A8)) 
    \write_bnum[1]_i_1 
       (.I0(write_bnum[1]),
        .I1(HWDATA_reg0),
        .I2(\write_beats[12]_i_6_n_0 ),
        .I3(\write_beats[4]_i_3_n_0 ),
        .I4(CSIZE[0]),
        .I5(CSIZE[1]),
        .O(\write_bnum[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hA8A8A8A8FFA8A8A8)) 
    \write_bnum[2]_i_1 
       (.I0(write_bnum[2]),
        .I1(HWDATA_reg0),
        .I2(\write_beats[12]_i_6_n_0 ),
        .I3(\write_beats[4]_i_3_n_0 ),
        .I4(CSIZE[1]),
        .I5(CSIZE[0]),
        .O(\write_bnum[2]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_bnum_reg[0] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_bnum[0]_i_1_n_0 ),
        .Q(write_bnum[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_bnum_reg[1] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_bnum[1]_i_1_n_0 ),
        .Q(write_bnum[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \write_bnum_reg[2] 
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(\write_bnum[2]_i_1_n_0 ),
        .Q(write_bnum[2]));
  LUT6 #(
    .INIT(64'h00000808FAAAAAAA)) 
    write_done_i_1
       (.I0(write_done),
        .I1(write_go),
        .I2(state_write[1]),
        .I3(HREADY),
        .I4(state_write[0]),
        .I5(state_write[2]),
        .O(write_done_i_1_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    write_done_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(write_done_i_1_n_0),
        .Q(write_done));
  LUT6 #(
    .INIT(64'h00330000FFF75555)) 
    write_first_i_1
       (.I0(\state_write[1]_i_2_n_0 ),
        .I1(state_write[1]),
        .I2(write_first_i_2_n_0),
        .I3(state_write[0]),
        .I4(write_first),
        .I5(state_write[2]),
        .O(write_first_i_1_n_0));
  LUT2 #(
    .INIT(4'h7)) 
    write_first_i_2
       (.I0(u2f_valid),
        .I1(HREADY),
        .O(write_first_i_2_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    write_first_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(\write_beats[12]_i_2_n_0 ),
        .D(write_first_i_1_n_0),
        .Q(write_first));
  LUT6 #(
    .INIT(64'hFFD5FFFFC0C0C0C0)) 
    write_go_i_1
       (.I0(write_done),
        .I1(write_go_i_2_n_0),
        .I2(CWRITE),
        .I3(state_cmd[0]),
        .I4(state_cmd[1]),
        .I5(write_go),
        .O(write_go_i_1_n_0));
  LUT5 #(
    .INIT(32'h00004000)) 
    write_go_i_2
       (.I0(state_cmd[1]),
        .I1(state_cmd[0]),
        .I2(cmd_ready),
        .I3(cmd_valid),
        .I4(CEI),
        .O(write_go_i_2_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    write_go_reg
       (.C(HCLK),
        .CE(1'b1),
        .CLR(cmd_ready_i_2_n_0),
        .D(write_go_i_1_n_0),
        .Q(write_go));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module gpif2mst_async_32x512_blk_mem_gen_generic_cstr
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    WEBWE,
    out,
    s_axis_tvalid);
  output [31:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [31:0]D;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tvalid;

  gpif2mst_async_32x512_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.D(D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module gpif2mst_async_32x512_blk_mem_gen_prim_width
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    WEBWE,
    out,
    s_axis_tvalid);
  output [31:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [31:0]D;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly;
  wire ENB_dly_D;
  wire POR_B;
  wire [8:0]Q;
  wire [4:0]RSTA_SHFT_REG;
  wire [4:0]RSTB_SHFT_REG;
  wire \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire p_1_out;
  wire p_3_out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tvalid;

  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_D_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ),
        .Q(ENA_dly_D),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop " *) 
  (* srl_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(s_aclk),
        .D(p_3_out),
        .Q(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_i_1 
       (.I0(RSTA_SHFT_REG[4]),
        .I1(RSTA_SHFT_REG[0]),
        .O(p_3_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_D_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(ENB_dly),
        .Q(ENB_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(POR_B),
        .Q(ENB_dly),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_B_i_1 
       (.I0(RSTB_SHFT_REG[4]),
        .I1(RSTB_SHFT_REG[0]),
        .O(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_B_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(p_1_out),
        .Q(POR_B),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTA_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg " *) 
  (* srl_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(s_aclk),
        .D(RSTA_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTA_SHFT_REG[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTB_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg " *) 
  (* srl_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(m_aclk),
        .D(RSTB_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTB_SHFT_REG[4]),
        .R(1'b0));
  gpif2mst_async_32x512_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.D(D),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .POR_B(POR_B),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module gpif2mst_async_32x512_blk_mem_gen_prim_wrapper
   (D,
    m_aclk,
    s_aclk,
    ENB_I,
    POR_B,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    WEBWE,
    ENA_dly_D,
    out,
    s_axis_tvalid);
  output [31:0]D;
  input m_aclk;
  input s_aclk;
  input ENB_I;
  input POR_B;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [0:0]WEBWE;
  input ENA_dly_D;
  input out;
  input s_axis_tvalid;

  wire [31:0]D;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 ;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire POR_B;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tvalid;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gic0.gc0.count_d2_reg[8] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(m_aclk),
        .CLKBWRCLK(s_aclk),
        .DIADI(s_axis_tdata[15:0]),
        .DIBDI(s_axis_tdata[31:16]),
        .DIPADIP({1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0}),
        .DOADO(D[15:0]),
        .DOBDO(D[31:16]),
        .DOPADOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_33 }),
        .DOPBDOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_35 }),
        .ENARDEN(ENB_I),
        .ENBWREN(ENA_I),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(POR_B),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({WEBWE,WEBWE,WEBWE,WEBWE}));
  LUT3 #(
    .INIT(8'hBA)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(ENA_dly_D),
        .I1(out),
        .I2(s_axis_tvalid),
        .O(ENA_I));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module gpif2mst_async_32x512_blk_mem_gen_top
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    WEBWE,
    out,
    s_axis_tvalid);
  output [31:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [31:0]D;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tvalid;

  gpif2mst_async_32x512_blk_mem_gen_generic_cstr \valid.cstr 
       (.D(D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module gpif2mst_async_32x512_blk_mem_gen_v8_4_1
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    WEBWE,
    out,
    s_axis_tvalid);
  output [31:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [31:0]D;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tvalid;

  gpif2mst_async_32x512_blk_mem_gen_v8_4_1_synth inst_blk_mem_gen
       (.D(D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module gpif2mst_async_32x512_blk_mem_gen_v8_4_1_synth
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    WEBWE,
    out,
    s_axis_tvalid);
  output [31:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [31:0]D;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tvalid;

  gpif2mst_async_32x512_blk_mem_gen_top \gnbram.gnativebmg.native_blk_mem_gen 
       (.D(D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module gpif2mst_async_32x512_clk_x_pntrs
   (ram_full_fb_i_reg,
    RD_PNTR_WR,
    ram_full_fb_i_reg_0,
    WR_PNTR_RD,
    v1_reg,
    v1_reg_0,
    \g_rd.gvalid_low.rd_dc_i_reg[1] ,
    \g_rd.gvalid_low.rd_dc_i_reg[2] ,
    \g_rd.gvalid_low.rd_dc_i_reg[9] ,
    \g_rd.gvalid_low.rd_dc_i_reg[8] ,
    \g_rd.gvalid_low.rd_dc_i_reg[7] ,
    \g_rd.gvalid_low.rd_dc_i_reg[6] ,
    \g_rd.gvalid_low.rd_dc_i_reg[5] ,
    \g_rd.gvalid_low.rd_dc_i_reg[4] ,
    \g_rd.gvalid_low.rd_dc_i_reg[3] ,
    O,
    \gdiff.diff_pntr_pad_reg[9] ,
    Q,
    D,
    \gc0.count_d1_reg[8] ,
    \gc0.count_reg[7] ,
    p_0_out,
    s_aclk,
    \gic0.gc0.count_d2_reg[8] ,
    m_aclk);
  output ram_full_fb_i_reg;
  output [8:0]RD_PNTR_WR;
  output ram_full_fb_i_reg_0;
  output [0:0]WR_PNTR_RD;
  output [3:0]v1_reg;
  output [3:0]v1_reg_0;
  output \g_rd.gvalid_low.rd_dc_i_reg[1] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[2] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[9] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[8] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[7] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[6] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[4] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[3] ;
  output [0:0]O;
  output [8:0]\gdiff.diff_pntr_pad_reg[9] ;
  input [0:0]Q;
  input [0:0]D;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [7:0]\gc0.count_reg[7] ;
  input p_0_out;
  input s_aclk;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input m_aclk;

  wire [0:0]D;
  wire [0:0]O;
  wire [0:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [0:0]WR_PNTR_RD;
  wire [8:1]diff_wr_rd__0;
  wire \g_rd.gvalid_low.rd_dc_i[6]_i_3_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[6]_i_4_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[6]_i_5_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[6]_i_6_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_10_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_6_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_7_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_8_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_9_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[1] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[2] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[3] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[4] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_1 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_2 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_3 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[7] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[8] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_1 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_2 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_3 ;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [7:0]\gc0.count_reg[7] ;
  wire \gdiff.diff_pntr_pad[4]_i_3_n_0 ;
  wire \gdiff.diff_pntr_pad[4]_i_4_n_0 ;
  wire \gdiff.diff_pntr_pad[4]_i_5_n_0 ;
  wire \gdiff.diff_pntr_pad[4]_i_6_n_0 ;
  wire \gdiff.diff_pntr_pad[8]_i_2_n_0 ;
  wire \gdiff.diff_pntr_pad[8]_i_3_n_0 ;
  wire \gdiff.diff_pntr_pad[8]_i_4_n_0 ;
  wire \gdiff.diff_pntr_pad[8]_i_5_n_0 ;
  wire \gdiff.diff_pntr_pad[9]_i_2_n_0 ;
  wire \gdiff.diff_pntr_pad_reg[4]_i_1_n_0 ;
  wire \gdiff.diff_pntr_pad_reg[4]_i_1_n_1 ;
  wire \gdiff.diff_pntr_pad_reg[4]_i_1_n_2 ;
  wire \gdiff.diff_pntr_pad_reg[4]_i_1_n_3 ;
  wire \gdiff.diff_pntr_pad_reg[8]_i_1_n_0 ;
  wire \gdiff.diff_pntr_pad_reg[8]_i_1_n_1 ;
  wire \gdiff.diff_pntr_pad_reg[8]_i_1_n_2 ;
  wire \gdiff.diff_pntr_pad_reg[8]_i_1_n_3 ;
  wire [8:0]\gdiff.diff_pntr_pad_reg[9] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire p_0_out;
  wire [7:0]p_24_out;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire s_aclk;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire [3:0]\NLW_g_rd.gvalid_low.rd_dc_i_reg[9]_i_3_CO_UNCONNECTED ;
  wire [3:1]\NLW_g_rd.gvalid_low.rd_dc_i_reg[9]_i_3_O_UNCONNECTED ;
  wire [3:0]\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \g_rd.gvalid_low.rd_dc_i[1]_i_1 
       (.I0(diff_wr_rd__0[1]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \g_rd.gvalid_low.rd_dc_i[2]_i_1 
       (.I0(diff_wr_rd__0[1]),
        .I1(diff_wr_rd__0[2]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \g_rd.gvalid_low.rd_dc_i[3]_i_1 
       (.I0(diff_wr_rd__0[1]),
        .I1(diff_wr_rd__0[2]),
        .I2(diff_wr_rd__0[3]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \g_rd.gvalid_low.rd_dc_i[4]_i_1 
       (.I0(diff_wr_rd__0[2]),
        .I1(diff_wr_rd__0[1]),
        .I2(diff_wr_rd__0[3]),
        .I3(diff_wr_rd__0[4]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \g_rd.gvalid_low.rd_dc_i[5]_i_1 
       (.I0(diff_wr_rd__0[3]),
        .I1(diff_wr_rd__0[1]),
        .I2(diff_wr_rd__0[2]),
        .I3(diff_wr_rd__0[4]),
        .I4(diff_wr_rd__0[5]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_1 
       (.I0(diff_wr_rd__0[4]),
        .I1(diff_wr_rd__0[2]),
        .I2(diff_wr_rd__0[1]),
        .I3(diff_wr_rd__0[3]),
        .I4(diff_wr_rd__0[5]),
        .I5(diff_wr_rd__0[6]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[6] ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_3 
       (.I0(p_24_out[3]),
        .I1(\gc0.count_d1_reg[8] [3]),
        .O(\g_rd.gvalid_low.rd_dc_i[6]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_4 
       (.I0(p_24_out[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .O(\g_rd.gvalid_low.rd_dc_i[6]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_5 
       (.I0(p_24_out[1]),
        .I1(\gc0.count_d1_reg[8] [1]),
        .O(\g_rd.gvalid_low.rd_dc_i[6]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_6 
       (.I0(p_24_out[0]),
        .I1(\gc0.count_d1_reg[8] [0]),
        .O(\g_rd.gvalid_low.rd_dc_i[6]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \g_rd.gvalid_low.rd_dc_i[7]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ),
        .I1(diff_wr_rd__0[7]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[7] ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \g_rd.gvalid_low.rd_dc_i[8]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ),
        .I1(diff_wr_rd__0[7]),
        .I2(diff_wr_rd__0[8]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[8] ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_10 
       (.I0(p_24_out[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_2 
       (.I0(diff_wr_rd__0[8]),
        .I1(\g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ),
        .I2(diff_wr_rd__0[7]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[9] ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_4 
       (.I0(diff_wr_rd__0[6]),
        .I1(diff_wr_rd__0[4]),
        .I2(diff_wr_rd__0[2]),
        .I3(diff_wr_rd__0[1]),
        .I4(diff_wr_rd__0[3]),
        .I5(diff_wr_rd__0[5]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_6 
       (.I0(WR_PNTR_RD),
        .I1(\gc0.count_d1_reg[8] [8]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_7 
       (.I0(p_24_out[7]),
        .I1(\gc0.count_d1_reg[8] [7]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_8 
       (.I0(p_24_out[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_9 
       (.I0(p_24_out[5]),
        .I1(\gc0.count_d1_reg[8] [5]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_9_n_0 ));
  CARRY4 \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2 
       (.CI(1'b0),
        .CO({\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_0 ,\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_1 ,\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_2 ,\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_3 }),
        .CYINIT(1'b1),
        .DI(p_24_out[3:0]),
        .O({diff_wr_rd__0[3:1],O}),
        .S({\g_rd.gvalid_low.rd_dc_i[6]_i_3_n_0 ,\g_rd.gvalid_low.rd_dc_i[6]_i_4_n_0 ,\g_rd.gvalid_low.rd_dc_i[6]_i_5_n_0 ,\g_rd.gvalid_low.rd_dc_i[6]_i_6_n_0 }));
  CARRY4 \g_rd.gvalid_low.rd_dc_i_reg[9]_i_3 
       (.CI(\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_0 ),
        .CO(\NLW_g_rd.gvalid_low.rd_dc_i_reg[9]_i_3_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_g_rd.gvalid_low.rd_dc_i_reg[9]_i_3_O_UNCONNECTED [3:1],diff_wr_rd__0[8]}),
        .S({1'b0,1'b0,1'b0,\g_rd.gvalid_low.rd_dc_i[9]_i_6_n_0 }));
  CARRY4 \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5 
       (.CI(\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_0 ),
        .CO({\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_0 ,\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_1 ,\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_2 ,\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_3 }),
        .CYINIT(1'b0),
        .DI(p_24_out[7:4]),
        .O(diff_wr_rd__0[7:4]),
        .S({\g_rd.gvalid_low.rd_dc_i[9]_i_7_n_0 ,\g_rd.gvalid_low.rd_dc_i[9]_i_8_n_0 ,\g_rd.gvalid_low.rd_dc_i[9]_i_9_n_0 ,\g_rd.gvalid_low.rd_dc_i[9]_i_10_n_0 }));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[4]_i_3 
       (.I0(p_24_out[3]),
        .I1(\gc0.count_d1_reg[8] [3]),
        .O(\gdiff.diff_pntr_pad[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[4]_i_4 
       (.I0(p_24_out[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .O(\gdiff.diff_pntr_pad[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[4]_i_5 
       (.I0(p_24_out[1]),
        .I1(\gc0.count_d1_reg[8] [1]),
        .O(\gdiff.diff_pntr_pad[4]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[4]_i_6 
       (.I0(p_24_out[0]),
        .I1(\gc0.count_d1_reg[8] [0]),
        .O(\gdiff.diff_pntr_pad[4]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[8]_i_2 
       (.I0(p_24_out[7]),
        .I1(\gc0.count_d1_reg[8] [7]),
        .O(\gdiff.diff_pntr_pad[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[8]_i_3 
       (.I0(p_24_out[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .O(\gdiff.diff_pntr_pad[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[8]_i_4 
       (.I0(p_24_out[5]),
        .I1(\gc0.count_d1_reg[8] [5]),
        .O(\gdiff.diff_pntr_pad[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[8]_i_5 
       (.I0(p_24_out[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .O(\gdiff.diff_pntr_pad[8]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[9]_i_2 
       (.I0(WR_PNTR_RD),
        .I1(\gc0.count_d1_reg[8] [8]),
        .O(\gdiff.diff_pntr_pad[9]_i_2_n_0 ));
  CARRY4 \gdiff.diff_pntr_pad_reg[4]_i_1 
       (.CI(1'b0),
        .CO({\gdiff.diff_pntr_pad_reg[4]_i_1_n_0 ,\gdiff.diff_pntr_pad_reg[4]_i_1_n_1 ,\gdiff.diff_pntr_pad_reg[4]_i_1_n_2 ,\gdiff.diff_pntr_pad_reg[4]_i_1_n_3 }),
        .CYINIT(p_0_out),
        .DI(p_24_out[3:0]),
        .O(\gdiff.diff_pntr_pad_reg[9] [3:0]),
        .S({\gdiff.diff_pntr_pad[4]_i_3_n_0 ,\gdiff.diff_pntr_pad[4]_i_4_n_0 ,\gdiff.diff_pntr_pad[4]_i_5_n_0 ,\gdiff.diff_pntr_pad[4]_i_6_n_0 }));
  CARRY4 \gdiff.diff_pntr_pad_reg[8]_i_1 
       (.CI(\gdiff.diff_pntr_pad_reg[4]_i_1_n_0 ),
        .CO({\gdiff.diff_pntr_pad_reg[8]_i_1_n_0 ,\gdiff.diff_pntr_pad_reg[8]_i_1_n_1 ,\gdiff.diff_pntr_pad_reg[8]_i_1_n_2 ,\gdiff.diff_pntr_pad_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI(p_24_out[7:4]),
        .O(\gdiff.diff_pntr_pad_reg[9] [7:4]),
        .S({\gdiff.diff_pntr_pad[8]_i_2_n_0 ,\gdiff.diff_pntr_pad[8]_i_3_n_0 ,\gdiff.diff_pntr_pad[8]_i_4_n_0 ,\gdiff.diff_pntr_pad[8]_i_5_n_0 }));
  CARRY4 \gdiff.diff_pntr_pad_reg[9]_i_1 
       (.CI(\gdiff.diff_pntr_pad_reg[8]_i_1_n_0 ),
        .CO(\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_O_UNCONNECTED [3:1],\gdiff.diff_pntr_pad_reg[9] [8]}),
        .S({1'b0,1'b0,1'b0,\gdiff.diff_pntr_pad[9]_i_2_n_0 }));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(p_24_out[0]),
        .I1(\gc0.count_d1_reg[8] [0]),
        .I2(p_24_out[1]),
        .I3(\gc0.count_d1_reg[8] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(p_24_out[0]),
        .I1(\gc0.count_reg[7] [0]),
        .I2(p_24_out[1]),
        .I3(\gc0.count_reg[7] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(p_24_out[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .I2(p_24_out[3]),
        .I3(\gc0.count_d1_reg[8] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(p_24_out[2]),
        .I1(\gc0.count_reg[7] [2]),
        .I2(p_24_out[3]),
        .I3(\gc0.count_reg[7] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(p_24_out[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .I2(p_24_out[5]),
        .I3(\gc0.count_d1_reg[8] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(p_24_out[4]),
        .I1(\gc0.count_reg[7] [4]),
        .I2(p_24_out[5]),
        .I3(\gc0.count_reg[7] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(p_24_out[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .I2(p_24_out[7]),
        .I3(\gc0.count_d1_reg[8] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(p_24_out[6]),
        .I1(\gc0.count_reg[7] [6]),
        .I2(p_24_out[7]),
        .I3(\gc0.count_reg[7] [7]),
        .O(v1_reg_0[3]));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(RD_PNTR_WR[8]),
        .I1(Q),
        .O(ram_full_fb_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(RD_PNTR_WR[8]),
        .I1(D),
        .O(ram_full_fb_i_reg_0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "9" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_32x512_xpm_cdc_gray rd_pntr_cdc_inst
       (.dest_clk(s_aclk),
        .dest_out_bin(RD_PNTR_WR),
        .src_clk(m_aclk),
        .src_in_bin(\gc0.count_d1_reg[8] ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "9" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_32x512_xpm_cdc_gray__1 wr_pntr_cdc_inst
       (.dest_clk(m_aclk),
        .dest_out_bin({WR_PNTR_RD,p_24_out}),
        .src_clk(s_aclk),
        .src_in_bin(\gic0.gc0.count_d2_reg[8] ));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module gpif2mst_async_32x512_compare
   (comp1,
    v1_reg,
    \dest_out_bin_ff_reg[8] );
  output comp1;
  input [3:0]v1_reg;
  input \dest_out_bin_ff_reg[8] ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp1;
  wire \dest_out_bin_ff_reg[8] ;
  wire [3:0]v1_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\dest_out_bin_ff_reg[8] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module gpif2mst_async_32x512_compare_0
   (ram_full_fb_i_reg,
    v1_reg_0,
    \dest_out_bin_ff_reg[8] ,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    out,
    s_axis_tvalid,
    comp1);
  output ram_full_fb_i_reg;
  input [3:0]v1_reg_0;
  input \dest_out_bin_ff_reg[8] ;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input out;
  input s_axis_tvalid;
  input comp1;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp1;
  wire comp2;
  wire \dest_out_bin_ff_reg[8] ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire out;
  wire ram_full_fb_i_reg;
  wire s_axis_tvalid;
  wire [3:0]v1_reg_0;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp2}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\dest_out_bin_ff_reg[8] }));
  LUT5 #(
    .INIT(32'h55550400)) 
    ram_full_i_i_1
       (.I0(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .I1(comp2),
        .I2(out),
        .I3(s_axis_tvalid),
        .I4(comp1),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module gpif2mst_async_32x512_compare_1
   (ram_empty_fb_i_reg,
    v1_reg,
    \gc0.count_d1_reg[8] ,
    E,
    comp1);
  output ram_empty_fb_i_reg;
  input [3:0]v1_reg;
  input \gc0.count_d1_reg[8] ;
  input [0:0]E;
  input comp1;

  wire [0:0]E;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp0;
  wire comp1;
  wire \gc0.count_d1_reg[8] ;
  wire ram_empty_fb_i_reg;
  wire [3:0]v1_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp0}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_d1_reg[8] }));
  LUT3 #(
    .INIT(8'hEA)) 
    ram_empty_i_i_1
       (.I0(comp0),
        .I1(E),
        .I2(comp1),
        .O(ram_empty_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module gpif2mst_async_32x512_compare_2
   (comp1,
    v1_reg_0,
    \gc0.count_reg[8] );
  output comp1;
  input [3:0]v1_reg_0;
  input \gc0.count_reg[8] ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp1;
  wire \gc0.count_reg[8] ;
  wire [3:0]v1_reg_0;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_reg[8] }));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module gpif2mst_async_32x512_fifo_generator_ramfifo
   (wr_rst_busy,
    m_axis_tdata,
    axis_rd_data_count,
    axis_prog_full,
    axis_wr_data_count,
    s_axis_tready,
    m_axis_tvalid,
    axis_prog_empty,
    s_aclk,
    m_aclk,
    m_axis_tready,
    s_axis_tvalid,
    s_axis_tdata,
    s_aresetn);
  output wr_rst_busy;
  output [31:0]m_axis_tdata;
  output [9:0]axis_rd_data_count;
  output axis_prog_full;
  output [9:0]axis_wr_data_count;
  output s_axis_tready;
  output m_axis_tvalid;
  output axis_prog_empty;
  input s_aclk;
  input m_aclk;
  input m_axis_tready;
  input s_axis_tvalid;
  input [31:0]s_axis_tdata;
  input s_aresetn;

  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire [0:0]diff_wr_rd;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_10 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_20 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_21 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_22 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_23 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_24 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_25 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_26 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_27 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_28 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_11 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire [3:0]\gras.rsts/c0/v1_reg ;
  wire [3:0]\gras.rsts/c1/v1_reg ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire p_0_in;
  wire p_0_out;
  wire [8:0]p_0_out_0;
  wire [8:0]p_13_out;
  wire [8:8]p_14_out;
  wire [8:8]p_24_out;
  wire [8:0]p_25_out;
  wire [9:1]plusOp;
  wire [7:0]rd_pntr_plus1;
  wire rst_full_gen_i;
  wire rstblk_n_0;
  wire rstblk_n_1;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire [8:8]wr_pntr_plus2;
  wire wr_rst_busy;

  gpif2mst_async_32x512_clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.D(wr_pntr_plus2),
        .O(diff_wr_rd),
        .Q(p_14_out),
        .RD_PNTR_WR(p_25_out),
        .WR_PNTR_RD(p_24_out),
        .\g_rd.gvalid_low.rd_dc_i_reg[1] (\gntv_or_sync_fifo.gcx.clkx_n_20 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[2] (\gntv_or_sync_fifo.gcx.clkx_n_21 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_28 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[4] (\gntv_or_sync_fifo.gcx.clkx_n_27 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[5] (\gntv_or_sync_fifo.gcx.clkx_n_26 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[6] (\gntv_or_sync_fifo.gcx.clkx_n_25 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[7] (\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[8] (\gntv_or_sync_fifo.gcx.clkx_n_23 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[9] (\gntv_or_sync_fifo.gcx.clkx_n_22 ),
        .\gc0.count_d1_reg[8] (p_0_out_0),
        .\gc0.count_reg[7] (rd_pntr_plus1),
        .\gdiff.diff_pntr_pad_reg[9] (plusOp),
        .\gic0.gc0.count_d2_reg[8] (p_13_out),
        .m_aclk(m_aclk),
        .p_0_out(p_0_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_10 ),
        .s_aclk(s_aclk),
        .v1_reg(\gras.rsts/c0/v1_reg ),
        .v1_reg_0(\gras.rsts/c1/v1_reg ));
  gpif2mst_async_32x512_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.D(plusOp),
        .E(\gntv_or_sync_fifo.gl0.rd_n_11 ),
        .ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .O(diff_wr_rd),
        .Q(p_0_out_0),
        .WR_PNTR_RD(p_24_out),
        .axis_prog_empty(axis_prog_empty),
        .axis_rd_data_count(axis_rd_data_count),
        .\dest_out_bin_ff_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_26 ),
        .\dest_out_bin_ff_reg[3]_0 (\gntv_or_sync_fifo.gcx.clkx_n_27 ),
        .\dest_out_bin_ff_reg[3]_1 (\gntv_or_sync_fifo.gcx.clkx_n_28 ),
        .\dest_out_bin_ff_reg[3]_2 (\gntv_or_sync_fifo.gcx.clkx_n_21 ),
        .\dest_out_bin_ff_reg[3]_3 (\gntv_or_sync_fifo.gcx.clkx_n_20 ),
        .\dest_out_bin_ff_reg[7] (\gntv_or_sync_fifo.gcx.clkx_n_22 ),
        .\dest_out_bin_ff_reg[7]_0 (\gntv_or_sync_fifo.gcx.clkx_n_23 ),
        .\dest_out_bin_ff_reg[7]_1 (\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .\dest_out_bin_ff_reg[7]_2 (\gntv_or_sync_fifo.gcx.clkx_n_25 ),
        .\gc0.count_d1_reg[7] (rd_pntr_plus1),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (rstblk_n_1),
        .p_0_out(p_0_out),
        .v1_reg(\gras.rsts/c0/v1_reg ),
        .v1_reg_0(\gras.rsts/c1/v1_reg ));
  gpif2mst_async_32x512_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_13_out),
        .Q(p_14_out),
        .RD_PNTR_WR(p_25_out),
        .WEBWE(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .axis_prog_full(axis_prog_full),
        .axis_wr_data_count(axis_wr_data_count),
        .\dest_out_bin_ff_reg[8] (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .\dest_out_bin_ff_reg[8]_0 (\gntv_or_sync_fifo.gcx.clkx_n_10 ),
        .\gic0.gc0.count_d1_reg[8] (wr_pntr_plus2),
        .\grstd1.grst_full.grst_f.rst_d3_reg (rst_full_gen_i),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (rstblk_n_0),
        .out(p_0_in),
        .s_aclk(s_aclk),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
  gpif2mst_async_32x512_memory \gntv_or_sync_fifo.mem 
       (.E(\gntv_or_sync_fifo.gl0.rd_n_11 ),
        .ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .Q(p_0_out_0),
        .WEBWE(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .\gic0.gc0.count_d2_reg[8] (p_13_out),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .out(p_0_in),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tvalid(s_axis_tvalid));
  gpif2mst_async_32x512_reset_blk_ramfifo rstblk
       (.m_aclk(m_aclk),
        .out(rst_full_gen_i),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .\syncstages_ff_reg[0] (rstblk_n_0),
        .\syncstages_ff_reg[0]_0 (rstblk_n_1),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module gpif2mst_async_32x512_fifo_generator_top
   (wr_rst_busy,
    m_axis_tdata,
    axis_rd_data_count,
    axis_prog_full,
    axis_wr_data_count,
    s_axis_tready,
    m_axis_tvalid,
    axis_prog_empty,
    s_aclk,
    m_aclk,
    m_axis_tready,
    s_axis_tvalid,
    s_axis_tdata,
    s_aresetn);
  output wr_rst_busy;
  output [31:0]m_axis_tdata;
  output [9:0]axis_rd_data_count;
  output axis_prog_full;
  output [9:0]axis_wr_data_count;
  output s_axis_tready;
  output m_axis_tvalid;
  output axis_prog_empty;
  input s_aclk;
  input m_aclk;
  input m_axis_tready;
  input s_axis_tvalid;
  input [31:0]s_axis_tdata;
  input s_aresetn;

  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire wr_rst_busy;

  gpif2mst_async_32x512_fifo_generator_ramfifo \grf.rf 
       (.axis_prog_empty(axis_prog_empty),
        .axis_prog_full(axis_prog_full),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "32" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "1" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "10" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "18" *) 
(* C_DIN_WIDTH_AXIS = "32" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "18" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "0" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "1" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "11" *) (* C_IMPLEMENTATION_TYPE_RACH = "12" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "11" *) (* C_IMPLEMENTATION_TYPE_WACH = "12" *) (* C_IMPLEMENTATION_TYPE_WDCH = "11" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "12" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "1" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "4kx4" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "13" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1021" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "13" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1021" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "13" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "1" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "508" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "1" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "10" *) 
(* C_RD_DEPTH = "1024" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "10" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "10" *) 
(* C_WR_DEPTH = "1024" *) (* C_WR_DEPTH_AXIS = "512" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "10" *) 
(* C_WR_PNTR_WIDTH_AXIS = "9" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_1" *) 
module gpif2mst_async_32x512_fifo_generator_v13_2_1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [17:0]din;
  input wr_en;
  input rd_en;
  input [9:0]prog_empty_thresh;
  input [9:0]prog_empty_thresh_assert;
  input [9:0]prog_empty_thresh_negate;
  input [9:0]prog_full_thresh;
  input [9:0]prog_full_thresh_assert;
  input [9:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [17:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [9:0]data_count;
  output [9:0]rd_data_count;
  output [9:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [31:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [0:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [31:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [0:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [8:0]axis_prog_full_thresh;
  input [8:0]axis_prog_empty_thresh;
  output [9:0]axis_data_count;
  output [9:0]axis_wr_data_count;
  output [9:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire wr_rst_busy;

  assign almost_empty = \<const1> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign data_count[9] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[17] = \<const0> ;
  assign dout[16] = \<const0> ;
  assign dout[15] = \<const0> ;
  assign dout[14] = \<const0> ;
  assign dout[13] = \<const0> ;
  assign dout[12] = \<const0> ;
  assign dout[11] = \<const0> ;
  assign dout[10] = \<const0> ;
  assign dout[9] = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7] = \<const0> ;
  assign dout[6] = \<const0> ;
  assign dout[5] = \<const0> ;
  assign dout[4] = \<const0> ;
  assign dout[3] = \<const0> ;
  assign dout[2] = \<const0> ;
  assign dout[1] = \<const0> ;
  assign dout[0] = \<const0> ;
  assign empty = \<const1> ;
  assign full = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const1> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  gpif2mst_async_32x512_fifo_generator_v13_2_1_synth inst_fifo_gen
       (.axis_prog_empty(axis_prog_empty),
        .axis_prog_full(axis_prog_full),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_1_synth" *) 
module gpif2mst_async_32x512_fifo_generator_v13_2_1_synth
   (wr_rst_busy,
    m_axis_tdata,
    axis_rd_data_count,
    axis_prog_full,
    axis_wr_data_count,
    s_axis_tready,
    m_axis_tvalid,
    axis_prog_empty,
    s_aclk,
    m_aclk,
    m_axis_tready,
    s_axis_tvalid,
    s_axis_tdata,
    s_aresetn);
  output wr_rst_busy;
  output [31:0]m_axis_tdata;
  output [9:0]axis_rd_data_count;
  output axis_prog_full;
  output [9:0]axis_wr_data_count;
  output s_axis_tready;
  output m_axis_tvalid;
  output axis_prog_empty;
  input s_aclk;
  input m_aclk;
  input m_axis_tready;
  input s_axis_tvalid;
  input [31:0]s_axis_tdata;
  input s_aresetn;

  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire wr_rst_busy;

  gpif2mst_async_32x512_fifo_generator_top \gaxis_fifo.gaxisf.axisf 
       (.axis_prog_empty(axis_prog_empty),
        .axis_prog_full(axis_prog_full),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tdata(m_axis_tdata),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module gpif2mst_async_32x512_memory
   (ENB_dly_D,
    m_axis_tdata,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    WEBWE,
    out,
    s_axis_tvalid,
    E);
  output ENB_dly_D;
  output [31:0]m_axis_tdata;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;
  input [0:0]E;

  wire [0:0]E;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [31:0]doutb;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire s_axis_tvalid;

  gpif2mst_async_32x512_blk_mem_gen_v8_4_1 \gbm.gbmg.gbmga.ngecc.bmg 
       (.D(doutb),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tvalid(s_axis_tvalid));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[0]),
        .Q(m_axis_tdata[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[10] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[10]),
        .Q(m_axis_tdata[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[11] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[11]),
        .Q(m_axis_tdata[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[12] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[12]),
        .Q(m_axis_tdata[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[13] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[13]),
        .Q(m_axis_tdata[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[14] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[14]),
        .Q(m_axis_tdata[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[15] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[15]),
        .Q(m_axis_tdata[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[16] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[16]),
        .Q(m_axis_tdata[16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[17] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[17]),
        .Q(m_axis_tdata[17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[18] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[18]),
        .Q(m_axis_tdata[18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[19] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[19]),
        .Q(m_axis_tdata[19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[1]),
        .Q(m_axis_tdata[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[20] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[20]),
        .Q(m_axis_tdata[20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[21] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[21]),
        .Q(m_axis_tdata[21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[22] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[22]),
        .Q(m_axis_tdata[22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[23] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[23]),
        .Q(m_axis_tdata[23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[24] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[24]),
        .Q(m_axis_tdata[24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[25] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[25]),
        .Q(m_axis_tdata[25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[26] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[26]),
        .Q(m_axis_tdata[26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[27] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[27]),
        .Q(m_axis_tdata[27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[28] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[28]),
        .Q(m_axis_tdata[28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[29] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[29]),
        .Q(m_axis_tdata[29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[2]),
        .Q(m_axis_tdata[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[30] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[30]),
        .Q(m_axis_tdata[30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[31] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[31]),
        .Q(m_axis_tdata[31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[3]),
        .Q(m_axis_tdata[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[4]),
        .Q(m_axis_tdata[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[5]),
        .Q(m_axis_tdata[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[6]),
        .Q(m_axis_tdata[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[7]),
        .Q(m_axis_tdata[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[8]),
        .Q(m_axis_tdata[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[9] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[9]),
        .Q(m_axis_tdata[9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module gpif2mst_async_32x512_rd_bin_cntr
   (ram_empty_fb_i_reg,
    Q,
    ram_empty_fb_i_reg_0,
    \gc0.count_d1_reg[7]_0 ,
    WR_PNTR_RD,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    E,
    m_aclk);
  output ram_empty_fb_i_reg;
  output [8:0]Q;
  output ram_empty_fb_i_reg_0;
  output [7:0]\gc0.count_d1_reg[7]_0 ;
  input [0:0]WR_PNTR_RD;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input [0:0]E;
  input m_aclk;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire \gc0.count[8]_i_2_n_0 ;
  wire [7:0]\gc0.count_d1_reg[7]_0 ;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  wire [8:0]plusOp__1;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire [8:8]rd_pntr_plus1;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [0]),
        .O(plusOp__1[0]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [0]),
        .I1(\gc0.count_d1_reg[7]_0 [1]),
        .O(plusOp__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [0]),
        .I1(\gc0.count_d1_reg[7]_0 [1]),
        .I2(\gc0.count_d1_reg[7]_0 [2]),
        .O(plusOp__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [1]),
        .I1(\gc0.count_d1_reg[7]_0 [0]),
        .I2(\gc0.count_d1_reg[7]_0 [2]),
        .I3(\gc0.count_d1_reg[7]_0 [3]),
        .O(plusOp__1[3]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [2]),
        .I1(\gc0.count_d1_reg[7]_0 [0]),
        .I2(\gc0.count_d1_reg[7]_0 [1]),
        .I3(\gc0.count_d1_reg[7]_0 [3]),
        .I4(\gc0.count_d1_reg[7]_0 [4]),
        .O(plusOp__1[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [3]),
        .I1(\gc0.count_d1_reg[7]_0 [1]),
        .I2(\gc0.count_d1_reg[7]_0 [0]),
        .I3(\gc0.count_d1_reg[7]_0 [2]),
        .I4(\gc0.count_d1_reg[7]_0 [4]),
        .I5(\gc0.count_d1_reg[7]_0 [5]),
        .O(plusOp__1[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(\gc0.count_d1_reg[7]_0 [6]),
        .O(plusOp__1[6]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(\gc0.count_d1_reg[7]_0 [6]),
        .I2(\gc0.count_d1_reg[7]_0 [7]),
        .O(plusOp__1[7]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[8]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [6]),
        .I1(\gc0.count[8]_i_2_n_0 ),
        .I2(\gc0.count_d1_reg[7]_0 [7]),
        .I3(rd_pntr_plus1),
        .O(plusOp__1[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gc0.count[8]_i_2 
       (.I0(\gc0.count_d1_reg[7]_0 [5]),
        .I1(\gc0.count_d1_reg[7]_0 [3]),
        .I2(\gc0.count_d1_reg[7]_0 [1]),
        .I3(\gc0.count_d1_reg[7]_0 [0]),
        .I4(\gc0.count_d1_reg[7]_0 [2]),
        .I5(\gc0.count_d1_reg[7]_0 [4]),
        .O(\gc0.count[8]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [0]),
        .Q(Q[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [1]),
        .Q(Q[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [2]),
        .Q(Q[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [3]),
        .Q(Q[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [4]),
        .Q(Q[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [5]),
        .Q(Q[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [6]),
        .Q(Q[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [7]),
        .Q(Q[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(rd_pntr_plus1),
        .Q(Q[8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[0]),
        .Q(\gc0.count_d1_reg[7]_0 [0]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[1]),
        .Q(\gc0.count_d1_reg[7]_0 [1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[2]),
        .Q(\gc0.count_d1_reg[7]_0 [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[3]),
        .Q(\gc0.count_d1_reg[7]_0 [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[4]),
        .Q(\gc0.count_d1_reg[7]_0 [4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[5]),
        .Q(\gc0.count_d1_reg[7]_0 [5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[6]),
        .Q(\gc0.count_d1_reg[7]_0 [6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[7]),
        .Q(\gc0.count_d1_reg[7]_0 [7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[8]),
        .Q(rd_pntr_plus1),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(Q[8]),
        .I1(WR_PNTR_RD),
        .O(ram_empty_fb_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(rd_pntr_plus1),
        .I1(WR_PNTR_RD),
        .O(ram_empty_fb_i_reg_0));
endmodule

(* ORIG_REF_NAME = "rd_dc_fwft_ext_as" *) 
module gpif2mst_async_32x512_rd_dc_fwft_ext_as
   (axis_rd_data_count,
    rd_dc_i,
    \dest_out_bin_ff_reg[7] ,
    m_aclk,
    \dest_out_bin_ff_reg[7]_0 ,
    \dest_out_bin_ff_reg[7]_1 ,
    \dest_out_bin_ff_reg[7]_2 ,
    \dest_out_bin_ff_reg[3] ,
    \dest_out_bin_ff_reg[3]_0 ,
    \dest_out_bin_ff_reg[3]_1 ,
    \dest_out_bin_ff_reg[3]_2 ,
    \dest_out_bin_ff_reg[3]_3 ,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [9:0]axis_rd_data_count;
  input [0:0]rd_dc_i;
  input \dest_out_bin_ff_reg[7] ;
  input m_aclk;
  input \dest_out_bin_ff_reg[7]_0 ;
  input \dest_out_bin_ff_reg[7]_1 ;
  input \dest_out_bin_ff_reg[7]_2 ;
  input \dest_out_bin_ff_reg[3] ;
  input \dest_out_bin_ff_reg[3]_0 ;
  input \dest_out_bin_ff_reg[3]_1 ;
  input \dest_out_bin_ff_reg[3]_2 ;
  input \dest_out_bin_ff_reg[3]_3 ;
  input \gpregsm1.curr_fwft_state_reg[1] ;

  wire [9:0]axis_rd_data_count;
  wire \dest_out_bin_ff_reg[3] ;
  wire \dest_out_bin_ff_reg[3]_0 ;
  wire \dest_out_bin_ff_reg[3]_1 ;
  wire \dest_out_bin_ff_reg[3]_2 ;
  wire \dest_out_bin_ff_reg[3]_3 ;
  wire \dest_out_bin_ff_reg[7] ;
  wire \dest_out_bin_ff_reg[7]_0 ;
  wire \dest_out_bin_ff_reg[7]_1 ;
  wire \dest_out_bin_ff_reg[7]_2 ;
  wire \gpregsm1.curr_fwft_state_reg[1] ;
  wire m_aclk;
  wire [0:0]rd_dc_i;

  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\gpregsm1.curr_fwft_state_reg[1] ),
        .Q(axis_rd_data_count[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3]_3 ),
        .Q(axis_rd_data_count[1]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3]_2 ),
        .Q(axis_rd_data_count[2]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3]_1 ),
        .Q(axis_rd_data_count[3]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3]_0 ),
        .Q(axis_rd_data_count[4]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3] ),
        .Q(axis_rd_data_count[5]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[7]_2 ),
        .Q(axis_rd_data_count[6]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[7]_1 ),
        .Q(axis_rd_data_count[7]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[7]_0 ),
        .Q(axis_rd_data_count[8]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[9] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[7] ),
        .Q(axis_rd_data_count[9]),
        .R(rd_dc_i));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module gpif2mst_async_32x512_rd_fwft
   (E,
    \g_rd.gvalid_low.rd_dc_i_reg[0] ,
    p_0_out,
    \gc0.count_d1_reg[8] ,
    rd_dc_i,
    m_axis_tvalid,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    m_aclk,
    m_axis_tready,
    out,
    O);
  output [0:0]E;
  output \g_rd.gvalid_low.rd_dc_i_reg[0] ;
  output p_0_out;
  output [0:0]\gc0.count_d1_reg[8] ;
  output [0:0]rd_dc_i;
  output m_axis_tvalid;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input m_aclk;
  input m_axis_tready;
  input out;
  input [0:0]O;

  wire [0:0]E;
  wire [0:0]O;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0__2;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i_reg0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0__1;
  wire \g_rd.gvalid_low.rd_dc_i_reg[0] ;
  wire [0:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire [1:0]next_fwft_state;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  wire out;
  wire p_0_out;
  wire [0:0]rd_dc_i;
  (* DONT_TOUCH *) wire user_valid;

  LUT6 #(
    .INIT(64'hFFFFF02F20000000)) 
    aempty_fwft_fb_i_i_1
       (.I0(m_axis_tready),
        .I1(empty_fwft_fb_o_i),
        .I2(curr_fwft_state[0]),
        .I3(curr_fwft_state[1]),
        .I4(out),
        .I5(aempty_fwft_fb_i),
        .O(aempty_fwft_i0__2));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(aempty_fwft_i0__2),
        .Q(aempty_fwft_fb_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(aempty_fwft_i0__2),
        .Q(aempty_fwft_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT5 #(
    .INIT(32'hFF0F0400)) 
    empty_fwft_fb_i_i_1
       (.I0(empty_fwft_fb_o_i),
        .I1(m_axis_tready),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .I4(empty_fwft_fb_i),
        .O(empty_fwft_i0__1));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_i0__1),
        .Q(empty_fwft_fb_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(m_axis_tready),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i_reg0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i_reg0),
        .Q(empty_fwft_fb_o_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_i0__1),
        .Q(empty_fwft_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT4 #(
    .INIT(16'h00D0)) 
    \g_rd.gvalid_low.rd_dc_i[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(O),
        .I2(user_valid),
        .I3(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[0] ));
  LUT3 #(
    .INIT(8'hBF)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_1 
       (.I0(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .I1(curr_fwft_state[1]),
        .I2(user_valid),
        .O(rd_dc_i));
  LUT5 #(
    .INIT(32'h04555555)) 
    \gc0.count_d1[8]_i_1 
       (.I0(out),
        .I1(m_axis_tready),
        .I2(empty_fwft_fb_o_i),
        .I3(curr_fwft_state[1]),
        .I4(curr_fwft_state[0]),
        .O(\gc0.count_d1_reg[8] ));
  LUT5 #(
    .INIT(32'hFFFF8088)) 
    \gdiff.diff_pntr_pad[4]_i_2 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(empty_fwft_fb_o_i),
        .I3(m_axis_tready),
        .I4(out),
        .O(p_0_out));
  LUT5 #(
    .INIT(32'h00004F00)) 
    \goreg_bm.dout_i[31]_i_1 
       (.I0(empty_fwft_fb_o_i),
        .I1(m_axis_tready),
        .I2(curr_fwft_state[0]),
        .I3(curr_fwft_state[1]),
        .I4(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .O(E));
  LUT4 #(
    .INIT(16'hFBAA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(m_axis_tready),
        .I2(empty_fwft_fb_o_i),
        .I3(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT5 #(
    .INIT(32'hA200FFFF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(m_axis_tready),
        .I2(empty_fwft_fb_o_i),
        .I3(curr_fwft_state[0]),
        .I4(out),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(user_valid),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT1 #(
    .INIT(2'h1)) 
    m_axis_tvalid_INST_0
       (.I0(empty_fwft_i),
        .O(m_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module gpif2mst_async_32x512_rd_logic
   (axis_rd_data_count,
    axis_prog_empty,
    E,
    Q,
    \gc0.count_d1_reg[7] ,
    ENB_I,
    p_0_out,
    m_axis_tvalid,
    v1_reg,
    v1_reg_0,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    m_aclk,
    \dest_out_bin_ff_reg[7] ,
    \dest_out_bin_ff_reg[7]_0 ,
    \dest_out_bin_ff_reg[7]_1 ,
    \dest_out_bin_ff_reg[7]_2 ,
    \dest_out_bin_ff_reg[3] ,
    \dest_out_bin_ff_reg[3]_0 ,
    \dest_out_bin_ff_reg[3]_1 ,
    \dest_out_bin_ff_reg[3]_2 ,
    \dest_out_bin_ff_reg[3]_3 ,
    m_axis_tready,
    WR_PNTR_RD,
    ENB_dly_D,
    O,
    D);
  output [9:0]axis_rd_data_count;
  output axis_prog_empty;
  output [0:0]E;
  output [8:0]Q;
  output [7:0]\gc0.count_d1_reg[7] ;
  output ENB_I;
  output p_0_out;
  output m_axis_tvalid;
  input [3:0]v1_reg;
  input [3:0]v1_reg_0;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input m_aclk;
  input \dest_out_bin_ff_reg[7] ;
  input \dest_out_bin_ff_reg[7]_0 ;
  input \dest_out_bin_ff_reg[7]_1 ;
  input \dest_out_bin_ff_reg[7]_2 ;
  input \dest_out_bin_ff_reg[3] ;
  input \dest_out_bin_ff_reg[3]_0 ;
  input \dest_out_bin_ff_reg[3]_1 ;
  input \dest_out_bin_ff_reg[3]_2 ;
  input \dest_out_bin_ff_reg[3]_3 ;
  input m_axis_tready;
  input [0:0]WR_PNTR_RD;
  input ENB_dly_D;
  input [0:0]O;
  input [8:0]D;

  wire [8:0]D;
  wire [0:0]E;
  wire ENB_I;
  wire ENB_dly_D;
  wire [0:0]O;
  wire [8:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire axis_prog_empty;
  wire [9:0]axis_rd_data_count;
  wire \dest_out_bin_ff_reg[3] ;
  wire \dest_out_bin_ff_reg[3]_0 ;
  wire \dest_out_bin_ff_reg[3]_1 ;
  wire \dest_out_bin_ff_reg[3]_2 ;
  wire \dest_out_bin_ff_reg[3]_3 ;
  wire \dest_out_bin_ff_reg[7] ;
  wire \dest_out_bin_ff_reg[7]_0 ;
  wire \dest_out_bin_ff_reg[7]_1 ;
  wire \dest_out_bin_ff_reg[7]_2 ;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire \gr1.gr1_int.rfwft_n_1 ;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  wire p_0_out;
  wire p_2_out;
  wire p_8_out;
  wire [9:9]rd_dc_i;
  wire rpntr_n_0;
  wire rpntr_n_10;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  gpif2mst_async_32x512_rd_fwft \gr1.gr1_int.rfwft 
       (.E(E),
        .O(O),
        .\g_rd.gvalid_low.rd_dc_i_reg[0] (\gr1.gr1_int.rfwft_n_1 ),
        .\gc0.count_d1_reg[8] (p_8_out),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .out(p_2_out),
        .p_0_out(p_0_out),
        .rd_dc_i(rd_dc_i));
  gpif2mst_async_32x512_rd_dc_fwft_ext_as \gr1.grdc2.rdc 
       (.axis_rd_data_count(axis_rd_data_count),
        .\dest_out_bin_ff_reg[3] (\dest_out_bin_ff_reg[3] ),
        .\dest_out_bin_ff_reg[3]_0 (\dest_out_bin_ff_reg[3]_0 ),
        .\dest_out_bin_ff_reg[3]_1 (\dest_out_bin_ff_reg[3]_1 ),
        .\dest_out_bin_ff_reg[3]_2 (\dest_out_bin_ff_reg[3]_2 ),
        .\dest_out_bin_ff_reg[3]_3 (\dest_out_bin_ff_reg[3]_3 ),
        .\dest_out_bin_ff_reg[7] (\dest_out_bin_ff_reg[7] ),
        .\dest_out_bin_ff_reg[7]_0 (\dest_out_bin_ff_reg[7]_0 ),
        .\dest_out_bin_ff_reg[7]_1 (\dest_out_bin_ff_reg[7]_1 ),
        .\dest_out_bin_ff_reg[7]_2 (\dest_out_bin_ff_reg[7]_2 ),
        .\gpregsm1.curr_fwft_state_reg[1] (\gr1.gr1_int.rfwft_n_1 ),
        .m_aclk(m_aclk),
        .rd_dc_i(rd_dc_i));
  gpif2mst_async_32x512_rd_pe_as \gras.gpe.rdpe 
       (.D(D),
        .axis_prog_empty(axis_prog_empty),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .out(p_2_out));
  gpif2mst_async_32x512_rd_status_flags_as \gras.rsts 
       (.E(p_8_out),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .\gc0.count_d1_reg[8] (rpntr_n_0),
        .\gc0.count_reg[8] (rpntr_n_10),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .out(p_2_out),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0));
  gpif2mst_async_32x512_rd_bin_cntr rpntr
       (.E(p_8_out),
        .Q(Q),
        .WR_PNTR_RD(WR_PNTR_RD),
        .\gc0.count_d1_reg[7]_0 (\gc0.count_d1_reg[7] ),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .ram_empty_fb_i_reg(rpntr_n_0),
        .ram_empty_fb_i_reg_0(rpntr_n_10));
endmodule

(* ORIG_REF_NAME = "rd_pe_as" *) 
module gpif2mst_async_32x512_rd_pe_as
   (axis_prog_empty,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    m_aclk,
    out,
    D);
  output axis_prog_empty;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input m_aclk;
  input out;
  input [8:0]D;

  wire [8:0]D;
  wire axis_prog_empty;
  wire [9:1]diff_pntr_pad;
  wire \gpe1.prog_empty_i_i_1_n_0 ;
  wire \gpe1.prog_empty_i_i_2_n_0 ;
  wire \gpe1.prog_empty_i_i_3_n_0 ;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  wire out;

  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(diff_pntr_pad[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(diff_pntr_pad[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(diff_pntr_pad[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(diff_pntr_pad[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(diff_pntr_pad[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(diff_pntr_pad[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(diff_pntr_pad[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(diff_pntr_pad[8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[9] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(diff_pntr_pad[9]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \gpe1.prog_empty_i_i_1 
       (.I0(axis_prog_empty),
        .I1(out),
        .I2(\gpe1.prog_empty_i_i_2_n_0 ),
        .I3(\gpe1.prog_empty_i_i_3_n_0 ),
        .O(\gpe1.prog_empty_i_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \gpe1.prog_empty_i_i_2 
       (.I0(diff_pntr_pad[8]),
        .I1(diff_pntr_pad[9]),
        .I2(diff_pntr_pad[7]),
        .I3(diff_pntr_pad[6]),
        .O(\gpe1.prog_empty_i_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFEA)) 
    \gpe1.prog_empty_i_i_3 
       (.I0(diff_pntr_pad[3]),
        .I1(diff_pntr_pad[2]),
        .I2(diff_pntr_pad[1]),
        .I3(diff_pntr_pad[5]),
        .I4(diff_pntr_pad[4]),
        .O(\gpe1.prog_empty_i_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gpe1.prog_empty_i_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\gpe1.prog_empty_i_i_1_n_0 ),
        .Q(axis_prog_empty),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module gpif2mst_async_32x512_rd_status_flags_as
   (out,
    ENB_I,
    v1_reg,
    \gc0.count_d1_reg[8] ,
    v1_reg_0,
    \gc0.count_reg[8] ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    m_aclk,
    ENB_dly_D,
    E);
  output out;
  output ENB_I;
  input [3:0]v1_reg;
  input \gc0.count_d1_reg[8] ;
  input [3:0]v1_reg_0;
  input \gc0.count_reg[8] ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input m_aclk;
  input ENB_dly_D;
  input [0:0]E;

  wire [0:0]E;
  wire ENB_I;
  wire ENB_dly_D;
  wire c0_n_0;
  wire comp1;
  wire \gc0.count_d1_reg[8] ;
  wire \gc0.count_reg[8] ;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  assign out = ram_empty_fb_i;
  LUT4 #(
    .INIT(16'hABAA)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(ENB_dly_D),
        .I1(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .I2(ram_empty_fb_i),
        .I3(E),
        .O(ENB_I));
  gpif2mst_async_32x512_compare_1 c0
       (.E(E),
        .comp1(comp1),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .ram_empty_fb_i_reg(c0_n_0),
        .v1_reg(v1_reg));
  gpif2mst_async_32x512_compare_2 c1
       (.comp1(comp1),
        .\gc0.count_reg[8] (\gc0.count_reg[8] ),
        .v1_reg_0(v1_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_empty_fb_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_empty_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module gpif2mst_async_32x512_reset_blk_ramfifo
   (\syncstages_ff_reg[0] ,
    \syncstages_ff_reg[0]_0 ,
    wr_rst_busy,
    out,
    s_aclk,
    m_aclk,
    s_aresetn);
  output \syncstages_ff_reg[0] ;
  output \syncstages_ff_reg[0]_0 ;
  output wr_rst_busy;
  output out;
  input s_aclk;
  input m_aclk;
  input s_aresetn;

  wire arst_sync_rd_rst;
  wire dest_out;
  wire dest_rst;
  wire inverted_reset;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ;
  wire [3:0]rd_rst_wr_ext;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d1;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d3;
  wire s_aclk;
  wire s_aresetn;
  wire sckt_rd_rst_wr;
  wire \syncstages_ff_reg[0] ;
  wire \syncstages_ff_reg[0]_0 ;
  wire wr_rst_busy_i;
  wire [1:0]wr_rst_rd_ext;

  assign out = rst_d3;
  assign wr_rst_busy = wr_rst_busy_i;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_rst_busy_i),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDSE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d2),
        .Q(rst_d3),
        .S(\syncstages_ff_reg[0] ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF4)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(wr_rst_rd_ext[1]),
        .I1(\syncstages_ff_reg[0]_0 ),
        .I2(arst_sync_rd_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .Q(\syncstages_ff_reg[0]_0 ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFF8A)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(\syncstages_ff_reg[0] ),
        .I1(rd_rst_wr_ext[0]),
        .I2(rd_rst_wr_ext[1]),
        .I3(dest_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .Q(\syncstages_ff_reg[0] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFB0F0B0B0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_i_1 
       (.I0(rd_rst_wr_ext[2]),
        .I1(rd_rst_wr_ext[3]),
        .I2(wr_rst_busy_i),
        .I3(rd_rst_wr_ext[0]),
        .I4(rd_rst_wr_ext[1]),
        .I5(dest_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ),
        .Q(wr_rst_busy_i),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]),
        .R(1'b0));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_32x512_xpm_cdc_single \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(s_aclk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(m_aclk),
        .src_in(\syncstages_ff_reg[0]_0 ));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_32x512_xpm_cdc_single__1 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(m_aclk),
        .dest_out(dest_out),
        .src_clk(s_aclk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_32x512_xpm_cdc_sync_rst \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(m_aclk),
        .dest_rst(arst_sync_rd_rst),
        .src_rst(inverted_reset));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_32x512_xpm_cdc_sync_rst__1 \ngwrdrst.grst.g7serrst.gsckt_wrst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(s_aclk),
        .dest_rst(dest_rst),
        .src_rst(inverted_reset));
  LUT1 #(
    .INIT(2'h1)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.xpm_cdc_sync_rst_inst_wrst_i_1 
       (.I0(s_aresetn),
        .O(inverted_reset));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module gpif2mst_async_32x512_wr_bin_cntr
   (S,
    Q,
    \gdiff.diff_pntr_pad_reg[8] ,
    \wr_data_count_i_reg[0] ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \wr_data_count_i_reg[9] ,
    \wr_data_count_i_reg[9]_0 ,
    \gdiff.diff_pntr_pad_reg[9] ,
    \gic0.gc0.count_d1_reg[8]_0 ,
    v1_reg,
    v1_reg_0,
    D,
    RD_PNTR_WR,
    O,
    \gic0.gc0.count_d2_reg[7]_0 ,
    \gic0.gc0.count_d2_reg[7]_1 ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    E,
    s_aclk);
  output [3:0]S;
  output [8:0]Q;
  output [3:0]\gdiff.diff_pntr_pad_reg[8] ;
  output [3:0]\wr_data_count_i_reg[0] ;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [3:0]\wr_data_count_i_reg[9] ;
  output [0:0]\wr_data_count_i_reg[9]_0 ;
  output [0:0]\gdiff.diff_pntr_pad_reg[9] ;
  output [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  output [3:0]v1_reg;
  output [3:0]v1_reg_0;
  output [8:0]D;
  input [8:0]RD_PNTR_WR;
  input [2:0]O;
  input [0:0]\gic0.gc0.count_d2_reg[7]_0 ;
  input [3:0]\gic0.gc0.count_d2_reg[7]_1 ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input [0:0]E;
  input s_aclk;

  wire [8:0]D;
  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [2:0]O;
  wire [8:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [3:0]S;
  wire [3:0]\gdiff.diff_pntr_pad_reg[8] ;
  wire [0:0]\gdiff.diff_pntr_pad_reg[9] ;
  wire \gic0.gc0.count[8]_i_2_n_0 ;
  wire [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  wire [0:0]\gic0.gc0.count_d2_reg[7]_0 ;
  wire [3:0]\gic0.gc0.count_d2_reg[7]_1 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire [8:0]plusOp__0;
  wire s_aclk;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire \wr_data_count_i[9]_i_2_n_0 ;
  wire [3:0]\wr_data_count_i_reg[0] ;
  wire [3:0]\wr_data_count_i_reg[9] ;
  wire [0:0]\wr_data_count_i_reg[9]_0 ;
  wire [7:0]wr_pntr_plus2;

  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(wr_pntr_plus2[1]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[2]),
        .I3(wr_pntr_plus2[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(wr_pntr_plus2[2]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[3]),
        .I4(wr_pntr_plus2[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gic0.gc0.count[5]_i_1 
       (.I0(wr_pntr_plus2[3]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[0]),
        .I3(wr_pntr_plus2[2]),
        .I4(wr_pntr_plus2[4]),
        .I5(wr_pntr_plus2[5]),
        .O(plusOp__0[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[6]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[7]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .I2(wr_pntr_plus2[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[8]_i_1 
       (.I0(wr_pntr_plus2[6]),
        .I1(\gic0.gc0.count[8]_i_2_n_0 ),
        .I2(wr_pntr_plus2[7]),
        .I3(\gic0.gc0.count_d1_reg[8]_0 ),
        .O(plusOp__0[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gic0.gc0.count[8]_i_2 
       (.I0(wr_pntr_plus2[5]),
        .I1(wr_pntr_plus2[3]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[0]),
        .I4(wr_pntr_plus2[2]),
        .I5(wr_pntr_plus2[4]),
        .O(\gic0.gc0.count[8]_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[0]),
        .Q(Q[0]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[1]),
        .Q(Q[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[2]),
        .Q(Q[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[3]),
        .Q(Q[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[4]),
        .Q(Q[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[5]),
        .Q(Q[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[6]),
        .Q(Q[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[7]),
        .Q(Q[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[8]_0 ),
        .Q(Q[8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[4]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[5]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[6]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[7]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[8]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(wr_pntr_plus2[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(wr_pntr_plus2[1]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(wr_pntr_plus2[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(wr_pntr_plus2[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(wr_pntr_plus2[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(wr_pntr_plus2[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(wr_pntr_plus2[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(wr_pntr_plus2[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(\gic0.gc0.count_d1_reg[8]_0 ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .I2(Q[1]),
        .I3(RD_PNTR_WR[1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(wr_pntr_plus2[0]),
        .I1(RD_PNTR_WR[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(RD_PNTR_WR[1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .I2(Q[3]),
        .I3(RD_PNTR_WR[3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[2]),
        .I1(RD_PNTR_WR[2]),
        .I2(wr_pntr_plus2[3]),
        .I3(RD_PNTR_WR[3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(Q[4]),
        .I1(RD_PNTR_WR[4]),
        .I2(Q[5]),
        .I3(RD_PNTR_WR[5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[4]),
        .I1(RD_PNTR_WR[4]),
        .I2(wr_pntr_plus2[5]),
        .I3(RD_PNTR_WR[5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(Q[6]),
        .I1(RD_PNTR_WR[6]),
        .I2(Q[7]),
        .I3(RD_PNTR_WR[7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[6]),
        .I1(RD_PNTR_WR[6]),
        .I2(wr_pntr_plus2[7]),
        .I3(RD_PNTR_WR[7]),
        .O(v1_reg_0[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_1
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .I1(RD_PNTR_WR[7]),
        .O(\wr_data_count_i_reg[9] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_2
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .I1(RD_PNTR_WR[6]),
        .O(\wr_data_count_i_reg[9] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_3
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I1(RD_PNTR_WR[5]),
        .O(\wr_data_count_i_reg[9] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_4
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .I1(RD_PNTR_WR[4]),
        .O(\wr_data_count_i_reg[9] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__1_i_1
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .I1(RD_PNTR_WR[8]),
        .O(\wr_data_count_i_reg[9]_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I1(RD_PNTR_WR[3]),
        .O(\wr_data_count_i_reg[0] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I1(RD_PNTR_WR[2]),
        .O(\wr_data_count_i_reg[0] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I1(RD_PNTR_WR[1]),
        .O(\wr_data_count_i_reg[0] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I1(RD_PNTR_WR[0]),
        .O(\wr_data_count_i_reg[0] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_1
       (.I0(Q[7]),
        .I1(RD_PNTR_WR[7]),
        .O(\gdiff.diff_pntr_pad_reg[8] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_2
       (.I0(Q[6]),
        .I1(RD_PNTR_WR[6]),
        .O(\gdiff.diff_pntr_pad_reg[8] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_3
       (.I0(Q[5]),
        .I1(RD_PNTR_WR[5]),
        .O(\gdiff.diff_pntr_pad_reg[8] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_4
       (.I0(Q[4]),
        .I1(RD_PNTR_WR[4]),
        .O(\gdiff.diff_pntr_pad_reg[8] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__1_i_1
       (.I0(Q[8]),
        .I1(RD_PNTR_WR[8]),
        .O(\gdiff.diff_pntr_pad_reg[9] ));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_1
       (.I0(Q[3]),
        .I1(RD_PNTR_WR[3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_2
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_3
       (.I0(Q[1]),
        .I1(RD_PNTR_WR[1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_4
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .O(S[0]));
  LUT1 #(
    .INIT(2'h1)) 
    \wr_data_count_i[1]_i_1 
       (.I0(O[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_data_count_i[2]_i_1 
       (.I0(O[0]),
        .I1(O[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \wr_data_count_i[3]_i_1 
       (.I0(O[0]),
        .I1(O[1]),
        .I2(O[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \wr_data_count_i[4]_i_1 
       (.I0(O[1]),
        .I1(O[0]),
        .I2(O[2]),
        .I3(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \wr_data_count_i[5]_i_1 
       (.I0(O[2]),
        .I1(O[0]),
        .I2(O[1]),
        .I3(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I4(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \wr_data_count_i[6]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I1(O[1]),
        .I2(O[0]),
        .I3(O[2]),
        .I4(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .I5(\gic0.gc0.count_d2_reg[7]_1 [2]),
        .O(D[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_data_count_i[7]_i_1 
       (.I0(\wr_data_count_i[9]_i_2_n_0 ),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \wr_data_count_i[8]_i_1 
       (.I0(\wr_data_count_i[9]_i_2_n_0 ),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .I2(\gic0.gc0.count_d2_reg[7]_0 ),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \wr_data_count_i[9]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[7]_0 ),
        .I1(\wr_data_count_i[9]_i_2_n_0 ),
        .I2(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \wr_data_count_i[9]_i_2 
       (.I0(\gic0.gc0.count_d2_reg[7]_1 [2]),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I2(O[1]),
        .I3(O[0]),
        .I4(O[2]),
        .I5(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .O(\wr_data_count_i[9]_i_2_n_0 ));
endmodule

(* ORIG_REF_NAME = "wr_dc_fwft_ext_as" *) 
module gpif2mst_async_32x512_wr_dc_fwft_ext_as
   (O,
    \wr_data_count_i_reg[9]_0 ,
    \wr_data_count_i_reg[9]_1 ,
    axis_wr_data_count,
    \gic0.gc0.count_d2_reg[7] ,
    S,
    \gic0.gc0.count_d2_reg[7]_0 ,
    \gic0.gc0.count_d2_reg[8] ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    D,
    s_aclk);
  output [2:0]O;
  output [3:0]\wr_data_count_i_reg[9]_0 ;
  output [0:0]\wr_data_count_i_reg[9]_1 ;
  output [9:0]axis_wr_data_count;
  input [7:0]\gic0.gc0.count_d2_reg[7] ;
  input [3:0]S;
  input [3:0]\gic0.gc0.count_d2_reg[7]_0 ;
  input [0:0]\gic0.gc0.count_d2_reg[8] ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input [8:0]D;
  input s_aclk;

  wire [8:0]D;
  wire [2:0]O;
  wire [3:0]S;
  wire [9:0]axis_wr_data_count;
  wire [7:0]\gic0.gc0.count_d2_reg[7] ;
  wire [3:0]\gic0.gc0.count_d2_reg[7]_0 ;
  wire [0:0]\gic0.gc0.count_d2_reg[8] ;
  wire minusOp_carry__0_n_0;
  wire minusOp_carry__0_n_1;
  wire minusOp_carry__0_n_2;
  wire minusOp_carry__0_n_3;
  wire minusOp_carry_n_0;
  wire minusOp_carry_n_1;
  wire minusOp_carry_n_2;
  wire minusOp_carry_n_3;
  wire minusOp_carry_n_7;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire s_aclk;
  wire [3:0]\wr_data_count_i_reg[9]_0 ;
  wire [0:0]\wr_data_count_i_reg[9]_1 ;
  wire [3:0]NLW_minusOp_carry__1_CO_UNCONNECTED;
  wire [3:1]NLW_minusOp_carry__1_O_UNCONNECTED;

  CARRY4 minusOp_carry
       (.CI(1'b0),
        .CO({minusOp_carry_n_0,minusOp_carry_n_1,minusOp_carry_n_2,minusOp_carry_n_3}),
        .CYINIT(1'b1),
        .DI(\gic0.gc0.count_d2_reg[7] [3:0]),
        .O({O,minusOp_carry_n_7}),
        .S(S));
  CARRY4 minusOp_carry__0
       (.CI(minusOp_carry_n_0),
        .CO({minusOp_carry__0_n_0,minusOp_carry__0_n_1,minusOp_carry__0_n_2,minusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(\gic0.gc0.count_d2_reg[7] [7:4]),
        .O(\wr_data_count_i_reg[9]_0 ),
        .S(\gic0.gc0.count_d2_reg[7]_0 ));
  CARRY4 minusOp_carry__1
       (.CI(minusOp_carry__0_n_0),
        .CO(NLW_minusOp_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_minusOp_carry__1_O_UNCONNECTED[3:1],\wr_data_count_i_reg[9]_1 }),
        .S({1'b0,1'b0,1'b0,\gic0.gc0.count_d2_reg[8] }));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(minusOp_carry_n_7),
        .Q(axis_wr_data_count[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(axis_wr_data_count[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(axis_wr_data_count[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(axis_wr_data_count[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(axis_wr_data_count[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(axis_wr_data_count[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(axis_wr_data_count[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(axis_wr_data_count[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(axis_wr_data_count[8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[9] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(axis_wr_data_count[9]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module gpif2mst_async_32x512_wr_logic
   (out,
    WEBWE,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \gic0.gc0.count_d1_reg[8] ,
    s_axis_tready,
    axis_prog_full,
    axis_wr_data_count,
    \dest_out_bin_ff_reg[8] ,
    \dest_out_bin_ff_reg[8]_0 ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    s_aclk,
    RD_PNTR_WR,
    s_axis_tvalid,
    \grstd1.grst_full.grst_f.rst_d3_reg );
  output out;
  output [0:0]WEBWE;
  output [0:0]Q;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [0:0]\gic0.gc0.count_d1_reg[8] ;
  output s_axis_tready;
  output axis_prog_full;
  output [9:0]axis_wr_data_count;
  input \dest_out_bin_ff_reg[8] ;
  input \dest_out_bin_ff_reg[8]_0 ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input s_aclk;
  input [8:0]RD_PNTR_WR;
  input s_axis_tvalid;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;

  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [0:0]WEBWE;
  wire axis_prog_full;
  wire [9:0]axis_wr_data_count;
  wire [3:0]\c1/v1_reg ;
  wire [3:0]\c2/v1_reg ;
  wire \dest_out_bin_ff_reg[8] ;
  wire \dest_out_bin_ff_reg[8]_0 ;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire \gwas.gwdc1.wdcext_n_0 ;
  wire \gwas.gwdc1.wdcext_n_1 ;
  wire \gwas.gwdc1.wdcext_n_2 ;
  wire \gwas.gwdc1.wdcext_n_3 ;
  wire \gwas.gwdc1.wdcext_n_4 ;
  wire \gwas.gwdc1.wdcext_n_5 ;
  wire \gwas.gwdc1.wdcext_n_6 ;
  wire \gwas.gwdc1.wdcext_n_7 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire out;
  wire [7:0]p_14_out;
  wire s_aclk;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire wpntr_n_0;
  wire wpntr_n_1;
  wire wpntr_n_13;
  wire wpntr_n_14;
  wire wpntr_n_15;
  wire wpntr_n_16;
  wire wpntr_n_17;
  wire wpntr_n_18;
  wire wpntr_n_19;
  wire wpntr_n_2;
  wire wpntr_n_20;
  wire wpntr_n_3;
  wire wpntr_n_30;
  wire wpntr_n_31;
  wire wpntr_n_32;
  wire wpntr_n_33;
  wire wpntr_n_34;
  wire wpntr_n_35;
  wire wpntr_n_45;
  wire wpntr_n_46;
  wire wpntr_n_47;
  wire wpntr_n_48;
  wire wpntr_n_49;
  wire wpntr_n_50;
  wire wpntr_n_51;
  wire wpntr_n_52;
  wire wpntr_n_53;

  gpif2mst_async_32x512_wr_pf_as \gwas.gpf.wrpf 
       (.E(WEBWE),
        .Q(p_14_out),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .axis_prog_full(axis_prog_full),
        .\gic0.gc0.count_d1_reg[7] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\gic0.gc0.count_d1_reg[8] (wpntr_n_35),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .out(out),
        .s_aclk(s_aclk));
  gpif2mst_async_32x512_wr_dc_fwft_ext_as \gwas.gwdc1.wdcext 
       (.D({wpntr_n_45,wpntr_n_46,wpntr_n_47,wpntr_n_48,wpntr_n_49,wpntr_n_50,wpntr_n_51,wpntr_n_52,wpntr_n_53}),
        .O({\gwas.gwdc1.wdcext_n_0 ,\gwas.gwdc1.wdcext_n_1 ,\gwas.gwdc1.wdcext_n_2 }),
        .S({wpntr_n_17,wpntr_n_18,wpntr_n_19,wpntr_n_20}),
        .axis_wr_data_count(axis_wr_data_count),
        .\gic0.gc0.count_d2_reg[7] (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7:0]),
        .\gic0.gc0.count_d2_reg[7]_0 ({wpntr_n_30,wpntr_n_31,wpntr_n_32,wpntr_n_33}),
        .\gic0.gc0.count_d2_reg[8] (wpntr_n_34),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .s_aclk(s_aclk),
        .\wr_data_count_i_reg[9]_0 ({\gwas.gwdc1.wdcext_n_3 ,\gwas.gwdc1.wdcext_n_4 ,\gwas.gwdc1.wdcext_n_5 ,\gwas.gwdc1.wdcext_n_6 }),
        .\wr_data_count_i_reg[9]_1 (\gwas.gwdc1.wdcext_n_7 ));
  gpif2mst_async_32x512_wr_status_flags_as \gwas.wsts 
       (.E(WEBWE),
        .\dest_out_bin_ff_reg[8] (\dest_out_bin_ff_reg[8] ),
        .\dest_out_bin_ff_reg[8]_0 (\dest_out_bin_ff_reg[8]_0 ),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ));
  gpif2mst_async_32x512_wr_bin_cntr wpntr
       (.D({wpntr_n_45,wpntr_n_46,wpntr_n_47,wpntr_n_48,wpntr_n_49,wpntr_n_50,wpntr_n_51,wpntr_n_52,wpntr_n_53}),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(WEBWE),
        .O({\gwas.gwdc1.wdcext_n_0 ,\gwas.gwdc1.wdcext_n_1 ,\gwas.gwdc1.wdcext_n_2 }),
        .Q({Q,p_14_out}),
        .RD_PNTR_WR(RD_PNTR_WR),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .\gdiff.diff_pntr_pad_reg[8] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\gdiff.diff_pntr_pad_reg[9] (wpntr_n_35),
        .\gic0.gc0.count_d1_reg[8]_0 (\gic0.gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[7]_0 (\gwas.gwdc1.wdcext_n_7 ),
        .\gic0.gc0.count_d2_reg[7]_1 ({\gwas.gwdc1.wdcext_n_3 ,\gwas.gwdc1.wdcext_n_4 ,\gwas.gwdc1.wdcext_n_5 ,\gwas.gwdc1.wdcext_n_6 }),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .s_aclk(s_aclk),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ),
        .\wr_data_count_i_reg[0] ({wpntr_n_17,wpntr_n_18,wpntr_n_19,wpntr_n_20}),
        .\wr_data_count_i_reg[9] ({wpntr_n_30,wpntr_n_31,wpntr_n_32,wpntr_n_33}),
        .\wr_data_count_i_reg[9]_0 (wpntr_n_34));
endmodule

(* ORIG_REF_NAME = "wr_pf_as" *) 
module gpif2mst_async_32x512_wr_pf_as
   (axis_prog_full,
    E,
    Q,
    S,
    \gic0.gc0.count_d1_reg[7] ,
    \gic0.gc0.count_d1_reg[8] ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    s_aclk,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    out);
  output axis_prog_full;
  input [0:0]E;
  input [7:0]Q;
  input [3:0]S;
  input [3:0]\gic0.gc0.count_d1_reg[7] ;
  input [0:0]\gic0.gc0.count_d1_reg[8] ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input s_aclk;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input out;

  wire [0:0]E;
  wire [7:0]Q;
  wire [3:0]S;
  wire axis_prog_full;
  wire \gdiff.diff_pntr_pad_reg_n_0_[2] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[3] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[4] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[5] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[6] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[7] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[8] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[9] ;
  wire [3:0]\gic0.gc0.count_d1_reg[7] ;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire \gpf1.prog_full_i_i_1_n_0 ;
  wire \gpf1.prog_full_i_i_2_n_0 ;
  wire \gpf1.prog_full_i_i_3_n_0 ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire out;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__0_n_4;
  wire plusOp_carry__0_n_5;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry__1_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_4;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire s_aclk;
  wire [0:0]NLW_plusOp_carry_O_UNCONNECTED;
  wire [3:0]NLW_plusOp_carry__1_CO_UNCONNECTED;
  wire [3:1]NLW_plusOp_carry__1_O_UNCONNECTED;

  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry_n_6),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[2] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry_n_5),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[3] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry_n_4),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[4] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__0_n_7),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[5] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__0_n_6),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[6] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__0_n_5),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[7] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__0_n_4),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[8] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[9] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__1_n_7),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[9] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT5 #(
    .INIT(32'h0F040004)) 
    \gpf1.prog_full_i_i_1 
       (.I0(\gpf1.prog_full_i_i_2_n_0 ),
        .I1(\gpf1.prog_full_i_i_3_n_0 ),
        .I2(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .I3(out),
        .I4(axis_prog_full),
        .O(\gpf1.prog_full_i_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \gpf1.prog_full_i_i_2 
       (.I0(\gdiff.diff_pntr_pad_reg_n_0_[5] ),
        .I1(\gdiff.diff_pntr_pad_reg_n_0_[4] ),
        .I2(\gdiff.diff_pntr_pad_reg_n_0_[7] ),
        .I3(\gdiff.diff_pntr_pad_reg_n_0_[6] ),
        .O(\gpf1.prog_full_i_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hE000)) 
    \gpf1.prog_full_i_i_3 
       (.I0(\gdiff.diff_pntr_pad_reg_n_0_[2] ),
        .I1(\gdiff.diff_pntr_pad_reg_n_0_[3] ),
        .I2(\gdiff.diff_pntr_pad_reg_n_0_[8] ),
        .I3(\gdiff.diff_pntr_pad_reg_n_0_[9] ),
        .O(\gpf1.prog_full_i_i_3_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \gpf1.prog_full_i_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\gpf1.prog_full_i_i_1_n_0 ),
        .Q(axis_prog_full),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(E),
        .DI(Q[3:0]),
        .O({plusOp_carry_n_4,plusOp_carry_n_5,plusOp_carry_n_6,NLW_plusOp_carry_O_UNCONNECTED[0]}),
        .S(S));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(Q[7:4]),
        .O({plusOp_carry__0_n_4,plusOp_carry__0_n_5,plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .S(\gic0.gc0.count_d1_reg[7] ));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO(NLW_plusOp_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__1_O_UNCONNECTED[3:1],plusOp_carry__1_n_7}),
        .S({1'b0,1'b0,1'b0,\gic0.gc0.count_d1_reg[8] }));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module gpif2mst_async_32x512_wr_status_flags_as
   (out,
    E,
    s_axis_tready,
    v1_reg,
    \dest_out_bin_ff_reg[8] ,
    v1_reg_0,
    \dest_out_bin_ff_reg[8]_0 ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    s_aclk,
    s_axis_tvalid,
    \grstd1.grst_full.grst_f.rst_d3_reg );
  output out;
  output [0:0]E;
  output s_axis_tready;
  input [3:0]v1_reg;
  input \dest_out_bin_ff_reg[8] ;
  input [3:0]v1_reg_0;
  input \dest_out_bin_ff_reg[8]_0 ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input s_aclk;
  input s_axis_tvalid;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;

  wire [0:0]E;
  wire c2_n_0;
  wire comp1;
  wire \dest_out_bin_ff_reg[8] ;
  wire \dest_out_bin_ff_reg[8]_0 ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire s_aclk;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(s_axis_tvalid),
        .I1(ram_full_fb_i),
        .O(E));
  gpif2mst_async_32x512_compare c1
       (.comp1(comp1),
        .\dest_out_bin_ff_reg[8] (\dest_out_bin_ff_reg[8] ),
        .v1_reg(v1_reg));
  gpif2mst_async_32x512_compare_0 c2
       (.comp1(comp1),
        .\dest_out_bin_ff_reg[8] (\dest_out_bin_ff_reg[8]_0 ),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .out(ram_full_fb_i),
        .ram_full_fb_i_reg(c2_n_0),
        .s_axis_tvalid(s_axis_tvalid),
        .v1_reg_0(v1_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_full_fb_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_full_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT1 #(
    .INIT(2'h1)) 
    s_axis_tready_INST_0
       (.I0(ram_full_i),
        .O(s_axis_tready));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module gpif2mst_async_34x512_blk_mem_gen_generic_cstr
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    s_axis_tuser,
    WEBWE,
    out,
    s_axis_tvalid);
  output [33:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [33:0]D;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;

  gpif2mst_async_34x512_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.D(D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module gpif2mst_async_34x512_blk_mem_gen_prim_width
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    s_axis_tuser,
    WEBWE,
    out,
    s_axis_tvalid);
  output [33:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [33:0]D;
  wire ENA_dly_D;
  wire ENB_I;
  wire ENB_dly;
  wire ENB_dly_D;
  wire POR_B;
  wire [8:0]Q;
  wire [4:0]RSTA_SHFT_REG;
  wire [4:0]RSTB_SHFT_REG;
  wire \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ;
  wire \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ;
  wire \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire p_1_out;
  wire p_3_out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;

  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_D_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ),
        .Q(ENA_dly_D),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop " *) 
  (* srl_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2 
       (.A0(1'b1),
        .A1(1'b0),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(s_aclk),
        .D(p_3_out),
        .Q(\SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.ENA_NO_REG.ENA_dly_reg_srl2_i_1 
       (.I0(RSTA_SHFT_REG[4]),
        .I1(RSTA_SHFT_REG[0]),
        .O(p_3_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_D_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(ENB_dly),
        .Q(ENB_dly_D),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.ENB_NO_REG.ENB_dly_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(POR_B),
        .Q(ENB_dly),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    \SAFETY_CKT_GEN.POR_B_i_1 
       (.I0(RSTB_SHFT_REG[4]),
        .I1(RSTB_SHFT_REG[0]),
        .O(p_1_out));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.POR_B_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(p_1_out),
        .Q(POR_B),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTA_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg " *) 
  (* srl_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(s_aclk),
        .D(RSTA_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTA_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTA_SHFT_REG[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(RSTB_SHFT_REG[0]),
        .R(1'b0));
  (* srl_bus_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg " *) 
  (* srl_name = "U0/\inst_fifo_gen/gaxis_fifo.gaxisf.axisf/grf.rf/gntv_or_sync_fifo.mem/gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3 
       (.A0(1'b0),
        .A1(1'b1),
        .A2(1'b0),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(m_aclk),
        .D(RSTB_SHFT_REG[0]),
        .Q(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\SAFETY_CKT_GEN.RSTB_SHFT_REG_reg[3]_srl3_n_0 ),
        .Q(RSTB_SHFT_REG[4]),
        .R(1'b0));
  gpif2mst_async_34x512_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.D(D),
        .ENA_dly_D(ENA_dly_D),
        .ENB_I(ENB_I),
        .POR_B(POR_B),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module gpif2mst_async_34x512_blk_mem_gen_prim_wrapper
   (D,
    m_aclk,
    s_aclk,
    ENB_I,
    POR_B,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    s_axis_tuser,
    WEBWE,
    ENA_dly_D,
    out,
    s_axis_tvalid);
  output [33:0]D;
  input m_aclk;
  input s_aclk;
  input ENB_I;
  input POR_B;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input [0:0]WEBWE;
  input ENA_dly_D;
  input out;
  input s_axis_tvalid;

  wire [33:0]D;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire ENA_I;
  wire ENA_dly_D;
  wire ENB_I;
  wire POR_B;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;

  (* BOX_TYPE = "PRIMITIVE" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({\gic0.gc0.count_d2_reg[8] ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(m_aclk),
        .CLKBWRCLK(s_aclk),
        .DIADI({s_axis_tdata[14:7],s_axis_tdata[5:0],s_axis_tuser}),
        .DIBDI({s_axis_tdata[31:24],s_axis_tdata[22:15]}),
        .DIPADIP({1'b0,s_axis_tdata[6]}),
        .DIPBDIP({1'b0,s_axis_tdata[23]}),
        .DOADO({D[16:9],D[7:0]}),
        .DOBDO({D[33:26],D[24:17]}),
        .DOPADOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,D[8]}),
        .DOPBDOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,D[25]}),
        .ENARDEN(ENB_I),
        .ENBWREN(ENA_I),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(POR_B),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({WEBWE,WEBWE,WEBWE,WEBWE}));
  LUT3 #(
    .INIT(8'hBA)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(ENA_dly_D),
        .I1(out),
        .I2(s_axis_tvalid),
        .O(ENA_I));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module gpif2mst_async_34x512_blk_mem_gen_top
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    s_axis_tuser,
    WEBWE,
    out,
    s_axis_tvalid);
  output [33:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [33:0]D;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;

  gpif2mst_async_34x512_blk_mem_gen_generic_cstr \valid.cstr 
       (.D(D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1" *) 
module gpif2mst_async_34x512_blk_mem_gen_v8_4_1
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    s_axis_tuser,
    WEBWE,
    out,
    s_axis_tvalid);
  output [33:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [33:0]D;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;

  gpif2mst_async_34x512_blk_mem_gen_v8_4_1_synth inst_blk_mem_gen
       (.D(D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_1_synth" *) 
module gpif2mst_async_34x512_blk_mem_gen_v8_4_1_synth
   (D,
    ENB_dly_D,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    s_axis_tuser,
    WEBWE,
    out,
    s_axis_tvalid);
  output [33:0]D;
  output ENB_dly_D;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;

  wire [33:0]D;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;

  gpif2mst_async_34x512_blk_mem_gen_top \gnbram.gnativebmg.native_blk_mem_gen 
       (.D(D),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module gpif2mst_async_34x512_clk_x_pntrs
   (ram_full_fb_i_reg,
    RD_PNTR_WR,
    ram_full_fb_i_reg_0,
    WR_PNTR_RD,
    v1_reg,
    v1_reg_0,
    \g_rd.gvalid_low.rd_dc_i_reg[1] ,
    \g_rd.gvalid_low.rd_dc_i_reg[2] ,
    \g_rd.gvalid_low.rd_dc_i_reg[9] ,
    \g_rd.gvalid_low.rd_dc_i_reg[8] ,
    \g_rd.gvalid_low.rd_dc_i_reg[7] ,
    \g_rd.gvalid_low.rd_dc_i_reg[6] ,
    \g_rd.gvalid_low.rd_dc_i_reg[5] ,
    \g_rd.gvalid_low.rd_dc_i_reg[4] ,
    \g_rd.gvalid_low.rd_dc_i_reg[3] ,
    O,
    \gdiff.diff_pntr_pad_reg[9] ,
    Q,
    D,
    \gc0.count_d1_reg[8] ,
    \gc0.count_reg[7] ,
    p_0_out,
    s_aclk,
    \gic0.gc0.count_d2_reg[8] ,
    m_aclk);
  output ram_full_fb_i_reg;
  output [8:0]RD_PNTR_WR;
  output ram_full_fb_i_reg_0;
  output [0:0]WR_PNTR_RD;
  output [3:0]v1_reg;
  output [3:0]v1_reg_0;
  output \g_rd.gvalid_low.rd_dc_i_reg[1] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[2] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[9] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[8] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[7] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[6] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[4] ;
  output \g_rd.gvalid_low.rd_dc_i_reg[3] ;
  output [0:0]O;
  output [8:0]\gdiff.diff_pntr_pad_reg[9] ;
  input [0:0]Q;
  input [0:0]D;
  input [8:0]\gc0.count_d1_reg[8] ;
  input [7:0]\gc0.count_reg[7] ;
  input p_0_out;
  input s_aclk;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input m_aclk;

  wire [0:0]D;
  wire [0:0]O;
  wire [0:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [0:0]WR_PNTR_RD;
  wire [8:1]diff_wr_rd__0;
  wire \g_rd.gvalid_low.rd_dc_i[6]_i_3_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[6]_i_4_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[6]_i_5_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[6]_i_6_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_10_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_6_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_7_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_8_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i[9]_i_9_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[1] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[2] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[3] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[4] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[5] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_1 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_2 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_3 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[7] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[8] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9] ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_0 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_1 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_2 ;
  wire \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_3 ;
  wire [8:0]\gc0.count_d1_reg[8] ;
  wire [7:0]\gc0.count_reg[7] ;
  wire \gdiff.diff_pntr_pad[4]_i_3_n_0 ;
  wire \gdiff.diff_pntr_pad[4]_i_4_n_0 ;
  wire \gdiff.diff_pntr_pad[4]_i_5_n_0 ;
  wire \gdiff.diff_pntr_pad[4]_i_6_n_0 ;
  wire \gdiff.diff_pntr_pad[8]_i_2_n_0 ;
  wire \gdiff.diff_pntr_pad[8]_i_3_n_0 ;
  wire \gdiff.diff_pntr_pad[8]_i_4_n_0 ;
  wire \gdiff.diff_pntr_pad[8]_i_5_n_0 ;
  wire \gdiff.diff_pntr_pad[9]_i_2_n_0 ;
  wire \gdiff.diff_pntr_pad_reg[4]_i_1_n_0 ;
  wire \gdiff.diff_pntr_pad_reg[4]_i_1_n_1 ;
  wire \gdiff.diff_pntr_pad_reg[4]_i_1_n_2 ;
  wire \gdiff.diff_pntr_pad_reg[4]_i_1_n_3 ;
  wire \gdiff.diff_pntr_pad_reg[8]_i_1_n_0 ;
  wire \gdiff.diff_pntr_pad_reg[8]_i_1_n_1 ;
  wire \gdiff.diff_pntr_pad_reg[8]_i_1_n_2 ;
  wire \gdiff.diff_pntr_pad_reg[8]_i_1_n_3 ;
  wire [8:0]\gdiff.diff_pntr_pad_reg[9] ;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire p_0_out;
  wire [7:0]p_24_out;
  wire ram_full_fb_i_reg;
  wire ram_full_fb_i_reg_0;
  wire s_aclk;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire [3:0]\NLW_g_rd.gvalid_low.rd_dc_i_reg[9]_i_3_CO_UNCONNECTED ;
  wire [3:1]\NLW_g_rd.gvalid_low.rd_dc_i_reg[9]_i_3_O_UNCONNECTED ;
  wire [3:0]\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_O_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \g_rd.gvalid_low.rd_dc_i[1]_i_1 
       (.I0(diff_wr_rd__0[1]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \g_rd.gvalid_low.rd_dc_i[2]_i_1 
       (.I0(diff_wr_rd__0[1]),
        .I1(diff_wr_rd__0[2]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \g_rd.gvalid_low.rd_dc_i[3]_i_1 
       (.I0(diff_wr_rd__0[1]),
        .I1(diff_wr_rd__0[2]),
        .I2(diff_wr_rd__0[3]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \g_rd.gvalid_low.rd_dc_i[4]_i_1 
       (.I0(diff_wr_rd__0[2]),
        .I1(diff_wr_rd__0[1]),
        .I2(diff_wr_rd__0[3]),
        .I3(diff_wr_rd__0[4]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[4] ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \g_rd.gvalid_low.rd_dc_i[5]_i_1 
       (.I0(diff_wr_rd__0[3]),
        .I1(diff_wr_rd__0[1]),
        .I2(diff_wr_rd__0[2]),
        .I3(diff_wr_rd__0[4]),
        .I4(diff_wr_rd__0[5]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[5] ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_1 
       (.I0(diff_wr_rd__0[4]),
        .I1(diff_wr_rd__0[2]),
        .I2(diff_wr_rd__0[1]),
        .I3(diff_wr_rd__0[3]),
        .I4(diff_wr_rd__0[5]),
        .I5(diff_wr_rd__0[6]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[6] ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_3 
       (.I0(p_24_out[3]),
        .I1(\gc0.count_d1_reg[8] [3]),
        .O(\g_rd.gvalid_low.rd_dc_i[6]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_4 
       (.I0(p_24_out[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .O(\g_rd.gvalid_low.rd_dc_i[6]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_5 
       (.I0(p_24_out[1]),
        .I1(\gc0.count_d1_reg[8] [1]),
        .O(\g_rd.gvalid_low.rd_dc_i[6]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[6]_i_6 
       (.I0(p_24_out[0]),
        .I1(\gc0.count_d1_reg[8] [0]),
        .O(\g_rd.gvalid_low.rd_dc_i[6]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \g_rd.gvalid_low.rd_dc_i[7]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ),
        .I1(diff_wr_rd__0[7]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[7] ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \g_rd.gvalid_low.rd_dc_i[8]_i_1 
       (.I0(\g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ),
        .I1(diff_wr_rd__0[7]),
        .I2(diff_wr_rd__0[8]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[8] ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_10 
       (.I0(p_24_out[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_2 
       (.I0(diff_wr_rd__0[8]),
        .I1(\g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ),
        .I2(diff_wr_rd__0[7]),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[9] ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_4 
       (.I0(diff_wr_rd__0[6]),
        .I1(diff_wr_rd__0[4]),
        .I2(diff_wr_rd__0[2]),
        .I3(diff_wr_rd__0[1]),
        .I4(diff_wr_rd__0[3]),
        .I5(diff_wr_rd__0[5]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_6 
       (.I0(WR_PNTR_RD),
        .I1(\gc0.count_d1_reg[8] [8]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_7 
       (.I0(p_24_out[7]),
        .I1(\gc0.count_d1_reg[8] [7]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_8 
       (.I0(p_24_out[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_9 
       (.I0(p_24_out[5]),
        .I1(\gc0.count_d1_reg[8] [5]),
        .O(\g_rd.gvalid_low.rd_dc_i[9]_i_9_n_0 ));
  CARRY4 \g_rd.gvalid_low.rd_dc_i_reg[6]_i_2 
       (.CI(1'b0),
        .CO({\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_0 ,\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_1 ,\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_2 ,\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_3 }),
        .CYINIT(1'b1),
        .DI(p_24_out[3:0]),
        .O({diff_wr_rd__0[3:1],O}),
        .S({\g_rd.gvalid_low.rd_dc_i[6]_i_3_n_0 ,\g_rd.gvalid_low.rd_dc_i[6]_i_4_n_0 ,\g_rd.gvalid_low.rd_dc_i[6]_i_5_n_0 ,\g_rd.gvalid_low.rd_dc_i[6]_i_6_n_0 }));
  CARRY4 \g_rd.gvalid_low.rd_dc_i_reg[9]_i_3 
       (.CI(\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_0 ),
        .CO(\NLW_g_rd.gvalid_low.rd_dc_i_reg[9]_i_3_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_g_rd.gvalid_low.rd_dc_i_reg[9]_i_3_O_UNCONNECTED [3:1],diff_wr_rd__0[8]}),
        .S({1'b0,1'b0,1'b0,\g_rd.gvalid_low.rd_dc_i[9]_i_6_n_0 }));
  CARRY4 \g_rd.gvalid_low.rd_dc_i_reg[9]_i_5 
       (.CI(\g_rd.gvalid_low.rd_dc_i_reg[6]_i_2_n_0 ),
        .CO({\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_0 ,\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_1 ,\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_2 ,\g_rd.gvalid_low.rd_dc_i_reg[9]_i_5_n_3 }),
        .CYINIT(1'b0),
        .DI(p_24_out[7:4]),
        .O(diff_wr_rd__0[7:4]),
        .S({\g_rd.gvalid_low.rd_dc_i[9]_i_7_n_0 ,\g_rd.gvalid_low.rd_dc_i[9]_i_8_n_0 ,\g_rd.gvalid_low.rd_dc_i[9]_i_9_n_0 ,\g_rd.gvalid_low.rd_dc_i[9]_i_10_n_0 }));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[4]_i_3 
       (.I0(p_24_out[3]),
        .I1(\gc0.count_d1_reg[8] [3]),
        .O(\gdiff.diff_pntr_pad[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[4]_i_4 
       (.I0(p_24_out[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .O(\gdiff.diff_pntr_pad[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[4]_i_5 
       (.I0(p_24_out[1]),
        .I1(\gc0.count_d1_reg[8] [1]),
        .O(\gdiff.diff_pntr_pad[4]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[4]_i_6 
       (.I0(p_24_out[0]),
        .I1(\gc0.count_d1_reg[8] [0]),
        .O(\gdiff.diff_pntr_pad[4]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[8]_i_2 
       (.I0(p_24_out[7]),
        .I1(\gc0.count_d1_reg[8] [7]),
        .O(\gdiff.diff_pntr_pad[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[8]_i_3 
       (.I0(p_24_out[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .O(\gdiff.diff_pntr_pad[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[8]_i_4 
       (.I0(p_24_out[5]),
        .I1(\gc0.count_d1_reg[8] [5]),
        .O(\gdiff.diff_pntr_pad[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[8]_i_5 
       (.I0(p_24_out[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .O(\gdiff.diff_pntr_pad[8]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \gdiff.diff_pntr_pad[9]_i_2 
       (.I0(WR_PNTR_RD),
        .I1(\gc0.count_d1_reg[8] [8]),
        .O(\gdiff.diff_pntr_pad[9]_i_2_n_0 ));
  CARRY4 \gdiff.diff_pntr_pad_reg[4]_i_1 
       (.CI(1'b0),
        .CO({\gdiff.diff_pntr_pad_reg[4]_i_1_n_0 ,\gdiff.diff_pntr_pad_reg[4]_i_1_n_1 ,\gdiff.diff_pntr_pad_reg[4]_i_1_n_2 ,\gdiff.diff_pntr_pad_reg[4]_i_1_n_3 }),
        .CYINIT(p_0_out),
        .DI(p_24_out[3:0]),
        .O(\gdiff.diff_pntr_pad_reg[9] [3:0]),
        .S({\gdiff.diff_pntr_pad[4]_i_3_n_0 ,\gdiff.diff_pntr_pad[4]_i_4_n_0 ,\gdiff.diff_pntr_pad[4]_i_5_n_0 ,\gdiff.diff_pntr_pad[4]_i_6_n_0 }));
  CARRY4 \gdiff.diff_pntr_pad_reg[8]_i_1 
       (.CI(\gdiff.diff_pntr_pad_reg[4]_i_1_n_0 ),
        .CO({\gdiff.diff_pntr_pad_reg[8]_i_1_n_0 ,\gdiff.diff_pntr_pad_reg[8]_i_1_n_1 ,\gdiff.diff_pntr_pad_reg[8]_i_1_n_2 ,\gdiff.diff_pntr_pad_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI(p_24_out[7:4]),
        .O(\gdiff.diff_pntr_pad_reg[9] [7:4]),
        .S({\gdiff.diff_pntr_pad[8]_i_2_n_0 ,\gdiff.diff_pntr_pad[8]_i_3_n_0 ,\gdiff.diff_pntr_pad[8]_i_4_n_0 ,\gdiff.diff_pntr_pad[8]_i_5_n_0 }));
  CARRY4 \gdiff.diff_pntr_pad_reg[9]_i_1 
       (.CI(\gdiff.diff_pntr_pad_reg[8]_i_1_n_0 ),
        .CO(\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_gdiff.diff_pntr_pad_reg[9]_i_1_O_UNCONNECTED [3:1],\gdiff.diff_pntr_pad_reg[9] [8]}),
        .S({1'b0,1'b0,1'b0,\gdiff.diff_pntr_pad[9]_i_2_n_0 }));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__1 
       (.I0(p_24_out[0]),
        .I1(\gc0.count_d1_reg[8] [0]),
        .I2(p_24_out[1]),
        .I3(\gc0.count_d1_reg[8] [1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__2 
       (.I0(p_24_out[0]),
        .I1(\gc0.count_reg[7] [0]),
        .I2(p_24_out[1]),
        .I3(\gc0.count_reg[7] [1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__1 
       (.I0(p_24_out[2]),
        .I1(\gc0.count_d1_reg[8] [2]),
        .I2(p_24_out[3]),
        .I3(\gc0.count_d1_reg[8] [3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__2 
       (.I0(p_24_out[2]),
        .I1(\gc0.count_reg[7] [2]),
        .I2(p_24_out[3]),
        .I3(\gc0.count_reg[7] [3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__1 
       (.I0(p_24_out[4]),
        .I1(\gc0.count_d1_reg[8] [4]),
        .I2(p_24_out[5]),
        .I3(\gc0.count_d1_reg[8] [5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__2 
       (.I0(p_24_out[4]),
        .I1(\gc0.count_reg[7] [4]),
        .I2(p_24_out[5]),
        .I3(\gc0.count_reg[7] [5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__1 
       (.I0(p_24_out[6]),
        .I1(\gc0.count_d1_reg[8] [6]),
        .I2(p_24_out[7]),
        .I3(\gc0.count_d1_reg[8] [7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__2 
       (.I0(p_24_out[6]),
        .I1(\gc0.count_reg[7] [6]),
        .I2(p_24_out[7]),
        .I3(\gc0.count_reg[7] [7]),
        .O(v1_reg_0[3]));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1 
       (.I0(RD_PNTR_WR[8]),
        .I1(Q),
        .O(ram_full_fb_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__0 
       (.I0(RD_PNTR_WR[8]),
        .I1(D),
        .O(ram_full_fb_i_reg_0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "9" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_34x512_xpm_cdc_gray rd_pntr_cdc_inst
       (.dest_clk(s_aclk),
        .dest_out_bin(RD_PNTR_WR),
        .src_clk(m_aclk),
        .src_in_bin(\gc0.count_d1_reg[8] ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "9" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_34x512_xpm_cdc_gray__1 wr_pntr_cdc_inst
       (.dest_clk(m_aclk),
        .dest_out_bin({WR_PNTR_RD,p_24_out}),
        .src_clk(s_aclk),
        .src_in_bin(\gic0.gc0.count_d2_reg[8] ));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module gpif2mst_async_34x512_compare
   (comp1,
    v1_reg,
    \dest_out_bin_ff_reg[8] );
  output comp1;
  input [3:0]v1_reg;
  input \dest_out_bin_ff_reg[8] ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp1;
  wire \dest_out_bin_ff_reg[8] ;
  wire [3:0]v1_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\dest_out_bin_ff_reg[8] }));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module gpif2mst_async_34x512_compare_0
   (ram_full_fb_i_reg,
    v1_reg_0,
    \dest_out_bin_ff_reg[8] ,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    out,
    s_axis_tvalid,
    comp1);
  output ram_full_fb_i_reg;
  input [3:0]v1_reg_0;
  input \dest_out_bin_ff_reg[8] ;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input out;
  input s_axis_tvalid;
  input comp1;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp1;
  wire comp2;
  wire \dest_out_bin_ff_reg[8] ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire out;
  wire ram_full_fb_i_reg;
  wire s_axis_tvalid;
  wire [3:0]v1_reg_0;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp2}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\dest_out_bin_ff_reg[8] }));
  LUT5 #(
    .INIT(32'h55550400)) 
    ram_full_i_i_1
       (.I0(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .I1(comp2),
        .I2(out),
        .I3(s_axis_tvalid),
        .I4(comp1),
        .O(ram_full_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module gpif2mst_async_34x512_compare_1
   (ram_empty_fb_i_reg,
    v1_reg,
    \gc0.count_d1_reg[8] ,
    E,
    comp1);
  output ram_empty_fb_i_reg;
  input [3:0]v1_reg;
  input \gc0.count_d1_reg[8] ;
  input [0:0]E;
  input comp1;

  wire [0:0]E;
  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp0;
  wire comp1;
  wire \gc0.count_d1_reg[8] ;
  wire ram_empty_fb_i_reg;
  wire [3:0]v1_reg;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp0}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_d1_reg[8] }));
  LUT3 #(
    .INIT(8'hEA)) 
    ram_empty_i_i_1
       (.I0(comp0),
        .I1(E),
        .I2(comp1),
        .O(ram_empty_fb_i_reg));
endmodule

(* ORIG_REF_NAME = "compare" *) 
module gpif2mst_async_34x512_compare_2
   (comp1,
    v1_reg_0,
    \gc0.count_reg[8] );
  output comp1;
  input [3:0]v1_reg_0;
  input \gc0.count_reg[8] ;

  wire carrynet_0;
  wire carrynet_1;
  wire carrynet_2;
  wire carrynet_3;
  wire comp1;
  wire \gc0.count_reg[8] ;
  wire [3:0]v1_reg_0;
  wire [3:0]\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED ;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[0].gm1.m1_CARRY4 
       (.CI(1'b0),
        .CO({carrynet_3,carrynet_2,carrynet_1,carrynet_0}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_gmux.gm[0].gm1.m1_CARRY4_O_UNCONNECTED [3:0]),
        .S(v1_reg_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  CARRY4 \gmux.gm[4].gms.ms_CARRY4 
       (.CI(carrynet_3),
        .CO({\NLW_gmux.gm[4].gms.ms_CARRY4_CO_UNCONNECTED [3:1],comp1}),
        .CYINIT(1'b0),
        .DI({\NLW_gmux.gm[4].gms.ms_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_gmux.gm[4].gms.ms_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_gmux.gm[4].gms.ms_CARRY4_S_UNCONNECTED [3:1],\gc0.count_reg[8] }));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module gpif2mst_async_34x512_fifo_generator_ramfifo
   (wr_rst_busy,
    Q,
    axis_rd_data_count,
    axis_prog_full,
    axis_wr_data_count,
    s_axis_tready,
    m_axis_tvalid,
    axis_prog_empty,
    s_aclk,
    m_aclk,
    m_axis_tready,
    s_axis_tvalid,
    s_axis_tdata,
    s_axis_tuser,
    s_aresetn);
  output wr_rst_busy;
  output [33:0]Q;
  output [9:0]axis_rd_data_count;
  output axis_prog_full;
  output [9:0]axis_wr_data_count;
  output s_axis_tready;
  output m_axis_tvalid;
  output axis_prog_empty;
  input s_aclk;
  input m_aclk;
  input m_axis_tready;
  input s_axis_tvalid;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input s_aresetn;

  wire [33:0]Q;
  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire [0:0]diff_wr_rd;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ;
  wire \gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_10 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_20 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_21 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_22 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_23 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_24 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_25 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_26 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_27 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_28 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_11 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire [3:0]\gras.rsts/c0/v1_reg ;
  wire [3:0]\gras.rsts/c1/v1_reg ;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire p_0_in;
  wire p_0_out;
  wire [8:0]p_0_out_0;
  wire [8:0]p_13_out;
  wire [8:8]p_14_out;
  wire [8:8]p_24_out;
  wire [8:0]p_25_out;
  wire [9:1]plusOp;
  wire [7:0]rd_pntr_plus1;
  wire rst_full_gen_i;
  wire rstblk_n_0;
  wire rstblk_n_1;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire [8:8]wr_pntr_plus2;
  wire wr_rst_busy;

  gpif2mst_async_34x512_clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.D(wr_pntr_plus2),
        .O(diff_wr_rd),
        .Q(p_14_out),
        .RD_PNTR_WR(p_25_out),
        .WR_PNTR_RD(p_24_out),
        .\g_rd.gvalid_low.rd_dc_i_reg[1] (\gntv_or_sync_fifo.gcx.clkx_n_20 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[2] (\gntv_or_sync_fifo.gcx.clkx_n_21 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_28 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[4] (\gntv_or_sync_fifo.gcx.clkx_n_27 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[5] (\gntv_or_sync_fifo.gcx.clkx_n_26 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[6] (\gntv_or_sync_fifo.gcx.clkx_n_25 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[7] (\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[8] (\gntv_or_sync_fifo.gcx.clkx_n_23 ),
        .\g_rd.gvalid_low.rd_dc_i_reg[9] (\gntv_or_sync_fifo.gcx.clkx_n_22 ),
        .\gc0.count_d1_reg[8] (p_0_out_0),
        .\gc0.count_reg[7] (rd_pntr_plus1),
        .\gdiff.diff_pntr_pad_reg[9] (plusOp),
        .\gic0.gc0.count_d2_reg[8] (p_13_out),
        .m_aclk(m_aclk),
        .p_0_out(p_0_out),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .ram_full_fb_i_reg_0(\gntv_or_sync_fifo.gcx.clkx_n_10 ),
        .s_aclk(s_aclk),
        .v1_reg(\gras.rsts/c0/v1_reg ),
        .v1_reg_0(\gras.rsts/c1/v1_reg ));
  gpif2mst_async_34x512_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.D(plusOp),
        .E(\gntv_or_sync_fifo.gl0.rd_n_11 ),
        .ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .O(diff_wr_rd),
        .Q(p_0_out_0),
        .WR_PNTR_RD(p_24_out),
        .axis_prog_empty(axis_prog_empty),
        .axis_rd_data_count(axis_rd_data_count),
        .\dest_out_bin_ff_reg[3] (\gntv_or_sync_fifo.gcx.clkx_n_26 ),
        .\dest_out_bin_ff_reg[3]_0 (\gntv_or_sync_fifo.gcx.clkx_n_27 ),
        .\dest_out_bin_ff_reg[3]_1 (\gntv_or_sync_fifo.gcx.clkx_n_28 ),
        .\dest_out_bin_ff_reg[3]_2 (\gntv_or_sync_fifo.gcx.clkx_n_21 ),
        .\dest_out_bin_ff_reg[3]_3 (\gntv_or_sync_fifo.gcx.clkx_n_20 ),
        .\dest_out_bin_ff_reg[7] (\gntv_or_sync_fifo.gcx.clkx_n_22 ),
        .\dest_out_bin_ff_reg[7]_0 (\gntv_or_sync_fifo.gcx.clkx_n_23 ),
        .\dest_out_bin_ff_reg[7]_1 (\gntv_or_sync_fifo.gcx.clkx_n_24 ),
        .\dest_out_bin_ff_reg[7]_2 (\gntv_or_sync_fifo.gcx.clkx_n_25 ),
        .\gc0.count_d1_reg[7] (rd_pntr_plus1),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (rstblk_n_1),
        .p_0_out(p_0_out),
        .v1_reg(\gras.rsts/c0/v1_reg ),
        .v1_reg_0(\gras.rsts/c1/v1_reg ));
  gpif2mst_async_34x512_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_13_out),
        .Q(p_14_out),
        .RD_PNTR_WR(p_25_out),
        .WEBWE(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .axis_prog_full(axis_prog_full),
        .axis_wr_data_count(axis_wr_data_count),
        .\dest_out_bin_ff_reg[8] (\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .\dest_out_bin_ff_reg[8]_0 (\gntv_or_sync_fifo.gcx.clkx_n_10 ),
        .\gic0.gc0.count_d1_reg[8] (wr_pntr_plus2),
        .\grstd1.grst_full.grst_f.rst_d3_reg (rst_full_gen_i),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (rstblk_n_0),
        .out(p_0_in),
        .s_aclk(s_aclk),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid));
  gpif2mst_async_34x512_memory \gntv_or_sync_fifo.mem 
       (.E(\gntv_or_sync_fifo.gl0.rd_n_11 ),
        .ENB_I(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_I ),
        .ENB_dly_D(\gbm.gbmg.gbmga.ngecc.bmg/inst_blk_mem_gen/gnbram.gnativebmg.native_blk_mem_gen/valid.cstr/ramloop[0].ram.r/ENB_dly_D ),
        .Q(p_0_out_0),
        .WEBWE(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .\gic0.gc0.count_d2_reg[8] (p_13_out),
        .m_aclk(m_aclk),
        .\m_axis_tdata[31] (Q),
        .out(p_0_in),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid));
  gpif2mst_async_34x512_reset_blk_ramfifo rstblk
       (.m_aclk(m_aclk),
        .out(rst_full_gen_i),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .\syncstages_ff_reg[0] (rstblk_n_0),
        .\syncstages_ff_reg[0]_0 (rstblk_n_1),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module gpif2mst_async_34x512_fifo_generator_top
   (wr_rst_busy,
    Q,
    axis_rd_data_count,
    axis_prog_full,
    axis_wr_data_count,
    s_axis_tready,
    m_axis_tvalid,
    axis_prog_empty,
    s_aclk,
    m_aclk,
    m_axis_tready,
    s_axis_tvalid,
    s_axis_tdata,
    s_axis_tuser,
    s_aresetn);
  output wr_rst_busy;
  output [33:0]Q;
  output [9:0]axis_rd_data_count;
  output axis_prog_full;
  output [9:0]axis_wr_data_count;
  output s_axis_tready;
  output m_axis_tvalid;
  output axis_prog_empty;
  input s_aclk;
  input m_aclk;
  input m_axis_tready;
  input s_axis_tvalid;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input s_aresetn;

  wire [33:0]Q;
  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire wr_rst_busy;

  gpif2mst_async_34x512_fifo_generator_ramfifo \grf.rf 
       (.Q(Q),
        .axis_prog_empty(axis_prog_empty),
        .axis_prog_full(axis_prog_full),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tready(s_axis_tready),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "32" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "4" *) (* C_AXIS_TSTRB_WIDTH = "4" *) 
(* C_AXIS_TUSER_WIDTH = "2" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "10" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "18" *) 
(* C_DIN_WIDTH_AXIS = "34" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "32" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "18" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "0" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "1" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "0" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "0" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "0" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "0" *) (* C_IMPLEMENTATION_TYPE_AXIS = "11" *) (* C_IMPLEMENTATION_TYPE_RACH = "12" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "11" *) (* C_IMPLEMENTATION_TYPE_WACH = "12" *) (* C_IMPLEMENTATION_TYPE_WDCH = "11" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "12" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "1" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "1" *) (* C_PRELOAD_REGS = "0" *) (* C_PRIM_FIFO_TYPE = "4kx4" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "512x36" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "2" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "13" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1021" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "13" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1021" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "13" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "3" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "1" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "1022" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "508" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "15" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "15" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "1021" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "1" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "10" *) 
(* C_RD_DEPTH = "1024" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "10" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "0" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "10" *) 
(* C_WR_DEPTH = "1024" *) (* C_WR_DEPTH_AXIS = "512" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "10" *) 
(* C_WR_PNTR_WIDTH_AXIS = "9" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_1" *) 
module gpif2mst_async_34x512_fifo_generator_v13_2_1
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [17:0]din;
  input wr_en;
  input rd_en;
  input [9:0]prog_empty_thresh;
  input [9:0]prog_empty_thresh_assert;
  input [9:0]prog_empty_thresh_negate;
  input [9:0]prog_full_thresh;
  input [9:0]prog_full_thresh_assert;
  input [9:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [17:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [9:0]data_count;
  output [9:0]rd_data_count;
  output [9:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [31:0]s_axis_tdata;
  input [3:0]s_axis_tstrb;
  input [3:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [1:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [31:0]m_axis_tdata;
  output [3:0]m_axis_tstrb;
  output [3:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [1:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [8:0]axis_prog_full_thresh;
  input [8:0]axis_prog_empty_thresh;
  output [9:0]axis_data_count;
  output [9:0]axis_wr_data_count;
  output [9:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire [31:0]m_axis_tdata;
  wire m_axis_tready;
  wire [1:0]m_axis_tuser;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire wr_rst_busy;

  assign almost_empty = \<const1> ;
  assign almost_full = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign data_count[9] = \<const0> ;
  assign data_count[8] = \<const0> ;
  assign data_count[7] = \<const0> ;
  assign data_count[6] = \<const0> ;
  assign data_count[5] = \<const0> ;
  assign data_count[4] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign dout[17] = \<const0> ;
  assign dout[16] = \<const0> ;
  assign dout[15] = \<const0> ;
  assign dout[14] = \<const0> ;
  assign dout[13] = \<const0> ;
  assign dout[12] = \<const0> ;
  assign dout[11] = \<const0> ;
  assign dout[10] = \<const0> ;
  assign dout[9] = \<const0> ;
  assign dout[8] = \<const0> ;
  assign dout[7] = \<const0> ;
  assign dout[6] = \<const0> ;
  assign dout[5] = \<const0> ;
  assign dout[4] = \<const0> ;
  assign dout[3] = \<const0> ;
  assign dout[2] = \<const0> ;
  assign dout[1] = \<const0> ;
  assign dout[0] = \<const0> ;
  assign empty = \<const1> ;
  assign full = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[3] = \<const0> ;
  assign m_axis_tkeep[2] = \<const0> ;
  assign m_axis_tkeep[1] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[3] = \<const0> ;
  assign m_axis_tstrb[2] = \<const0> ;
  assign m_axis_tstrb[1] = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const1> ;
  assign prog_full = \<const0> ;
  assign rd_data_count[9] = \<const0> ;
  assign rd_data_count[8] = \<const0> ;
  assign rd_data_count[7] = \<const0> ;
  assign rd_data_count[6] = \<const0> ;
  assign rd_data_count[5] = \<const0> ;
  assign rd_data_count[4] = \<const0> ;
  assign rd_data_count[3] = \<const0> ;
  assign rd_data_count[2] = \<const0> ;
  assign rd_data_count[1] = \<const0> ;
  assign rd_data_count[0] = \<const0> ;
  assign rd_rst_busy = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign valid = \<const0> ;
  assign wr_ack = \<const0> ;
  assign wr_data_count[9] = \<const0> ;
  assign wr_data_count[8] = \<const0> ;
  assign wr_data_count[7] = \<const0> ;
  assign wr_data_count[6] = \<const0> ;
  assign wr_data_count[5] = \<const0> ;
  assign wr_data_count[4] = \<const0> ;
  assign wr_data_count[3] = \<const0> ;
  assign wr_data_count[2] = \<const0> ;
  assign wr_data_count[1] = \<const0> ;
  assign wr_data_count[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  gpif2mst_async_34x512_fifo_generator_v13_2_1_synth inst_fifo_gen
       (.Q({m_axis_tdata,m_axis_tuser}),
        .axis_prog_empty(axis_prog_empty),
        .axis_prog_full(axis_prog_full),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tready(s_axis_tready),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_1_synth" *) 
module gpif2mst_async_34x512_fifo_generator_v13_2_1_synth
   (wr_rst_busy,
    Q,
    axis_rd_data_count,
    axis_prog_full,
    axis_wr_data_count,
    s_axis_tready,
    m_axis_tvalid,
    axis_prog_empty,
    s_aclk,
    m_aclk,
    m_axis_tready,
    s_axis_tvalid,
    s_axis_tdata,
    s_axis_tuser,
    s_aresetn);
  output wr_rst_busy;
  output [33:0]Q;
  output [9:0]axis_rd_data_count;
  output axis_prog_full;
  output [9:0]axis_wr_data_count;
  output s_axis_tready;
  output m_axis_tvalid;
  output axis_prog_empty;
  input s_aclk;
  input m_aclk;
  input m_axis_tready;
  input s_axis_tvalid;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input s_aresetn;

  wire [33:0]Q;
  wire axis_prog_empty;
  wire axis_prog_full;
  wire [9:0]axis_rd_data_count;
  wire [9:0]axis_wr_data_count;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire s_aclk;
  wire s_aresetn;
  wire [31:0]s_axis_tdata;
  wire s_axis_tready;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;
  wire wr_rst_busy;

  gpif2mst_async_34x512_fifo_generator_top \gaxis_fifo.gaxisf.axisf 
       (.Q(Q),
        .axis_prog_empty(axis_prog_empty),
        .axis_prog_full(axis_prog_full),
        .axis_rd_data_count(axis_rd_data_count),
        .axis_wr_data_count(axis_wr_data_count),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .s_aclk(s_aclk),
        .s_aresetn(s_aresetn),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tready(s_axis_tready),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module gpif2mst_async_34x512_memory
   (ENB_dly_D,
    \m_axis_tdata[31] ,
    s_aclk,
    m_aclk,
    ENB_I,
    Q,
    \gic0.gc0.count_d2_reg[8] ,
    s_axis_tdata,
    s_axis_tuser,
    WEBWE,
    out,
    s_axis_tvalid,
    E);
  output ENB_dly_D;
  output [33:0]\m_axis_tdata[31] ;
  input s_aclk;
  input m_aclk;
  input ENB_I;
  input [8:0]Q;
  input [8:0]\gic0.gc0.count_d2_reg[8] ;
  input [31:0]s_axis_tdata;
  input [1:0]s_axis_tuser;
  input [0:0]WEBWE;
  input out;
  input s_axis_tvalid;
  input [0:0]E;

  wire [0:0]E;
  wire ENB_I;
  wire ENB_dly_D;
  wire [8:0]Q;
  wire [0:0]WEBWE;
  wire [33:0]doutb;
  wire [8:0]\gic0.gc0.count_d2_reg[8] ;
  wire m_aclk;
  wire [33:0]\m_axis_tdata[31] ;
  wire out;
  wire s_aclk;
  wire [31:0]s_axis_tdata;
  wire [1:0]s_axis_tuser;
  wire s_axis_tvalid;

  gpif2mst_async_34x512_blk_mem_gen_v8_4_1 \gbm.gbmg.gbmga.ngecc.bmg 
       (.D(doutb),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .Q(Q),
        .WEBWE(WEBWE),
        .\gic0.gc0.count_d2_reg[8] (\gic0.gc0.count_d2_reg[8] ),
        .m_aclk(m_aclk),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tdata(s_axis_tdata),
        .s_axis_tuser(s_axis_tuser),
        .s_axis_tvalid(s_axis_tvalid));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[0]),
        .Q(\m_axis_tdata[31] [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[10] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[10]),
        .Q(\m_axis_tdata[31] [10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[11] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[11]),
        .Q(\m_axis_tdata[31] [11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[12] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[12]),
        .Q(\m_axis_tdata[31] [12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[13] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[13]),
        .Q(\m_axis_tdata[31] [13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[14] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[14]),
        .Q(\m_axis_tdata[31] [14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[15] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[15]),
        .Q(\m_axis_tdata[31] [15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[16] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[16]),
        .Q(\m_axis_tdata[31] [16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[17] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[17]),
        .Q(\m_axis_tdata[31] [17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[18] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[18]),
        .Q(\m_axis_tdata[31] [18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[19] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[19]),
        .Q(\m_axis_tdata[31] [19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[1]),
        .Q(\m_axis_tdata[31] [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[20] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[20]),
        .Q(\m_axis_tdata[31] [20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[21] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[21]),
        .Q(\m_axis_tdata[31] [21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[22] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[22]),
        .Q(\m_axis_tdata[31] [22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[23] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[23]),
        .Q(\m_axis_tdata[31] [23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[24] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[24]),
        .Q(\m_axis_tdata[31] [24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[25] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[25]),
        .Q(\m_axis_tdata[31] [25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[26] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[26]),
        .Q(\m_axis_tdata[31] [26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[27] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[27]),
        .Q(\m_axis_tdata[31] [27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[28] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[28]),
        .Q(\m_axis_tdata[31] [28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[29] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[29]),
        .Q(\m_axis_tdata[31] [29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[2]),
        .Q(\m_axis_tdata[31] [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[30] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[30]),
        .Q(\m_axis_tdata[31] [30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[31] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[31]),
        .Q(\m_axis_tdata[31] [31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[32] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[32]),
        .Q(\m_axis_tdata[31] [32]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[33] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[33]),
        .Q(\m_axis_tdata[31] [33]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[3]),
        .Q(\m_axis_tdata[31] [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[4]),
        .Q(\m_axis_tdata[31] [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[5]),
        .Q(\m_axis_tdata[31] [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[6]),
        .Q(\m_axis_tdata[31] [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[7]),
        .Q(\m_axis_tdata[31] [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[8]),
        .Q(\m_axis_tdata[31] [8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[9] 
       (.C(m_aclk),
        .CE(E),
        .D(doutb[9]),
        .Q(\m_axis_tdata[31] [9]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module gpif2mst_async_34x512_rd_bin_cntr
   (ram_empty_fb_i_reg,
    Q,
    ram_empty_fb_i_reg_0,
    \gc0.count_d1_reg[7]_0 ,
    WR_PNTR_RD,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    E,
    m_aclk);
  output ram_empty_fb_i_reg;
  output [8:0]Q;
  output ram_empty_fb_i_reg_0;
  output [7:0]\gc0.count_d1_reg[7]_0 ;
  input [0:0]WR_PNTR_RD;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input [0:0]E;
  input m_aclk;

  wire [0:0]E;
  wire [8:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire \gc0.count[8]_i_2_n_0 ;
  wire [7:0]\gc0.count_d1_reg[7]_0 ;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  wire [8:0]plusOp__1;
  wire ram_empty_fb_i_reg;
  wire ram_empty_fb_i_reg_0;
  wire [8:8]rd_pntr_plus1;

  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [0]),
        .O(plusOp__1[0]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [0]),
        .I1(\gc0.count_d1_reg[7]_0 [1]),
        .O(plusOp__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [0]),
        .I1(\gc0.count_d1_reg[7]_0 [1]),
        .I2(\gc0.count_d1_reg[7]_0 [2]),
        .O(plusOp__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [1]),
        .I1(\gc0.count_d1_reg[7]_0 [0]),
        .I2(\gc0.count_d1_reg[7]_0 [2]),
        .I3(\gc0.count_d1_reg[7]_0 [3]),
        .O(plusOp__1[3]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gc0.count[4]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [2]),
        .I1(\gc0.count_d1_reg[7]_0 [0]),
        .I2(\gc0.count_d1_reg[7]_0 [1]),
        .I3(\gc0.count_d1_reg[7]_0 [3]),
        .I4(\gc0.count_d1_reg[7]_0 [4]),
        .O(plusOp__1[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gc0.count[5]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [3]),
        .I1(\gc0.count_d1_reg[7]_0 [1]),
        .I2(\gc0.count_d1_reg[7]_0 [0]),
        .I3(\gc0.count_d1_reg[7]_0 [2]),
        .I4(\gc0.count_d1_reg[7]_0 [4]),
        .I5(\gc0.count_d1_reg[7]_0 [5]),
        .O(plusOp__1[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[6]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(\gc0.count_d1_reg[7]_0 [6]),
        .O(plusOp__1[6]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[7]_i_1 
       (.I0(\gc0.count[8]_i_2_n_0 ),
        .I1(\gc0.count_d1_reg[7]_0 [6]),
        .I2(\gc0.count_d1_reg[7]_0 [7]),
        .O(plusOp__1[7]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[8]_i_1 
       (.I0(\gc0.count_d1_reg[7]_0 [6]),
        .I1(\gc0.count[8]_i_2_n_0 ),
        .I2(\gc0.count_d1_reg[7]_0 [7]),
        .I3(rd_pntr_plus1),
        .O(plusOp__1[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gc0.count[8]_i_2 
       (.I0(\gc0.count_d1_reg[7]_0 [5]),
        .I1(\gc0.count_d1_reg[7]_0 [3]),
        .I2(\gc0.count_d1_reg[7]_0 [1]),
        .I3(\gc0.count_d1_reg[7]_0 [0]),
        .I4(\gc0.count_d1_reg[7]_0 [2]),
        .I5(\gc0.count_d1_reg[7]_0 [4]),
        .O(\gc0.count[8]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [0]),
        .Q(Q[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [1]),
        .Q(Q[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [2]),
        .Q(Q[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [3]),
        .Q(Q[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [4]),
        .Q(Q[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [5]),
        .Q(Q[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [6]),
        .Q(Q[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(\gc0.count_d1_reg[7]_0 [7]),
        .Q(Q[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(rd_pntr_plus1),
        .Q(Q[8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDSE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[0]),
        .Q(\gc0.count_d1_reg[7]_0 [0]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[1]),
        .Q(\gc0.count_d1_reg[7]_0 [1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[2]),
        .Q(\gc0.count_d1_reg[7]_0 [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[3]),
        .Q(\gc0.count_d1_reg[7]_0 [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[4] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[4]),
        .Q(\gc0.count_d1_reg[7]_0 [4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[5] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[5]),
        .Q(\gc0.count_d1_reg[7]_0 [5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[6] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[6]),
        .Q(\gc0.count_d1_reg[7]_0 [6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[7] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[7]),
        .Q(\gc0.count_d1_reg[7]_0 [7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gc0.count_reg[8] 
       (.C(m_aclk),
        .CE(E),
        .D(plusOp__1[8]),
        .Q(rd_pntr_plus1),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__1 
       (.I0(Q[8]),
        .I1(WR_PNTR_RD),
        .O(ram_empty_fb_i_reg));
  LUT2 #(
    .INIT(4'h9)) 
    \gmux.gm[4].gms.ms_i_1__2 
       (.I0(rd_pntr_plus1),
        .I1(WR_PNTR_RD),
        .O(ram_empty_fb_i_reg_0));
endmodule

(* ORIG_REF_NAME = "rd_dc_fwft_ext_as" *) 
module gpif2mst_async_34x512_rd_dc_fwft_ext_as
   (axis_rd_data_count,
    rd_dc_i,
    \dest_out_bin_ff_reg[7] ,
    m_aclk,
    \dest_out_bin_ff_reg[7]_0 ,
    \dest_out_bin_ff_reg[7]_1 ,
    \dest_out_bin_ff_reg[7]_2 ,
    \dest_out_bin_ff_reg[3] ,
    \dest_out_bin_ff_reg[3]_0 ,
    \dest_out_bin_ff_reg[3]_1 ,
    \dest_out_bin_ff_reg[3]_2 ,
    \dest_out_bin_ff_reg[3]_3 ,
    \gpregsm1.curr_fwft_state_reg[1] );
  output [9:0]axis_rd_data_count;
  input [0:0]rd_dc_i;
  input \dest_out_bin_ff_reg[7] ;
  input m_aclk;
  input \dest_out_bin_ff_reg[7]_0 ;
  input \dest_out_bin_ff_reg[7]_1 ;
  input \dest_out_bin_ff_reg[7]_2 ;
  input \dest_out_bin_ff_reg[3] ;
  input \dest_out_bin_ff_reg[3]_0 ;
  input \dest_out_bin_ff_reg[3]_1 ;
  input \dest_out_bin_ff_reg[3]_2 ;
  input \dest_out_bin_ff_reg[3]_3 ;
  input \gpregsm1.curr_fwft_state_reg[1] ;

  wire [9:0]axis_rd_data_count;
  wire \dest_out_bin_ff_reg[3] ;
  wire \dest_out_bin_ff_reg[3]_0 ;
  wire \dest_out_bin_ff_reg[3]_1 ;
  wire \dest_out_bin_ff_reg[3]_2 ;
  wire \dest_out_bin_ff_reg[3]_3 ;
  wire \dest_out_bin_ff_reg[7] ;
  wire \dest_out_bin_ff_reg[7]_0 ;
  wire \dest_out_bin_ff_reg[7]_1 ;
  wire \dest_out_bin_ff_reg[7]_2 ;
  wire \gpregsm1.curr_fwft_state_reg[1] ;
  wire m_aclk;
  wire [0:0]rd_dc_i;

  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\gpregsm1.curr_fwft_state_reg[1] ),
        .Q(axis_rd_data_count[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3]_3 ),
        .Q(axis_rd_data_count[1]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3]_2 ),
        .Q(axis_rd_data_count[2]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3]_1 ),
        .Q(axis_rd_data_count[3]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3]_0 ),
        .Q(axis_rd_data_count[4]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[3] ),
        .Q(axis_rd_data_count[5]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[7]_2 ),
        .Q(axis_rd_data_count[6]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[7]_1 ),
        .Q(axis_rd_data_count[7]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[7]_0 ),
        .Q(axis_rd_data_count[8]),
        .R(rd_dc_i));
  FDRE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[9] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\dest_out_bin_ff_reg[7] ),
        .Q(axis_rd_data_count[9]),
        .R(rd_dc_i));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module gpif2mst_async_34x512_rd_fwft
   (E,
    \g_rd.gvalid_low.rd_dc_i_reg[0] ,
    p_0_out,
    \gc0.count_d1_reg[8] ,
    rd_dc_i,
    m_axis_tvalid,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    m_aclk,
    m_axis_tready,
    out,
    O);
  output [0:0]E;
  output \g_rd.gvalid_low.rd_dc_i_reg[0] ;
  output p_0_out;
  output [0:0]\gc0.count_d1_reg[8] ;
  output [0:0]rd_dc_i;
  output m_axis_tvalid;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input m_aclk;
  input m_axis_tready;
  input out;
  input [0:0]O;

  wire [0:0]E;
  wire [0:0]O;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0__2;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i_reg0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0__1;
  wire \g_rd.gvalid_low.rd_dc_i_reg[0] ;
  wire [0:0]\gc0.count_d1_reg[8] ;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire [1:0]next_fwft_state;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  wire out;
  wire p_0_out;
  wire [0:0]rd_dc_i;
  (* DONT_TOUCH *) wire user_valid;

  LUT6 #(
    .INIT(64'hFFFFF02F20000000)) 
    aempty_fwft_fb_i_i_1
       (.I0(m_axis_tready),
        .I1(empty_fwft_fb_o_i),
        .I2(curr_fwft_state[0]),
        .I3(curr_fwft_state[1]),
        .I4(out),
        .I5(aempty_fwft_fb_i),
        .O(aempty_fwft_i0__2));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(aempty_fwft_i0__2),
        .Q(aempty_fwft_fb_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(aempty_fwft_i0__2),
        .Q(aempty_fwft_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT5 #(
    .INIT(32'hFF0F0400)) 
    empty_fwft_fb_i_i_1
       (.I0(empty_fwft_fb_o_i),
        .I1(m_axis_tready),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .I4(empty_fwft_fb_i),
        .O(empty_fwft_i0__1));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_i0__1),
        .Q(empty_fwft_fb_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(m_axis_tready),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i_reg0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i_reg0),
        .Q(empty_fwft_fb_o_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(empty_fwft_i0__1),
        .Q(empty_fwft_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT4 #(
    .INIT(16'h00D0)) 
    \g_rd.gvalid_low.rd_dc_i[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(O),
        .I2(user_valid),
        .I3(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .O(\g_rd.gvalid_low.rd_dc_i_reg[0] ));
  LUT3 #(
    .INIT(8'hBF)) 
    \g_rd.gvalid_low.rd_dc_i[9]_i_1 
       (.I0(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .I1(curr_fwft_state[1]),
        .I2(user_valid),
        .O(rd_dc_i));
  LUT5 #(
    .INIT(32'h04555555)) 
    \gc0.count_d1[8]_i_1 
       (.I0(out),
        .I1(m_axis_tready),
        .I2(empty_fwft_fb_o_i),
        .I3(curr_fwft_state[1]),
        .I4(curr_fwft_state[0]),
        .O(\gc0.count_d1_reg[8] ));
  LUT5 #(
    .INIT(32'hFFFF8088)) 
    \gdiff.diff_pntr_pad[4]_i_2 
       (.I0(curr_fwft_state[0]),
        .I1(curr_fwft_state[1]),
        .I2(empty_fwft_fb_o_i),
        .I3(m_axis_tready),
        .I4(out),
        .O(p_0_out));
  LUT5 #(
    .INIT(32'h00004F00)) 
    \goreg_bm.dout_i[33]_i_1 
       (.I0(empty_fwft_fb_o_i),
        .I1(m_axis_tready),
        .I2(curr_fwft_state[0]),
        .I3(curr_fwft_state[1]),
        .I4(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .O(E));
  LUT4 #(
    .INIT(16'hFBAA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(m_axis_tready),
        .I2(empty_fwft_fb_o_i),
        .I3(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT5 #(
    .INIT(32'hA200FFFF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(m_axis_tready),
        .I2(empty_fwft_fb_o_i),
        .I3(curr_fwft_state[0]),
        .I4(out),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(next_fwft_state[0]),
        .Q(user_valid),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT1 #(
    .INIT(2'h1)) 
    m_axis_tvalid_INST_0
       (.I0(empty_fwft_i),
        .O(m_axis_tvalid));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module gpif2mst_async_34x512_rd_logic
   (axis_rd_data_count,
    axis_prog_empty,
    E,
    Q,
    \gc0.count_d1_reg[7] ,
    ENB_I,
    p_0_out,
    m_axis_tvalid,
    v1_reg,
    v1_reg_0,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    m_aclk,
    \dest_out_bin_ff_reg[7] ,
    \dest_out_bin_ff_reg[7]_0 ,
    \dest_out_bin_ff_reg[7]_1 ,
    \dest_out_bin_ff_reg[7]_2 ,
    \dest_out_bin_ff_reg[3] ,
    \dest_out_bin_ff_reg[3]_0 ,
    \dest_out_bin_ff_reg[3]_1 ,
    \dest_out_bin_ff_reg[3]_2 ,
    \dest_out_bin_ff_reg[3]_3 ,
    m_axis_tready,
    WR_PNTR_RD,
    ENB_dly_D,
    O,
    D);
  output [9:0]axis_rd_data_count;
  output axis_prog_empty;
  output [0:0]E;
  output [8:0]Q;
  output [7:0]\gc0.count_d1_reg[7] ;
  output ENB_I;
  output p_0_out;
  output m_axis_tvalid;
  input [3:0]v1_reg;
  input [3:0]v1_reg_0;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input m_aclk;
  input \dest_out_bin_ff_reg[7] ;
  input \dest_out_bin_ff_reg[7]_0 ;
  input \dest_out_bin_ff_reg[7]_1 ;
  input \dest_out_bin_ff_reg[7]_2 ;
  input \dest_out_bin_ff_reg[3] ;
  input \dest_out_bin_ff_reg[3]_0 ;
  input \dest_out_bin_ff_reg[3]_1 ;
  input \dest_out_bin_ff_reg[3]_2 ;
  input \dest_out_bin_ff_reg[3]_3 ;
  input m_axis_tready;
  input [0:0]WR_PNTR_RD;
  input ENB_dly_D;
  input [0:0]O;
  input [8:0]D;

  wire [8:0]D;
  wire [0:0]E;
  wire ENB_I;
  wire ENB_dly_D;
  wire [0:0]O;
  wire [8:0]Q;
  wire [0:0]WR_PNTR_RD;
  wire axis_prog_empty;
  wire [9:0]axis_rd_data_count;
  wire \dest_out_bin_ff_reg[3] ;
  wire \dest_out_bin_ff_reg[3]_0 ;
  wire \dest_out_bin_ff_reg[3]_1 ;
  wire \dest_out_bin_ff_reg[3]_2 ;
  wire \dest_out_bin_ff_reg[3]_3 ;
  wire \dest_out_bin_ff_reg[7] ;
  wire \dest_out_bin_ff_reg[7]_0 ;
  wire \dest_out_bin_ff_reg[7]_1 ;
  wire \dest_out_bin_ff_reg[7]_2 ;
  wire [7:0]\gc0.count_d1_reg[7] ;
  wire \gr1.gr1_int.rfwft_n_1 ;
  wire m_aclk;
  wire m_axis_tready;
  wire m_axis_tvalid;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  wire p_0_out;
  wire p_2_out;
  wire p_8_out;
  wire [9:9]rd_dc_i;
  wire rpntr_n_0;
  wire rpntr_n_10;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  gpif2mst_async_34x512_rd_fwft \gr1.gr1_int.rfwft 
       (.E(E),
        .O(O),
        .\g_rd.gvalid_low.rd_dc_i_reg[0] (\gr1.gr1_int.rfwft_n_1 ),
        .\gc0.count_d1_reg[8] (p_8_out),
        .m_aclk(m_aclk),
        .m_axis_tready(m_axis_tready),
        .m_axis_tvalid(m_axis_tvalid),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .out(p_2_out),
        .p_0_out(p_0_out),
        .rd_dc_i(rd_dc_i));
  gpif2mst_async_34x512_rd_dc_fwft_ext_as \gr1.grdc2.rdc 
       (.axis_rd_data_count(axis_rd_data_count),
        .\dest_out_bin_ff_reg[3] (\dest_out_bin_ff_reg[3] ),
        .\dest_out_bin_ff_reg[3]_0 (\dest_out_bin_ff_reg[3]_0 ),
        .\dest_out_bin_ff_reg[3]_1 (\dest_out_bin_ff_reg[3]_1 ),
        .\dest_out_bin_ff_reg[3]_2 (\dest_out_bin_ff_reg[3]_2 ),
        .\dest_out_bin_ff_reg[3]_3 (\dest_out_bin_ff_reg[3]_3 ),
        .\dest_out_bin_ff_reg[7] (\dest_out_bin_ff_reg[7] ),
        .\dest_out_bin_ff_reg[7]_0 (\dest_out_bin_ff_reg[7]_0 ),
        .\dest_out_bin_ff_reg[7]_1 (\dest_out_bin_ff_reg[7]_1 ),
        .\dest_out_bin_ff_reg[7]_2 (\dest_out_bin_ff_reg[7]_2 ),
        .\gpregsm1.curr_fwft_state_reg[1] (\gr1.gr1_int.rfwft_n_1 ),
        .m_aclk(m_aclk),
        .rd_dc_i(rd_dc_i));
  gpif2mst_async_34x512_rd_pe_as \gras.gpe.rdpe 
       (.D(D),
        .axis_prog_empty(axis_prog_empty),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .out(p_2_out));
  gpif2mst_async_34x512_rd_status_flags_as \gras.rsts 
       (.E(p_8_out),
        .ENB_I(ENB_I),
        .ENB_dly_D(ENB_dly_D),
        .\gc0.count_d1_reg[8] (rpntr_n_0),
        .\gc0.count_reg[8] (rpntr_n_10),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .out(p_2_out),
        .v1_reg(v1_reg),
        .v1_reg_0(v1_reg_0));
  gpif2mst_async_34x512_rd_bin_cntr rpntr
       (.E(p_8_out),
        .Q(Q),
        .WR_PNTR_RD(WR_PNTR_RD),
        .\gc0.count_d1_reg[7]_0 (\gc0.count_d1_reg[7] ),
        .m_aclk(m_aclk),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .ram_empty_fb_i_reg(rpntr_n_0),
        .ram_empty_fb_i_reg_0(rpntr_n_10));
endmodule

(* ORIG_REF_NAME = "rd_pe_as" *) 
module gpif2mst_async_34x512_rd_pe_as
   (axis_prog_empty,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    m_aclk,
    out,
    D);
  output axis_prog_empty;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input m_aclk;
  input out;
  input [8:0]D;

  wire [8:0]D;
  wire axis_prog_empty;
  wire [9:1]diff_pntr_pad;
  wire \gpe1.prog_empty_i_i_1_n_0 ;
  wire \gpe1.prog_empty_i_i_2_n_0 ;
  wire \gpe1.prog_empty_i_i_3_n_0 ;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  wire out;

  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(diff_pntr_pad[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[2] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(diff_pntr_pad[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[3] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(diff_pntr_pad[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[4] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(diff_pntr_pad[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[5] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(diff_pntr_pad[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[6] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(diff_pntr_pad[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[7] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(diff_pntr_pad[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[8] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(diff_pntr_pad[8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[9] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(diff_pntr_pad[9]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \gpe1.prog_empty_i_i_1 
       (.I0(axis_prog_empty),
        .I1(out),
        .I2(\gpe1.prog_empty_i_i_2_n_0 ),
        .I3(\gpe1.prog_empty_i_i_3_n_0 ),
        .O(\gpe1.prog_empty_i_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \gpe1.prog_empty_i_i_2 
       (.I0(diff_pntr_pad[8]),
        .I1(diff_pntr_pad[9]),
        .I2(diff_pntr_pad[7]),
        .I3(diff_pntr_pad[6]),
        .O(\gpe1.prog_empty_i_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFEA)) 
    \gpe1.prog_empty_i_i_3 
       (.I0(diff_pntr_pad[3]),
        .I1(diff_pntr_pad[2]),
        .I2(diff_pntr_pad[1]),
        .I3(diff_pntr_pad[5]),
        .I4(diff_pntr_pad[4]),
        .O(\gpe1.prog_empty_i_i_3_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gpe1.prog_empty_i_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\gpe1.prog_empty_i_i_1_n_0 ),
        .Q(axis_prog_empty),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module gpif2mst_async_34x512_rd_status_flags_as
   (out,
    ENB_I,
    v1_reg,
    \gc0.count_d1_reg[8] ,
    v1_reg_0,
    \gc0.count_reg[8] ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ,
    m_aclk,
    ENB_dly_D,
    E);
  output out;
  output ENB_I;
  input [3:0]v1_reg;
  input \gc0.count_d1_reg[8] ;
  input [3:0]v1_reg_0;
  input \gc0.count_reg[8] ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  input m_aclk;
  input ENB_dly_D;
  input [0:0]E;

  wire [0:0]E;
  wire ENB_I;
  wire ENB_dly_D;
  wire c0_n_0;
  wire comp1;
  wire \gc0.count_d1_reg[8] ;
  wire \gc0.count_reg[8] ;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  assign out = ram_empty_fb_i;
  LUT4 #(
    .INIT(16'hABAA)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(ENB_dly_D),
        .I1(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ),
        .I2(ram_empty_fb_i),
        .I3(E),
        .O(ENB_I));
  gpif2mst_async_34x512_compare_1 c0
       (.E(E),
        .comp1(comp1),
        .\gc0.count_d1_reg[8] (\gc0.count_d1_reg[8] ),
        .ram_empty_fb_i_reg(c0_n_0),
        .v1_reg(v1_reg));
  gpif2mst_async_34x512_compare_2 c1
       (.comp1(comp1),
        .\gc0.count_reg[8] (\gc0.count_reg[8] ),
        .v1_reg_0(v1_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_empty_fb_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(m_aclk),
        .CE(1'b1),
        .D(c0_n_0),
        .Q(ram_empty_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg ));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module gpif2mst_async_34x512_reset_blk_ramfifo
   (\syncstages_ff_reg[0] ,
    \syncstages_ff_reg[0]_0 ,
    wr_rst_busy,
    out,
    s_aclk,
    m_aclk,
    s_aresetn);
  output \syncstages_ff_reg[0] ;
  output \syncstages_ff_reg[0]_0 ;
  output wr_rst_busy;
  output out;
  input s_aclk;
  input m_aclk;
  input s_aresetn;

  wire arst_sync_rd_rst;
  wire dest_out;
  wire dest_rst;
  wire inverted_reset;
  wire m_aclk;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ;
  wire [3:0]rd_rst_wr_ext;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d1;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d3;
  wire s_aclk;
  wire s_aresetn;
  wire sckt_rd_rst_wr;
  wire \syncstages_ff_reg[0] ;
  wire \syncstages_ff_reg[0]_0 ;
  wire wr_rst_busy_i;
  wire [1:0]wr_rst_rd_ext;

  assign out = rst_d3;
  assign wr_rst_busy = wr_rst_busy_i;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(wr_rst_busy_i),
        .Q(rst_d1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDRE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d1),
        .Q(rst_d2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDSE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rst_d2),
        .Q(rst_d3),
        .S(\syncstages_ff_reg[0] ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF4)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(wr_rst_rd_ext[1]),
        .I1(\syncstages_ff_reg[0]_0 ),
        .I2(arst_sync_rd_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(m_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .Q(\syncstages_ff_reg[0]_0 ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFF8A)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(\syncstages_ff_reg[0] ),
        .I1(rd_rst_wr_ext[0]),
        .I2(rd_rst_wr_ext[1]),
        .I3(dest_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .Q(\syncstages_ff_reg[0] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFFB0F0B0B0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_i_1 
       (.I0(rd_rst_wr_ext[2]),
        .I1(rd_rst_wr_ext[3]),
        .I2(wr_rst_busy_i),
        .I3(rd_rst_wr_ext[0]),
        .I4(rd_rst_wr_ext[1]),
        .I5(dest_rst),
        .O(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ),
        .Q(wr_rst_busy_i),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(m_aclk),
        .CE(1'b1),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]),
        .R(1'b0));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_34x512_xpm_cdc_single \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(s_aclk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(m_aclk),
        .src_in(\syncstages_ff_reg[0]_0 ));
  (* DEST_SYNC_FF = "5" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_34x512_xpm_cdc_single__1 \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(m_aclk),
        .dest_out(dest_out),
        .src_clk(s_aclk),
        .src_in(\syncstages_ff_reg[0] ));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_34x512_xpm_cdc_sync_rst \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(m_aclk),
        .dest_rst(arst_sync_rd_rst),
        .src_rst(inverted_reset));
  (* DEF_VAL = "1'b1" *) 
  (* DEST_SYNC_FF = "5" *) 
  (* INIT = "1" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  gpif2mst_async_34x512_xpm_cdc_sync_rst__1 \ngwrdrst.grst.g7serrst.gsckt_wrst.xpm_cdc_sync_rst_inst_wrst 
       (.dest_clk(s_aclk),
        .dest_rst(dest_rst),
        .src_rst(inverted_reset));
  LUT1 #(
    .INIT(2'h1)) 
    \ngwrdrst.grst.g7serrst.gsckt_wrst.xpm_cdc_sync_rst_inst_wrst_i_1 
       (.I0(s_aresetn),
        .O(inverted_reset));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module gpif2mst_async_34x512_wr_bin_cntr
   (S,
    Q,
    \gdiff.diff_pntr_pad_reg[8] ,
    \wr_data_count_i_reg[0] ,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \wr_data_count_i_reg[9] ,
    \wr_data_count_i_reg[9]_0 ,
    \gdiff.diff_pntr_pad_reg[9] ,
    \gic0.gc0.count_d1_reg[8]_0 ,
    v1_reg,
    v1_reg_0,
    D,
    RD_PNTR_WR,
    O,
    \gic0.gc0.count_d2_reg[7]_0 ,
    \gic0.gc0.count_d2_reg[7]_1 ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    E,
    s_aclk);
  output [3:0]S;
  output [8:0]Q;
  output [3:0]\gdiff.diff_pntr_pad_reg[8] ;
  output [3:0]\wr_data_count_i_reg[0] ;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [3:0]\wr_data_count_i_reg[9] ;
  output [0:0]\wr_data_count_i_reg[9]_0 ;
  output [0:0]\gdiff.diff_pntr_pad_reg[9] ;
  output [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  output [3:0]v1_reg;
  output [3:0]v1_reg_0;
  output [8:0]D;
  input [8:0]RD_PNTR_WR;
  input [2:0]O;
  input [0:0]\gic0.gc0.count_d2_reg[7]_0 ;
  input [3:0]\gic0.gc0.count_d2_reg[7]_1 ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input [0:0]E;
  input s_aclk;

  wire [8:0]D;
  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [2:0]O;
  wire [8:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [3:0]S;
  wire [3:0]\gdiff.diff_pntr_pad_reg[8] ;
  wire [0:0]\gdiff.diff_pntr_pad_reg[9] ;
  wire \gic0.gc0.count[8]_i_2_n_0 ;
  wire [0:0]\gic0.gc0.count_d1_reg[8]_0 ;
  wire [0:0]\gic0.gc0.count_d2_reg[7]_0 ;
  wire [3:0]\gic0.gc0.count_d2_reg[7]_1 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire [8:0]plusOp__0;
  wire s_aclk;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;
  wire \wr_data_count_i[9]_i_2_n_0 ;
  wire [3:0]\wr_data_count_i_reg[0] ;
  wire [3:0]\wr_data_count_i_reg[9] ;
  wire [0:0]\wr_data_count_i_reg[9]_0 ;
  wire [7:0]wr_pntr_plus2;

  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc0.count[0]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[1]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[2]_i_1 
       (.I0(wr_pntr_plus2[0]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[3]_i_1 
       (.I0(wr_pntr_plus2[1]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[2]),
        .I3(wr_pntr_plus2[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \gic0.gc0.count[4]_i_1 
       (.I0(wr_pntr_plus2[2]),
        .I1(wr_pntr_plus2[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[3]),
        .I4(wr_pntr_plus2[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \gic0.gc0.count[5]_i_1 
       (.I0(wr_pntr_plus2[3]),
        .I1(wr_pntr_plus2[1]),
        .I2(wr_pntr_plus2[0]),
        .I3(wr_pntr_plus2[2]),
        .I4(wr_pntr_plus2[4]),
        .I5(wr_pntr_plus2[5]),
        .O(plusOp__0[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc0.count[6]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc0.count[7]_i_1 
       (.I0(\gic0.gc0.count[8]_i_2_n_0 ),
        .I1(wr_pntr_plus2[6]),
        .I2(wr_pntr_plus2[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc0.count[8]_i_1 
       (.I0(wr_pntr_plus2[6]),
        .I1(\gic0.gc0.count[8]_i_2_n_0 ),
        .I2(wr_pntr_plus2[7]),
        .I3(\gic0.gc0.count_d1_reg[8]_0 ),
        .O(plusOp__0[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \gic0.gc0.count[8]_i_2 
       (.I0(wr_pntr_plus2[5]),
        .I1(wr_pntr_plus2[3]),
        .I2(wr_pntr_plus2[1]),
        .I3(wr_pntr_plus2[0]),
        .I4(wr_pntr_plus2[2]),
        .I5(wr_pntr_plus2[4]),
        .O(\gic0.gc0.count[8]_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_d1_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[0]),
        .Q(Q[0]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[1]),
        .Q(Q[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[2]),
        .Q(Q[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[3]),
        .Q(Q[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[4]),
        .Q(Q[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[5]),
        .Q(Q[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[6]),
        .Q(Q[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(wr_pntr_plus2[7]),
        .Q(Q[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d1_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(\gic0.gc0.count_d1_reg[8]_0 ),
        .Q(Q[8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[0]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[1]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[2]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[3]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[4]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[5]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[6]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[7]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_d2_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(Q[8]),
        .Q(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[0] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[0]),
        .Q(wr_pntr_plus2[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDSE #(
    .INIT(1'b1)) 
    \gic0.gc0.count_reg[1] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[1]),
        .Q(wr_pntr_plus2[1]),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[2] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[2]),
        .Q(wr_pntr_plus2[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[3] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[3]),
        .Q(wr_pntr_plus2[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[4] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[4]),
        .Q(wr_pntr_plus2[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[5] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[5]),
        .Q(wr_pntr_plus2[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[6] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[6]),
        .Q(wr_pntr_plus2[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[7] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[7]),
        .Q(wr_pntr_plus2[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gic0.gc0.count_reg[8] 
       (.C(s_aclk),
        .CE(E),
        .D(plusOp__0[8]),
        .Q(\gic0.gc0.count_d1_reg[8]_0 ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1 
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .I2(Q[1]),
        .I3(RD_PNTR_WR[1]),
        .O(v1_reg[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[0].gm1.m1_i_1__0 
       (.I0(wr_pntr_plus2[0]),
        .I1(RD_PNTR_WR[0]),
        .I2(wr_pntr_plus2[1]),
        .I3(RD_PNTR_WR[1]),
        .O(v1_reg_0[0]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1 
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .I2(Q[3]),
        .I3(RD_PNTR_WR[3]),
        .O(v1_reg[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[1].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[2]),
        .I1(RD_PNTR_WR[2]),
        .I2(wr_pntr_plus2[3]),
        .I3(RD_PNTR_WR[3]),
        .O(v1_reg_0[1]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1 
       (.I0(Q[4]),
        .I1(RD_PNTR_WR[4]),
        .I2(Q[5]),
        .I3(RD_PNTR_WR[5]),
        .O(v1_reg[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[2].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[4]),
        .I1(RD_PNTR_WR[4]),
        .I2(wr_pntr_plus2[5]),
        .I3(RD_PNTR_WR[5]),
        .O(v1_reg_0[2]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1 
       (.I0(Q[6]),
        .I1(RD_PNTR_WR[6]),
        .I2(Q[7]),
        .I3(RD_PNTR_WR[7]),
        .O(v1_reg[3]));
  LUT4 #(
    .INIT(16'h9009)) 
    \gmux.gm[3].gms.ms_i_1__0 
       (.I0(wr_pntr_plus2[6]),
        .I1(RD_PNTR_WR[6]),
        .I2(wr_pntr_plus2[7]),
        .I3(RD_PNTR_WR[7]),
        .O(v1_reg_0[3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_1
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7]),
        .I1(RD_PNTR_WR[7]),
        .O(\wr_data_count_i_reg[9] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_2
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [6]),
        .I1(RD_PNTR_WR[6]),
        .O(\wr_data_count_i_reg[9] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_3
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [5]),
        .I1(RD_PNTR_WR[5]),
        .O(\wr_data_count_i_reg[9] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__0_i_4
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [4]),
        .I1(RD_PNTR_WR[4]),
        .O(\wr_data_count_i_reg[9] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry__1_i_1
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [8]),
        .I1(RD_PNTR_WR[8]),
        .O(\wr_data_count_i_reg[9]_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_1
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [3]),
        .I1(RD_PNTR_WR[3]),
        .O(\wr_data_count_i_reg[0] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_2
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [2]),
        .I1(RD_PNTR_WR[2]),
        .O(\wr_data_count_i_reg[0] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_3
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [1]),
        .I1(RD_PNTR_WR[1]),
        .O(\wr_data_count_i_reg[0] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    minusOp_carry_i_4
       (.I0(\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [0]),
        .I1(RD_PNTR_WR[0]),
        .O(\wr_data_count_i_reg[0] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_1
       (.I0(Q[7]),
        .I1(RD_PNTR_WR[7]),
        .O(\gdiff.diff_pntr_pad_reg[8] [3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_2
       (.I0(Q[6]),
        .I1(RD_PNTR_WR[6]),
        .O(\gdiff.diff_pntr_pad_reg[8] [2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_3
       (.I0(Q[5]),
        .I1(RD_PNTR_WR[5]),
        .O(\gdiff.diff_pntr_pad_reg[8] [1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__0_i_4
       (.I0(Q[4]),
        .I1(RD_PNTR_WR[4]),
        .O(\gdiff.diff_pntr_pad_reg[8] [0]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry__1_i_1
       (.I0(Q[8]),
        .I1(RD_PNTR_WR[8]),
        .O(\gdiff.diff_pntr_pad_reg[9] ));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_1
       (.I0(Q[3]),
        .I1(RD_PNTR_WR[3]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_2
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .O(S[2]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_3
       (.I0(Q[1]),
        .I1(RD_PNTR_WR[1]),
        .O(S[1]));
  LUT2 #(
    .INIT(4'h9)) 
    plusOp_carry_i_4
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .O(S[0]));
  LUT1 #(
    .INIT(2'h1)) 
    \wr_data_count_i[1]_i_1 
       (.I0(O[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_data_count_i[2]_i_1 
       (.I0(O[0]),
        .I1(O[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \wr_data_count_i[3]_i_1 
       (.I0(O[0]),
        .I1(O[1]),
        .I2(O[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \wr_data_count_i[4]_i_1 
       (.I0(O[1]),
        .I1(O[0]),
        .I2(O[2]),
        .I3(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \wr_data_count_i[5]_i_1 
       (.I0(O[2]),
        .I1(O[0]),
        .I2(O[1]),
        .I3(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I4(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .O(D[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \wr_data_count_i[6]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I1(O[1]),
        .I2(O[0]),
        .I3(O[2]),
        .I4(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .I5(\gic0.gc0.count_d2_reg[7]_1 [2]),
        .O(D[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \wr_data_count_i[7]_i_1 
       (.I0(\wr_data_count_i[9]_i_2_n_0 ),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \wr_data_count_i[8]_i_1 
       (.I0(\wr_data_count_i[9]_i_2_n_0 ),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .I2(\gic0.gc0.count_d2_reg[7]_0 ),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \wr_data_count_i[9]_i_1 
       (.I0(\gic0.gc0.count_d2_reg[7]_0 ),
        .I1(\wr_data_count_i[9]_i_2_n_0 ),
        .I2(\gic0.gc0.count_d2_reg[7]_1 [3]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \wr_data_count_i[9]_i_2 
       (.I0(\gic0.gc0.count_d2_reg[7]_1 [2]),
        .I1(\gic0.gc0.count_d2_reg[7]_1 [0]),
        .I2(O[1]),
        .I3(O[0]),
        .I4(O[2]),
        .I5(\gic0.gc0.count_d2_reg[7]_1 [1]),
        .O(\wr_data_count_i[9]_i_2_n_0 ));
endmodule

(* ORIG_REF_NAME = "wr_dc_fwft_ext_as" *) 
module gpif2mst_async_34x512_wr_dc_fwft_ext_as
   (O,
    \wr_data_count_i_reg[9]_0 ,
    \wr_data_count_i_reg[9]_1 ,
    axis_wr_data_count,
    \gic0.gc0.count_d2_reg[7] ,
    S,
    \gic0.gc0.count_d2_reg[7]_0 ,
    \gic0.gc0.count_d2_reg[8] ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    D,
    s_aclk);
  output [2:0]O;
  output [3:0]\wr_data_count_i_reg[9]_0 ;
  output [0:0]\wr_data_count_i_reg[9]_1 ;
  output [9:0]axis_wr_data_count;
  input [7:0]\gic0.gc0.count_d2_reg[7] ;
  input [3:0]S;
  input [3:0]\gic0.gc0.count_d2_reg[7]_0 ;
  input [0:0]\gic0.gc0.count_d2_reg[8] ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input [8:0]D;
  input s_aclk;

  wire [8:0]D;
  wire [2:0]O;
  wire [3:0]S;
  wire [9:0]axis_wr_data_count;
  wire [7:0]\gic0.gc0.count_d2_reg[7] ;
  wire [3:0]\gic0.gc0.count_d2_reg[7]_0 ;
  wire [0:0]\gic0.gc0.count_d2_reg[8] ;
  wire minusOp_carry__0_n_0;
  wire minusOp_carry__0_n_1;
  wire minusOp_carry__0_n_2;
  wire minusOp_carry__0_n_3;
  wire minusOp_carry_n_0;
  wire minusOp_carry_n_1;
  wire minusOp_carry_n_2;
  wire minusOp_carry_n_3;
  wire minusOp_carry_n_7;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire s_aclk;
  wire [3:0]\wr_data_count_i_reg[9]_0 ;
  wire [0:0]\wr_data_count_i_reg[9]_1 ;
  wire [3:0]NLW_minusOp_carry__1_CO_UNCONNECTED;
  wire [3:1]NLW_minusOp_carry__1_O_UNCONNECTED;

  CARRY4 minusOp_carry
       (.CI(1'b0),
        .CO({minusOp_carry_n_0,minusOp_carry_n_1,minusOp_carry_n_2,minusOp_carry_n_3}),
        .CYINIT(1'b1),
        .DI(\gic0.gc0.count_d2_reg[7] [3:0]),
        .O({O,minusOp_carry_n_7}),
        .S(S));
  CARRY4 minusOp_carry__0
       (.CI(minusOp_carry_n_0),
        .CO({minusOp_carry__0_n_0,minusOp_carry__0_n_1,minusOp_carry__0_n_2,minusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(\gic0.gc0.count_d2_reg[7] [7:4]),
        .O(\wr_data_count_i_reg[9]_0 ),
        .S(\gic0.gc0.count_d2_reg[7]_0 ));
  CARRY4 minusOp_carry__1
       (.CI(minusOp_carry__0_n_0),
        .CO(NLW_minusOp_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_minusOp_carry__1_O_UNCONNECTED[3:1],\wr_data_count_i_reg[9]_1 }),
        .S({1'b0,1'b0,1'b0,\gic0.gc0.count_d2_reg[8] }));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[0] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(minusOp_carry_n_7),
        .Q(axis_wr_data_count[0]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[1] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(axis_wr_data_count[1]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(axis_wr_data_count[2]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(axis_wr_data_count[3]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(axis_wr_data_count[4]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(axis_wr_data_count[5]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(axis_wr_data_count[6]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(axis_wr_data_count[7]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(axis_wr_data_count[8]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[9] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(axis_wr_data_count[9]),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module gpif2mst_async_34x512_wr_logic
   (out,
    WEBWE,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    \gic0.gc0.count_d1_reg[8] ,
    s_axis_tready,
    axis_prog_full,
    axis_wr_data_count,
    \dest_out_bin_ff_reg[8] ,
    \dest_out_bin_ff_reg[8]_0 ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    s_aclk,
    RD_PNTR_WR,
    s_axis_tvalid,
    \grstd1.grst_full.grst_f.rst_d3_reg );
  output out;
  output [0:0]WEBWE;
  output [0:0]Q;
  output [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  output [0:0]\gic0.gc0.count_d1_reg[8] ;
  output s_axis_tready;
  output axis_prog_full;
  output [9:0]axis_wr_data_count;
  input \dest_out_bin_ff_reg[8] ;
  input \dest_out_bin_ff_reg[8]_0 ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input s_aclk;
  input [8:0]RD_PNTR_WR;
  input s_axis_tvalid;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;

  wire [8:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]Q;
  wire [8:0]RD_PNTR_WR;
  wire [0:0]WEBWE;
  wire axis_prog_full;
  wire [9:0]axis_wr_data_count;
  wire [3:0]\c1/v1_reg ;
  wire [3:0]\c2/v1_reg ;
  wire \dest_out_bin_ff_reg[8] ;
  wire \dest_out_bin_ff_reg[8]_0 ;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire \gwas.gwdc1.wdcext_n_0 ;
  wire \gwas.gwdc1.wdcext_n_1 ;
  wire \gwas.gwdc1.wdcext_n_2 ;
  wire \gwas.gwdc1.wdcext_n_3 ;
  wire \gwas.gwdc1.wdcext_n_4 ;
  wire \gwas.gwdc1.wdcext_n_5 ;
  wire \gwas.gwdc1.wdcext_n_6 ;
  wire \gwas.gwdc1.wdcext_n_7 ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire out;
  wire [7:0]p_14_out;
  wire s_aclk;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire wpntr_n_0;
  wire wpntr_n_1;
  wire wpntr_n_13;
  wire wpntr_n_14;
  wire wpntr_n_15;
  wire wpntr_n_16;
  wire wpntr_n_17;
  wire wpntr_n_18;
  wire wpntr_n_19;
  wire wpntr_n_2;
  wire wpntr_n_20;
  wire wpntr_n_3;
  wire wpntr_n_30;
  wire wpntr_n_31;
  wire wpntr_n_32;
  wire wpntr_n_33;
  wire wpntr_n_34;
  wire wpntr_n_35;
  wire wpntr_n_45;
  wire wpntr_n_46;
  wire wpntr_n_47;
  wire wpntr_n_48;
  wire wpntr_n_49;
  wire wpntr_n_50;
  wire wpntr_n_51;
  wire wpntr_n_52;
  wire wpntr_n_53;

  gpif2mst_async_34x512_wr_pf_as \gwas.gpf.wrpf 
       (.E(WEBWE),
        .Q(p_14_out),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .axis_prog_full(axis_prog_full),
        .\gic0.gc0.count_d1_reg[7] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\gic0.gc0.count_d1_reg[8] (wpntr_n_35),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .out(out),
        .s_aclk(s_aclk));
  gpif2mst_async_34x512_wr_dc_fwft_ext_as \gwas.gwdc1.wdcext 
       (.D({wpntr_n_45,wpntr_n_46,wpntr_n_47,wpntr_n_48,wpntr_n_49,wpntr_n_50,wpntr_n_51,wpntr_n_52,wpntr_n_53}),
        .O({\gwas.gwdc1.wdcext_n_0 ,\gwas.gwdc1.wdcext_n_1 ,\gwas.gwdc1.wdcext_n_2 }),
        .S({wpntr_n_17,wpntr_n_18,wpntr_n_19,wpntr_n_20}),
        .axis_wr_data_count(axis_wr_data_count),
        .\gic0.gc0.count_d2_reg[7] (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram [7:0]),
        .\gic0.gc0.count_d2_reg[7]_0 ({wpntr_n_30,wpntr_n_31,wpntr_n_32,wpntr_n_33}),
        .\gic0.gc0.count_d2_reg[8] (wpntr_n_34),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .s_aclk(s_aclk),
        .\wr_data_count_i_reg[9]_0 ({\gwas.gwdc1.wdcext_n_3 ,\gwas.gwdc1.wdcext_n_4 ,\gwas.gwdc1.wdcext_n_5 ,\gwas.gwdc1.wdcext_n_6 }),
        .\wr_data_count_i_reg[9]_1 (\gwas.gwdc1.wdcext_n_7 ));
  gpif2mst_async_34x512_wr_status_flags_as \gwas.wsts 
       (.E(WEBWE),
        .\dest_out_bin_ff_reg[8] (\dest_out_bin_ff_reg[8] ),
        .\dest_out_bin_ff_reg[8]_0 (\dest_out_bin_ff_reg[8]_0 ),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .out(out),
        .s_aclk(s_aclk),
        .s_axis_tready(s_axis_tready),
        .s_axis_tvalid(s_axis_tvalid),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ));
  gpif2mst_async_34x512_wr_bin_cntr wpntr
       (.D({wpntr_n_45,wpntr_n_46,wpntr_n_47,wpntr_n_48,wpntr_n_49,wpntr_n_50,wpntr_n_51,wpntr_n_52,wpntr_n_53}),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(WEBWE),
        .O({\gwas.gwdc1.wdcext_n_0 ,\gwas.gwdc1.wdcext_n_1 ,\gwas.gwdc1.wdcext_n_2 }),
        .Q({Q,p_14_out}),
        .RD_PNTR_WR(RD_PNTR_WR),
        .S({wpntr_n_0,wpntr_n_1,wpntr_n_2,wpntr_n_3}),
        .\gdiff.diff_pntr_pad_reg[8] ({wpntr_n_13,wpntr_n_14,wpntr_n_15,wpntr_n_16}),
        .\gdiff.diff_pntr_pad_reg[9] (wpntr_n_35),
        .\gic0.gc0.count_d1_reg[8]_0 (\gic0.gc0.count_d1_reg[8] ),
        .\gic0.gc0.count_d2_reg[7]_0 (\gwas.gwdc1.wdcext_n_7 ),
        .\gic0.gc0.count_d2_reg[7]_1 ({\gwas.gwdc1.wdcext_n_3 ,\gwas.gwdc1.wdcext_n_4 ,\gwas.gwdc1.wdcext_n_5 ,\gwas.gwdc1.wdcext_n_6 }),
        .\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg (\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ),
        .s_aclk(s_aclk),
        .v1_reg(\c1/v1_reg ),
        .v1_reg_0(\c2/v1_reg ),
        .\wr_data_count_i_reg[0] ({wpntr_n_17,wpntr_n_18,wpntr_n_19,wpntr_n_20}),
        .\wr_data_count_i_reg[9] ({wpntr_n_30,wpntr_n_31,wpntr_n_32,wpntr_n_33}),
        .\wr_data_count_i_reg[9]_0 (wpntr_n_34));
endmodule

(* ORIG_REF_NAME = "wr_pf_as" *) 
module gpif2mst_async_34x512_wr_pf_as
   (axis_prog_full,
    E,
    Q,
    S,
    \gic0.gc0.count_d1_reg[7] ,
    \gic0.gc0.count_d1_reg[8] ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    s_aclk,
    \grstd1.grst_full.grst_f.rst_d3_reg ,
    out);
  output axis_prog_full;
  input [0:0]E;
  input [7:0]Q;
  input [3:0]S;
  input [3:0]\gic0.gc0.count_d1_reg[7] ;
  input [0:0]\gic0.gc0.count_d1_reg[8] ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input s_aclk;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;
  input out;

  wire [0:0]E;
  wire [7:0]Q;
  wire [3:0]S;
  wire axis_prog_full;
  wire \gdiff.diff_pntr_pad_reg_n_0_[2] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[3] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[4] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[5] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[6] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[7] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[8] ;
  wire \gdiff.diff_pntr_pad_reg_n_0_[9] ;
  wire [3:0]\gic0.gc0.count_d1_reg[7] ;
  wire [0:0]\gic0.gc0.count_d1_reg[8] ;
  wire \gpf1.prog_full_i_i_1_n_0 ;
  wire \gpf1.prog_full_i_i_2_n_0 ;
  wire \gpf1.prog_full_i_i_3_n_0 ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  wire out;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__0_n_4;
  wire plusOp_carry__0_n_5;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry__1_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_4;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire s_aclk;
  wire [0:0]NLW_plusOp_carry_O_UNCONNECTED;
  wire [3:0]NLW_plusOp_carry__1_CO_UNCONNECTED;
  wire [3:1]NLW_plusOp_carry__1_O_UNCONNECTED;

  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[2] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry_n_6),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[2] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[3] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry_n_5),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[3] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[4] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry_n_4),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[4] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[5] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__0_n_7),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[5] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[6] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__0_n_6),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[6] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[7] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__0_n_5),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[7] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[8] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__0_n_4),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[8] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \gdiff.diff_pntr_pad_reg[9] 
       (.C(s_aclk),
        .CE(1'b1),
        .D(plusOp_carry__1_n_7),
        .Q(\gdiff.diff_pntr_pad_reg_n_0_[9] ),
        .R(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT5 #(
    .INIT(32'h0F040004)) 
    \gpf1.prog_full_i_i_1 
       (.I0(\gpf1.prog_full_i_i_2_n_0 ),
        .I1(\gpf1.prog_full_i_i_3_n_0 ),
        .I2(\grstd1.grst_full.grst_f.rst_d3_reg ),
        .I3(out),
        .I4(axis_prog_full),
        .O(\gpf1.prog_full_i_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \gpf1.prog_full_i_i_2 
       (.I0(\gdiff.diff_pntr_pad_reg_n_0_[5] ),
        .I1(\gdiff.diff_pntr_pad_reg_n_0_[4] ),
        .I2(\gdiff.diff_pntr_pad_reg_n_0_[7] ),
        .I3(\gdiff.diff_pntr_pad_reg_n_0_[6] ),
        .O(\gpf1.prog_full_i_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hE000)) 
    \gpf1.prog_full_i_i_3 
       (.I0(\gdiff.diff_pntr_pad_reg_n_0_[2] ),
        .I1(\gdiff.diff_pntr_pad_reg_n_0_[3] ),
        .I2(\gdiff.diff_pntr_pad_reg_n_0_[8] ),
        .I3(\gdiff.diff_pntr_pad_reg_n_0_[9] ),
        .O(\gpf1.prog_full_i_i_3_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \gpf1.prog_full_i_reg 
       (.C(s_aclk),
        .CE(1'b1),
        .D(\gpf1.prog_full_i_i_1_n_0 ),
        .Q(axis_prog_full),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(E),
        .DI(Q[3:0]),
        .O({plusOp_carry_n_4,plusOp_carry_n_5,plusOp_carry_n_6,NLW_plusOp_carry_O_UNCONNECTED[0]}),
        .S(S));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(Q[7:4]),
        .O({plusOp_carry__0_n_4,plusOp_carry__0_n_5,plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .S(\gic0.gc0.count_d1_reg[7] ));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO(NLW_plusOp_carry__1_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_plusOp_carry__1_O_UNCONNECTED[3:1],plusOp_carry__1_n_7}),
        .S({1'b0,1'b0,1'b0,\gic0.gc0.count_d1_reg[8] }));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module gpif2mst_async_34x512_wr_status_flags_as
   (out,
    E,
    s_axis_tready,
    v1_reg,
    \dest_out_bin_ff_reg[8] ,
    v1_reg_0,
    \dest_out_bin_ff_reg[8]_0 ,
    \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ,
    s_aclk,
    s_axis_tvalid,
    \grstd1.grst_full.grst_f.rst_d3_reg );
  output out;
  output [0:0]E;
  output s_axis_tready;
  input [3:0]v1_reg;
  input \dest_out_bin_ff_reg[8] ;
  input [3:0]v1_reg_0;
  input \dest_out_bin_ff_reg[8]_0 ;
  input \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  input s_aclk;
  input s_axis_tvalid;
  input \grstd1.grst_full.grst_f.rst_d3_reg ;

  wire [0:0]E;
  wire c2_n_0;
  wire comp1;
  wire \dest_out_bin_ff_reg[8] ;
  wire \dest_out_bin_ff_reg[8]_0 ;
  wire \grstd1.grst_full.grst_f.rst_d3_reg ;
  wire \ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire s_aclk;
  wire s_axis_tready;
  wire s_axis_tvalid;
  wire [3:0]v1_reg;
  wire [3:0]v1_reg_0;

  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_3 
       (.I0(s_axis_tvalid),
        .I1(ram_full_fb_i),
        .O(E));
  gpif2mst_async_34x512_compare c1
       (.comp1(comp1),
        .\dest_out_bin_ff_reg[8] (\dest_out_bin_ff_reg[8] ),
        .v1_reg(v1_reg));
  gpif2mst_async_34x512_compare_0 c2
       (.comp1(comp1),
        .\dest_out_bin_ff_reg[8] (\dest_out_bin_ff_reg[8]_0 ),
        .\grstd1.grst_full.grst_f.rst_d3_reg (\grstd1.grst_full.grst_f.rst_d3_reg ),
        .out(ram_full_fb_i),
        .ram_full_fb_i_reg(c2_n_0),
        .s_axis_tvalid(s_axis_tvalid),
        .v1_reg_0(v1_reg_0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b0)) 
    ram_full_fb_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_full_fb_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDSE #(
    .INIT(1'b0)) 
    ram_full_i_reg
       (.C(s_aclk),
        .CE(1'b1),
        .D(c2_n_0),
        .Q(ram_full_i),
        .S(\ngwrdrst.grst.g7serrst.gsckt_wrst.gic_rst.sckt_wr_rst_ic_reg ));
  LUT1 #(
    .INIT(2'h1)) 
    s_axis_tready_INST_0
       (.I0(ram_full_i),
        .O(s_axis_tready));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl; //();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
